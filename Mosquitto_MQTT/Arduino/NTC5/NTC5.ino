#include <OneWire.h>
#include <DallasTemperature.h>

//##### TRAY A #####
byte DataA1 []= {0x01,0x05,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB1,0x48};
byte DataA2 []= {0x01,0x05,0x0A,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x37,0xEF};
byte DataA3 []= {0x01,0x05,0x14,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBE,0x47};
byte DataA4 []= {0x01,0x05,0x1E,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0xE0};
byte DataA5 []= {0x01,0x05,0x28,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xAF,0x56};
byte DataA6 []= {0x01,0x05,0x32,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0x3D};
byte DataA7 []= {0x01,0x05,0x3C,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA0,0x59};
byte DataA8 []= {0x01,0x05,0x46,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x1A};
byte DataA9 []= {0x01,0x05,0x50,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8D,0x74};
byte DataA10 []= {0x01,0x05,0x5A,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0xD3};

//##### TRAY B #####
byte DataB1 []= {0x01,0x05,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0xD8};
byte DataB2 []= {0x01,0x05,0x0B,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF6,0x7F};
byte DataB3 []= {0x01,0x05,0x15,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xD7};
byte DataB4 []= {0x01,0x05,0x1F,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF9,0x70};
byte DataB5 []= {0x01,0x05,0x29,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6E,0xC6};
byte DataB6 []= {0x01,0x05,0x33,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE5,0xAD};
byte DataB7 []= {0x01,0x05,0x3D,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0xC9};
byte DataB8 []= {0x01,0x05,0x47,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC2,0x8A};
byte DataB9 []= {0x01,0x05,0x51,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4C,0xE4};
byte DataB10 []= {0x01,0x05,0x5B,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCA,0x43};

//##### TRAY C #####
byte DataC1 []= {0x01,0x05,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x29};
byte DataC2 []= {0x01,0x05,0x0C,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB4,0x4D};
byte DataC3 []= {0x01,0x05,0x16,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x26};
byte DataC4 []= {0x01,0x05,0x20,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA8,0x90};
byte DataC5 []= {0x01,0x05,0x2A,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2E,0x37};
byte DataC6 []= {0x01,0x05,0x34,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xA7,0x9F};
byte DataC7 []= {0x01,0x05,0x3E,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x38};
byte DataC8 []= {0x01,0x05,0x48,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x87,0x7E};
byte DataC9 []= {0x01,0x05,0x52,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x15};
byte DataC10 []= {0x01,0x05,0x5C,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x88,0x71};

//##### TRAY D #####
byte DataD1 []= {0x01,0x05,0x03,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF1,0xB9};
byte DataD2 []= {0x01,0x05,0x0D,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x75,0xDD};
byte DataD3 []= {0x01,0x05,0x17,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xB6};
byte DataD4 []= {0x01,0x05,0x21,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x69,0x00};
byte DataD5 []= {0x01,0x05,0x2B,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEF,0xA7};
byte DataD6 []= {0x01,0x05,0x35,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x66,0x0F};
byte DataD7 []= {0x01,0x05,0x3F,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xA8};
byte DataD8 []= {0x01,0x05,0x49,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0xEE};
byte DataD9 []= {0x01,0x05,0x53,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCD,0x85};
byte DataD10 []= {0x01,0x05,0x5D,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x49,0xE1};

//##### TRAY E #####
byte DataE1 []= {0x01,0x05,0x04,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB3,0x8B};
byte DataE2 []= {0x01,0x05,0x0E,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x35,0x2C};
byte DataE3 []= {0x01,0x05,0x18,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBB,0x42};
byte DataE4 []= {0x01,0x05,0x22,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x29,0xF1};
byte DataE5 []= {0x01,0x05,0x2C,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xAD,0x95};
byte DataE6 []= {0x01,0x05,0x36,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x26,0xFE};
byte DataE7 []= {0x01,0x05,0x40,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB8};
byte DataE8 []= {0x01,0x05,0x4A,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x1F};
byte DataE9 []= {0x01,0x05,0x54,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8F,0xB7};
byte DataE10 []= {0x01,0x05,0x5E,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x10};

//##### TRAY F #####
byte DataF1 []= {0x01,0x05,0x05,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x72,0x1B};
byte DataF2 []= {0x01,0x05,0x0F,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF4,0xBC};
byte DataF3 []= {0x01,0x05,0x19,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7A,0xD2};
byte DataF4 []= {0x01,0x05,0x23,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE8,0x61};
byte DataF5 []= {0x01,0x05,0x2D,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6C,0x05};
byte DataF6 []= {0x01,0x05,0x37,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x6E};
byte DataF7 []= {0x01,0x05,0x41,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x41,0x28};
byte DataF8 []= {0x01,0x05,0x4B,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC7,0x8F};
byte DataF9 []= {0x01,0x05,0x55,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4E,0x27};
byte DataF10 [] = {0x01,0x05,0x5F,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC8,0x80};

#define Temperature_Pin 4

OneWire oneWire(Temperature_Pin);
DallasTemperature DS18B20(&oneWire);

#define Vpin 11

int period = 10;
unsigned long time_now = 0;

float tempC;
float tempF;
int dropstate = 0;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  DS18B20.begin();
  pinMode(Vpin, INPUT);
  //pinMode(blah, OUTPUT);
  Serial.println("Starting..");
}
void(* resetFunc)(void) = 0; //declare reset function @ address 0

void loop() {
  // put your main code here, to run repeatedly:
  dropstate = digitalRead(Vpin);
  time_now = millis();

  // Call sensors.requestTemperatures() to issue a global temperature and Requests to all devices on the bus
  DS18B20.requestTemperatures();
  // Why "byIndex"? You can have more than one IC on the same bus. 0 refers to the first IC on the wire
  tempC = DS18B20.getTempCByIndex(0);  // read temperature in °C
  tempF = tempC * 9 / 5 + 32; // convert °C to °F

   if (dropstate == HIGH)
  {
    //delay(500);
    Serial.write("Hi\n");
    Serial.println(tempC);
    //Serial.println(tempC);
    delay(10);
    Serial.write("Hi\n");
    Serial.println(tempC);
    //Serial.println(tempC);
    //delay(1000);
    //Serial.write("Hi\n");
    //Serial.println(tempC);
    //Serial.println(tempC);
  }
  //else
  //{
    //Serial.print((tempC)+String(" "));
    //Serial.println(tempC);
  //}

  
  if (millis() >= time_now + period){
    time_now += period;
    //Serial.println(tempC);
  }
  
  if (Serial.available()>0)
  {
    String str = Serial.readString();
    //Serial.println(str);
    if(str.substring(0) == "YO\n"){
      delay(2000);
      Serial.write("Hi\n");
       Serial.println(tempC);
       Serial.println(tempC);
       //Serial.println(tempC);
    }
    else if (str.substring(0) == "RE\n")
    {
      resetFunc(); //call reset
    }
    else if (str.substring(0) == "A1\n")
    {
      delay(1000);
      Serial.write(DataA1, sizeof(DataA1));
    }
    else if (str.substring(0) == "A2\n")
    {
      delay(1000);
      Serial.write(DataA2, sizeof(DataA2));
    }
    else if (str.substring(0) == "A3\n")
    {
      delay(1000);
      Serial.write(DataA3, sizeof(DataA3));
    }
    else if (str.substring(0) == "A4\n")
    {
      delay(1000);
      Serial.write(DataA4, sizeof(DataA4));
    }
    else if (str.substring(0) == "A5\n")
    {
      delay(1000);
      Serial.write(DataA5, sizeof(DataA5));
    }
    else if (str.substring(0) == "A6\n")
    {
      delay(1000);
      Serial.write(DataA6, sizeof(DataA6));
    }
    else if (str.substring(0) == "A7\n")
    {
      delay(1000);
      Serial.write(DataA7, sizeof(DataA7));
    }
    else if (str.substring(0) == "A8\n")
    {
      delay(1000);
      Serial.write(DataA8, sizeof(DataA8));
    }
    else if (str.substring(0) == "A9\n")
    {
      delay(1000);
      Serial.write(DataA9, sizeof(DataA9));
    }
    else if (str.substring(0) == "A10\n")
    {
      delay(1000);
      Serial.write(DataA10, sizeof(DataA10));
    }

    // ********** TRAY B **********
    else if (str.substring(0) == "B1\n")
    {
      delay(1000);
      Serial.write(DataB1, sizeof(DataB1));
    }
    else if (str.substring(0) == "B2\n")
    {
      delay(1000);
      Serial.write(DataB2, sizeof(DataB2));
    }
    else if (str.substring(0) == "B3\n")
    {
      delay(1000);
      Serial.write(DataB3, sizeof(DataB3));
    }
    else if (str.substring(0) == "B4\n")
    {
      delay(1000);
      Serial.write(DataB4, sizeof(DataB4));
    }
    else if (str.substring(0) == "B5\n")
    {
      delay(1000);
      Serial.write(DataB5, sizeof(DataB5));
    }
    else if (str.substring(0) == "B6\n")
    {
      delay(1000);
      Serial.write(DataB6, sizeof(DataB6));
    }
    else if (str.substring(0) == "B7\n")
    {
      delay(1000);
      Serial.write(DataB7, sizeof(DataB7));
    }
    else if (str.substring(0) == "B8\n")
    {
      delay(1000);
      Serial.write(DataB8, sizeof(DataB8));
    }
    else if (str.substring(0) == "B9\n")
    {
      delay(1000);
      Serial.write(DataB9, sizeof(DataB9));
    }
    else if (str.substring(0) == "B10\n")
    {
      delay(1000);
      Serial.write(DataB10, sizeof(DataB10));
    }

    // ********** TRAY C **********
    else if (str.substring(0) == "C1\n")
    {
      delay(1000);
      Serial.write(DataC1, sizeof(DataC1));
    }
    else if (str.substring(0) == "C2\n")
    {
      delay(1000);
      Serial.write(DataC2, sizeof(DataC2));
    }
    else if (str.substring(0) == "C3\n")
    {
      delay(1000);
      Serial.write(DataC3, sizeof(DataC3));
    }
    else if (str.substring(0) == "C4\n")
    {
      delay(1000);
      Serial.write(DataC4, sizeof(DataC4));
    }
    else if (str.substring(0) == "C5\n")
    {
      delay(1000);
      Serial.write(DataC5, sizeof(DataC5));
    }
    else if (str.substring(0) == "C6\n")
    {
      delay(1000);
      Serial.write(DataC6, sizeof(DataC6));
    }
    else if (str.substring(0) == "C7\n")
    {
      delay(1000);
      Serial.write(DataC7, sizeof(DataC7));
    }
    else if (str.substring(0) == "C8\n")
    {
      delay(1000);
      Serial.write(DataC8, sizeof(DataC8));
    }
    else if (str.substring(0) == "C9\n")
    {
      delay(1000);
      Serial.write(DataC9, sizeof(DataC9));
    }
    else if (str.substring(0) == "C10\n")
    {
      delay(1000);
      Serial.write(DataC10, sizeof(DataC10));
    }

    // ********** TRAY D **********
    else if (str.substring(0) == "D1\n")
    {
      delay(1000);
      Serial.write(DataD1, sizeof(DataD1));
    }
    else if (str.substring(0) == "D2\n")
    {
      delay(1000);
      Serial.write(DataD2, sizeof(DataD2));
    }
    else if (str.substring(0) == "D3\n")
    {
      delay(1000);
      Serial.write(DataD3, sizeof(DataD3));
    }
    else if (str.substring(0) == "D4\n")
    {
      delay(1000);
      Serial.write(DataD4, sizeof(DataD4));
    }
    else if (str.substring(0) == "D5\n")
    {
      delay(1000);
      Serial.write(DataD5, sizeof(DataD5));
    }
    else if (str.substring(0) == "D6\n")
    {
      delay(1000);
      Serial.write(DataD6, sizeof(DataD6));
    }
    else if (str.substring(0) == "D7\n")
    {
      delay(1000);
      Serial.write(DataD7, sizeof(DataD7));
    }
    else if (str.substring(0) == "D8\n")
    {
      delay(1000);
      Serial.write(DataD8, sizeof(DataD8));
    }
    else if (str.substring(0) == "D9\n")
    {
      delay(1000);
      Serial.write(DataD9, sizeof(DataD9));
    }
    else if (str.substring(0) == "D10\n")
    {
      delay(1000);
      Serial.write(DataD10, sizeof(DataD10));
    }

    // ********** TRAY E **********
    else if (str.substring(0) == "E1\n")
    {
      delay(1000);
      Serial.write(DataE1, sizeof(DataE1));
    }
    else if (str.substring(0) == "E2\n")
    {
      delay(1000);
      Serial.write(DataE2, sizeof(DataE2));
    }
    else if (str.substring(0) == "E3\n")
    {
      delay(1000);
      Serial.write(DataE3, sizeof(DataE3));
    }
    else if (str.substring(0) == "E4\n")
    {
      delay(1000);
      Serial.write(DataE4, sizeof(DataE4));
    }
    else if (str.substring(0) == "E5\n")
    {
      delay(1000);
      Serial.write(DataE5, sizeof(DataE5));
    }
    else if (str.substring(0) == "E6\n")
    {
      delay(1000);
      Serial.write(DataE6, sizeof(DataE6));
    }
    else if (str.substring(0) == "E7\n")
    {
      delay(1000);
      Serial.write(DataE7, sizeof(DataE7));
    }
    else if (str.substring(0) == "E8\n")
    {
      delay(1000);
      Serial.write(DataE8, sizeof(DataE8));
    }
    else if (str.substring(0) == "E9\n")
    {
      delay(1000);
      Serial.write(DataE9, sizeof(DataE9));
    }
    else if (str.substring(0) == "E10\n")
    {
      delay(1000);
      Serial.write(DataE10, sizeof(DataE10));
    }

    // ********** TRAY F **********
    else if (str.substring(0) == "F1\n")
    {
      delay(1000);
      Serial.write(DataF1, sizeof(DataF1));
    }
    else if (str.substring(0) == "F2\n")
    {
      delay(1000);
      Serial.write(DataF2, sizeof(DataF2));
    }
    else if (str.substring(0) == "F3\n")
    {
      delay(1000);
      Serial.write(DataF3, sizeof(DataF3));
    }
    else if (str.substring(0) == "F4\n")
    {
      delay(1000);
      Serial.write(DataF4, sizeof(DataF4));
    }
    else if (str.substring(0) == "F5\n")
    {
      delay(1000);
      Serial.write(DataF5, sizeof(DataF5));
    }
    else if (str.substring(0) == "F6\n")
    {
      delay(1000);
      Serial.write(DataF6, sizeof(DataF6));
    }
    else if (str.substring(0) == "F7\n")
    {
      delay(1000);
      Serial.write(DataF7, sizeof(DataF7));
    }
    else if (str.substring(0) == "F8\n")
    {
      delay(1000);
      Serial.write(DataF8, sizeof(DataF8));
    }
    else if (str.substring(0) == "F9\n")
    {
      delay(1000);
      Serial.write(DataF9, sizeof(DataF9));
    }
    else if (str.substring(0) == "F10\n")
    {
      delay(1000);
      Serial.write(DataF10, sizeof(DataF10));
    }
    else{
      //Serial.println(tempC);
      ;
    }
  }
  
  //delay(100);
}
