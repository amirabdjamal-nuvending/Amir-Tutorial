
9Bits_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003320  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800342c  0800342c  0001342c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003584  08003584  000202ec  2**0
                  CONTENTS
  4 .ARM          00000000  08003584  08003584  000202ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003584  08003584  000202ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003588  08003588  00013588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  0800358c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200002ec  08003878  000202ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  08003878  00020428  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000615b  00000000  00000000  00020315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001536  00000000  00000000  00026470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  000279a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  00028058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001671c  00000000  00000000  00028690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000757a  00000000  00000000  0003edac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000810e8  00000000  00000000  00046326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c740e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019ec  00000000  00000000  000c7460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002ec 	.word	0x200002ec
 8000128:	00000000 	.word	0x00000000
 800012c:	08003414 	.word	0x08003414

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002f0 	.word	0x200002f0
 8000148:	08003414 	.word	0x08003414

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <HAL_UART_TxCpltCallback>:
uint16_t F8[6] = {0x1FB,  0x102,  0x101,  0x103,  0x101,  0x1FB};
uint16_t F9[6] = {0x1FB,  0x102,  0x101,  0x102,  0x101,  0x1FB};
uint16_t F10[6] ={0x1FB,  0x102,  0x101,  0x101,  0x101,  0x1FB};

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit_IT(&huart2, Tx_data, sizeof(Tx_data));
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
	...

08000174 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart2, Rx_data_from_stc, 5); //restart the interupt reception mode
 800017c:	2205      	movs	r2, #5
 800017e:	4917      	ldr	r1, [pc, #92]	; (80001dc <HAL_UART_RxCpltCallback+0x68>)
 8000180:	4817      	ldr	r0, [pc, #92]	; (80001e0 <HAL_UART_RxCpltCallback+0x6c>)
 8000182:	f002 fbe2 	bl	800294a <HAL_UART_Receive_DMA>
	if (strcmp(Rx_data_from_stc, Drop_Success) == 0){
 8000186:	4917      	ldr	r1, [pc, #92]	; (80001e4 <HAL_UART_RxCpltCallback+0x70>)
 8000188:	4814      	ldr	r0, [pc, #80]	; (80001dc <HAL_UART_RxCpltCallback+0x68>)
 800018a:	f7ff ffdf 	bl	800014c <strcmp>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d105      	bne.n	80001a0 <HAL_UART_RxCpltCallback+0x2c>
		HAL_UART_Transmit_IT(&huart1, "Drop Sensor Success!", 5);
 8000194:	2205      	movs	r2, #5
 8000196:	4914      	ldr	r1, [pc, #80]	; (80001e8 <HAL_UART_RxCpltCallback+0x74>)
 8000198:	4814      	ldr	r0, [pc, #80]	; (80001ec <HAL_UART_RxCpltCallback+0x78>)
 800019a:	f002 fb62 	bl	8002862 <HAL_UART_Transmit_IT>
	else{

	}


}
 800019e:	e018      	b.n	80001d2 <HAL_UART_RxCpltCallback+0x5e>
	else if (strcmp(Rx_data_from_stc, Drop_Not_Success) == 0){
 80001a0:	4913      	ldr	r1, [pc, #76]	; (80001f0 <HAL_UART_RxCpltCallback+0x7c>)
 80001a2:	480e      	ldr	r0, [pc, #56]	; (80001dc <HAL_UART_RxCpltCallback+0x68>)
 80001a4:	f7ff ffd2 	bl	800014c <strcmp>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d105      	bne.n	80001ba <HAL_UART_RxCpltCallback+0x46>
		HAL_UART_Transmit_IT(&huart1, "Drop Sensor Not Success!", 5);
 80001ae:	2205      	movs	r2, #5
 80001b0:	4910      	ldr	r1, [pc, #64]	; (80001f4 <HAL_UART_RxCpltCallback+0x80>)
 80001b2:	480e      	ldr	r0, [pc, #56]	; (80001ec <HAL_UART_RxCpltCallback+0x78>)
 80001b4:	f002 fb55 	bl	8002862 <HAL_UART_Transmit_IT>
}
 80001b8:	e00b      	b.n	80001d2 <HAL_UART_RxCpltCallback+0x5e>
	else if (strcmp(Rx_data_from_stc, Drop_Not_Success) == 0){
 80001ba:	490d      	ldr	r1, [pc, #52]	; (80001f0 <HAL_UART_RxCpltCallback+0x7c>)
 80001bc:	4807      	ldr	r0, [pc, #28]	; (80001dc <HAL_UART_RxCpltCallback+0x68>)
 80001be:	f7ff ffc5 	bl	800014c <strcmp>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d104      	bne.n	80001d2 <HAL_UART_RxCpltCallback+0x5e>
		HAL_UART_Transmit_IT(&huart1, "Motor Error", 5);
 80001c8:	2205      	movs	r2, #5
 80001ca:	490b      	ldr	r1, [pc, #44]	; (80001f8 <HAL_UART_RxCpltCallback+0x84>)
 80001cc:	4807      	ldr	r0, [pc, #28]	; (80001ec <HAL_UART_RxCpltCallback+0x78>)
 80001ce:	f002 fb48 	bl	8002862 <HAL_UART_Transmit_IT>
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000418 	.word	0x20000418
 80001e0:	2000034c 	.word	0x2000034c
 80001e4:	20000000 	.word	0x20000000
 80001e8:	0800342c 	.word	0x0800342c
 80001ec:	20000308 	.word	0x20000308
 80001f0:	20000008 	.word	0x20000008
 80001f4:	08003444 	.word	0x08003444
 80001f8:	08003460 	.word	0x08003460

080001fc <receive_transmit_command>:

void receive_transmit_command(void){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart1,receivedData4G, 2);
 8000200:	2202      	movs	r2, #2
 8000202:	49b6      	ldr	r1, [pc, #728]	; (80004dc <receive_transmit_command+0x2e0>)
 8000204:	48b6      	ldr	r0, [pc, #728]	; (80004e0 <receive_transmit_command+0x2e4>)
 8000206:	f002 fb70 	bl	80028ea <HAL_UART_Receive_IT>

	/////TRAY A/////
	if(strcmp(receivedData4G, "A1") == 0){       		//A1
 800020a:	49b6      	ldr	r1, [pc, #728]	; (80004e4 <receive_transmit_command+0x2e8>)
 800020c:	48b3      	ldr	r0, [pc, #716]	; (80004dc <receive_transmit_command+0x2e0>)
 800020e:	f7ff ff9d 	bl	800014c <strcmp>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d110      	bne.n	800023a <receive_transmit_command+0x3e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A1, 6);
 8000218:	2206      	movs	r2, #6
 800021a:	49b3      	ldr	r1, [pc, #716]	; (80004e8 <receive_transmit_command+0x2ec>)
 800021c:	48b3      	ldr	r0, [pc, #716]	; (80004ec <receive_transmit_command+0x2f0>)
 800021e:	f002 fb20 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000222:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000226:	f001 f961 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 800022a:	4bac      	ldr	r3, [pc, #688]	; (80004dc <receive_transmit_command+0x2e0>)
 800022c:	2200      	movs	r2, #0
 800022e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000230:	4baa      	ldr	r3, [pc, #680]	; (80004dc <receive_transmit_command+0x2e0>)
 8000232:	2200      	movs	r2, #0
 8000234:	705a      	strb	r2, [r3, #1]
//		 HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "%s", invalidCommand), 500);
//		 receivedData4G[0] = 0;
//		 receivedData4G[1] = 0;
	 }

}
 8000236:	f000 be25 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "A2") == 0){       //A2
 800023a:	49ad      	ldr	r1, [pc, #692]	; (80004f0 <receive_transmit_command+0x2f4>)
 800023c:	48a7      	ldr	r0, [pc, #668]	; (80004dc <receive_transmit_command+0x2e0>)
 800023e:	f7ff ff85 	bl	800014c <strcmp>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d110      	bne.n	800026a <receive_transmit_command+0x6e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A2, 6);
 8000248:	2206      	movs	r2, #6
 800024a:	49aa      	ldr	r1, [pc, #680]	; (80004f4 <receive_transmit_command+0x2f8>)
 800024c:	48a7      	ldr	r0, [pc, #668]	; (80004ec <receive_transmit_command+0x2f0>)
 800024e:	f002 fb08 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000252:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000256:	f001 f949 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 800025a:	4ba0      	ldr	r3, [pc, #640]	; (80004dc <receive_transmit_command+0x2e0>)
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000260:	4b9e      	ldr	r3, [pc, #632]	; (80004dc <receive_transmit_command+0x2e0>)
 8000262:	2200      	movs	r2, #0
 8000264:	705a      	strb	r2, [r3, #1]
}
 8000266:	f000 be0d 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "A3") == 0){       //A3
 800026a:	49a3      	ldr	r1, [pc, #652]	; (80004f8 <receive_transmit_command+0x2fc>)
 800026c:	489b      	ldr	r0, [pc, #620]	; (80004dc <receive_transmit_command+0x2e0>)
 800026e:	f7ff ff6d 	bl	800014c <strcmp>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d110      	bne.n	800029a <receive_transmit_command+0x9e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A3, 6);
 8000278:	2206      	movs	r2, #6
 800027a:	49a0      	ldr	r1, [pc, #640]	; (80004fc <receive_transmit_command+0x300>)
 800027c:	489b      	ldr	r0, [pc, #620]	; (80004ec <receive_transmit_command+0x2f0>)
 800027e:	f002 faf0 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000282:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000286:	f001 f931 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 800028a:	4b94      	ldr	r3, [pc, #592]	; (80004dc <receive_transmit_command+0x2e0>)
 800028c:	2200      	movs	r2, #0
 800028e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000290:	4b92      	ldr	r3, [pc, #584]	; (80004dc <receive_transmit_command+0x2e0>)
 8000292:	2200      	movs	r2, #0
 8000294:	705a      	strb	r2, [r3, #1]
}
 8000296:	f000 bdf5 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "A4") == 0){       //A4
 800029a:	4999      	ldr	r1, [pc, #612]	; (8000500 <receive_transmit_command+0x304>)
 800029c:	488f      	ldr	r0, [pc, #572]	; (80004dc <receive_transmit_command+0x2e0>)
 800029e:	f7ff ff55 	bl	800014c <strcmp>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d110      	bne.n	80002ca <receive_transmit_command+0xce>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A4, 6);
 80002a8:	2206      	movs	r2, #6
 80002aa:	4996      	ldr	r1, [pc, #600]	; (8000504 <receive_transmit_command+0x308>)
 80002ac:	488f      	ldr	r0, [pc, #572]	; (80004ec <receive_transmit_command+0x2f0>)
 80002ae:	f002 fad8 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80002b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002b6:	f001 f919 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80002ba:	4b88      	ldr	r3, [pc, #544]	; (80004dc <receive_transmit_command+0x2e0>)
 80002bc:	2200      	movs	r2, #0
 80002be:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80002c0:	4b86      	ldr	r3, [pc, #536]	; (80004dc <receive_transmit_command+0x2e0>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	705a      	strb	r2, [r3, #1]
}
 80002c6:	f000 bddd 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "A5") == 0){       //A5
 80002ca:	498f      	ldr	r1, [pc, #572]	; (8000508 <receive_transmit_command+0x30c>)
 80002cc:	4883      	ldr	r0, [pc, #524]	; (80004dc <receive_transmit_command+0x2e0>)
 80002ce:	f7ff ff3d 	bl	800014c <strcmp>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d110      	bne.n	80002fa <receive_transmit_command+0xfe>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A5, 6);
 80002d8:	2206      	movs	r2, #6
 80002da:	498c      	ldr	r1, [pc, #560]	; (800050c <receive_transmit_command+0x310>)
 80002dc:	4883      	ldr	r0, [pc, #524]	; (80004ec <receive_transmit_command+0x2f0>)
 80002de:	f002 fac0 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80002e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002e6:	f001 f901 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80002ea:	4b7c      	ldr	r3, [pc, #496]	; (80004dc <receive_transmit_command+0x2e0>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80002f0:	4b7a      	ldr	r3, [pc, #488]	; (80004dc <receive_transmit_command+0x2e0>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	705a      	strb	r2, [r3, #1]
}
 80002f6:	f000 bdc5 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "A6") == 0){       //A6
 80002fa:	4985      	ldr	r1, [pc, #532]	; (8000510 <receive_transmit_command+0x314>)
 80002fc:	4877      	ldr	r0, [pc, #476]	; (80004dc <receive_transmit_command+0x2e0>)
 80002fe:	f7ff ff25 	bl	800014c <strcmp>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d110      	bne.n	800032a <receive_transmit_command+0x12e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A6, 6);
 8000308:	2206      	movs	r2, #6
 800030a:	4982      	ldr	r1, [pc, #520]	; (8000514 <receive_transmit_command+0x318>)
 800030c:	4877      	ldr	r0, [pc, #476]	; (80004ec <receive_transmit_command+0x2f0>)
 800030e:	f002 faa8 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000312:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000316:	f001 f8e9 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 800031a:	4b70      	ldr	r3, [pc, #448]	; (80004dc <receive_transmit_command+0x2e0>)
 800031c:	2200      	movs	r2, #0
 800031e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000320:	4b6e      	ldr	r3, [pc, #440]	; (80004dc <receive_transmit_command+0x2e0>)
 8000322:	2200      	movs	r2, #0
 8000324:	705a      	strb	r2, [r3, #1]
}
 8000326:	f000 bdad 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "A7") == 0){       //A7
 800032a:	497b      	ldr	r1, [pc, #492]	; (8000518 <receive_transmit_command+0x31c>)
 800032c:	486b      	ldr	r0, [pc, #428]	; (80004dc <receive_transmit_command+0x2e0>)
 800032e:	f7ff ff0d 	bl	800014c <strcmp>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d110      	bne.n	800035a <receive_transmit_command+0x15e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A7, 6);
 8000338:	2206      	movs	r2, #6
 800033a:	4978      	ldr	r1, [pc, #480]	; (800051c <receive_transmit_command+0x320>)
 800033c:	486b      	ldr	r0, [pc, #428]	; (80004ec <receive_transmit_command+0x2f0>)
 800033e:	f002 fa90 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000342:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000346:	f001 f8d1 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 800034a:	4b64      	ldr	r3, [pc, #400]	; (80004dc <receive_transmit_command+0x2e0>)
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000350:	4b62      	ldr	r3, [pc, #392]	; (80004dc <receive_transmit_command+0x2e0>)
 8000352:	2200      	movs	r2, #0
 8000354:	705a      	strb	r2, [r3, #1]
}
 8000356:	f000 bd95 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "A8") == 0){       //A8
 800035a:	4971      	ldr	r1, [pc, #452]	; (8000520 <receive_transmit_command+0x324>)
 800035c:	485f      	ldr	r0, [pc, #380]	; (80004dc <receive_transmit_command+0x2e0>)
 800035e:	f7ff fef5 	bl	800014c <strcmp>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d110      	bne.n	800038a <receive_transmit_command+0x18e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A8, 6);
 8000368:	2206      	movs	r2, #6
 800036a:	496e      	ldr	r1, [pc, #440]	; (8000524 <receive_transmit_command+0x328>)
 800036c:	485f      	ldr	r0, [pc, #380]	; (80004ec <receive_transmit_command+0x2f0>)
 800036e:	f002 fa78 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000372:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000376:	f001 f8b9 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 800037a:	4b58      	ldr	r3, [pc, #352]	; (80004dc <receive_transmit_command+0x2e0>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000380:	4b56      	ldr	r3, [pc, #344]	; (80004dc <receive_transmit_command+0x2e0>)
 8000382:	2200      	movs	r2, #0
 8000384:	705a      	strb	r2, [r3, #1]
}
 8000386:	f000 bd7d 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "A9") == 0){       //A9
 800038a:	4967      	ldr	r1, [pc, #412]	; (8000528 <receive_transmit_command+0x32c>)
 800038c:	4853      	ldr	r0, [pc, #332]	; (80004dc <receive_transmit_command+0x2e0>)
 800038e:	f7ff fedd 	bl	800014c <strcmp>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d110      	bne.n	80003ba <receive_transmit_command+0x1be>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A9, 6);
 8000398:	2206      	movs	r2, #6
 800039a:	4964      	ldr	r1, [pc, #400]	; (800052c <receive_transmit_command+0x330>)
 800039c:	4853      	ldr	r0, [pc, #332]	; (80004ec <receive_transmit_command+0x2f0>)
 800039e:	f002 fa60 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80003a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003a6:	f001 f8a1 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80003aa:	4b4c      	ldr	r3, [pc, #304]	; (80004dc <receive_transmit_command+0x2e0>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80003b0:	4b4a      	ldr	r3, [pc, #296]	; (80004dc <receive_transmit_command+0x2e0>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	705a      	strb	r2, [r3, #1]
}
 80003b6:	f000 bd65 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "AA") == 0){       //A10
 80003ba:	495d      	ldr	r1, [pc, #372]	; (8000530 <receive_transmit_command+0x334>)
 80003bc:	4847      	ldr	r0, [pc, #284]	; (80004dc <receive_transmit_command+0x2e0>)
 80003be:	f7ff fec5 	bl	800014c <strcmp>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d110      	bne.n	80003ea <receive_transmit_command+0x1ee>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A10, 6);
 80003c8:	2206      	movs	r2, #6
 80003ca:	495a      	ldr	r1, [pc, #360]	; (8000534 <receive_transmit_command+0x338>)
 80003cc:	4847      	ldr	r0, [pc, #284]	; (80004ec <receive_transmit_command+0x2f0>)
 80003ce:	f002 fa48 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80003d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d6:	f001 f889 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80003da:	4b40      	ldr	r3, [pc, #256]	; (80004dc <receive_transmit_command+0x2e0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80003e0:	4b3e      	ldr	r3, [pc, #248]	; (80004dc <receive_transmit_command+0x2e0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	705a      	strb	r2, [r3, #1]
}
 80003e6:	f000 bd4d 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "B1") == 0){       //B1
 80003ea:	4953      	ldr	r1, [pc, #332]	; (8000538 <receive_transmit_command+0x33c>)
 80003ec:	483b      	ldr	r0, [pc, #236]	; (80004dc <receive_transmit_command+0x2e0>)
 80003ee:	f7ff fead 	bl	800014c <strcmp>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d110      	bne.n	800041a <receive_transmit_command+0x21e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B1, 6);
 80003f8:	2206      	movs	r2, #6
 80003fa:	4950      	ldr	r1, [pc, #320]	; (800053c <receive_transmit_command+0x340>)
 80003fc:	483b      	ldr	r0, [pc, #236]	; (80004ec <receive_transmit_command+0x2f0>)
 80003fe:	f002 fa30 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000402:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000406:	f001 f871 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 800040a:	4b34      	ldr	r3, [pc, #208]	; (80004dc <receive_transmit_command+0x2e0>)
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000410:	4b32      	ldr	r3, [pc, #200]	; (80004dc <receive_transmit_command+0x2e0>)
 8000412:	2200      	movs	r2, #0
 8000414:	705a      	strb	r2, [r3, #1]
}
 8000416:	f000 bd35 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "B2") == 0){       //B2
 800041a:	4949      	ldr	r1, [pc, #292]	; (8000540 <receive_transmit_command+0x344>)
 800041c:	482f      	ldr	r0, [pc, #188]	; (80004dc <receive_transmit_command+0x2e0>)
 800041e:	f7ff fe95 	bl	800014c <strcmp>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d110      	bne.n	800044a <receive_transmit_command+0x24e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B2, 6);
 8000428:	2206      	movs	r2, #6
 800042a:	4946      	ldr	r1, [pc, #280]	; (8000544 <receive_transmit_command+0x348>)
 800042c:	482f      	ldr	r0, [pc, #188]	; (80004ec <receive_transmit_command+0x2f0>)
 800042e:	f002 fa18 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000432:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000436:	f001 f859 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 800043a:	4b28      	ldr	r3, [pc, #160]	; (80004dc <receive_transmit_command+0x2e0>)
 800043c:	2200      	movs	r2, #0
 800043e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000440:	4b26      	ldr	r3, [pc, #152]	; (80004dc <receive_transmit_command+0x2e0>)
 8000442:	2200      	movs	r2, #0
 8000444:	705a      	strb	r2, [r3, #1]
}
 8000446:	f000 bd1d 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "B3") == 0){       //B3
 800044a:	493f      	ldr	r1, [pc, #252]	; (8000548 <receive_transmit_command+0x34c>)
 800044c:	4823      	ldr	r0, [pc, #140]	; (80004dc <receive_transmit_command+0x2e0>)
 800044e:	f7ff fe7d 	bl	800014c <strcmp>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d110      	bne.n	800047a <receive_transmit_command+0x27e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B3, 6);
 8000458:	2206      	movs	r2, #6
 800045a:	493c      	ldr	r1, [pc, #240]	; (800054c <receive_transmit_command+0x350>)
 800045c:	4823      	ldr	r0, [pc, #140]	; (80004ec <receive_transmit_command+0x2f0>)
 800045e:	f002 fa00 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000462:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000466:	f001 f841 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 800046a:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <receive_transmit_command+0x2e0>)
 800046c:	2200      	movs	r2, #0
 800046e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000470:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <receive_transmit_command+0x2e0>)
 8000472:	2200      	movs	r2, #0
 8000474:	705a      	strb	r2, [r3, #1]
}
 8000476:	f000 bd05 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "B4") == 0){       //B4
 800047a:	4935      	ldr	r1, [pc, #212]	; (8000550 <receive_transmit_command+0x354>)
 800047c:	4817      	ldr	r0, [pc, #92]	; (80004dc <receive_transmit_command+0x2e0>)
 800047e:	f7ff fe65 	bl	800014c <strcmp>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d110      	bne.n	80004aa <receive_transmit_command+0x2ae>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B4, 6);
 8000488:	2206      	movs	r2, #6
 800048a:	4932      	ldr	r1, [pc, #200]	; (8000554 <receive_transmit_command+0x358>)
 800048c:	4817      	ldr	r0, [pc, #92]	; (80004ec <receive_transmit_command+0x2f0>)
 800048e:	f002 f9e8 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000492:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000496:	f001 f829 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <receive_transmit_command+0x2e0>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <receive_transmit_command+0x2e0>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	705a      	strb	r2, [r3, #1]
}
 80004a6:	f000 bced 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "B5") == 0){       //B5
 80004aa:	492b      	ldr	r1, [pc, #172]	; (8000558 <receive_transmit_command+0x35c>)
 80004ac:	480b      	ldr	r0, [pc, #44]	; (80004dc <receive_transmit_command+0x2e0>)
 80004ae:	f7ff fe4d 	bl	800014c <strcmp>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d153      	bne.n	8000560 <receive_transmit_command+0x364>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B5, 6);
 80004b8:	2206      	movs	r2, #6
 80004ba:	4928      	ldr	r1, [pc, #160]	; (800055c <receive_transmit_command+0x360>)
 80004bc:	480b      	ldr	r0, [pc, #44]	; (80004ec <receive_transmit_command+0x2f0>)
 80004be:	f002 f9d0 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80004c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004c6:	f001 f811 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80004ca:	4b04      	ldr	r3, [pc, #16]	; (80004dc <receive_transmit_command+0x2e0>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80004d0:	4b02      	ldr	r3, [pc, #8]	; (80004dc <receive_transmit_command+0x2e0>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	705a      	strb	r2, [r3, #1]
}
 80004d6:	f000 bcd5 	b.w	8000e84 <receive_transmit_command+0xc88>
 80004da:	bf00      	nop
 80004dc:	20000420 	.word	0x20000420
 80004e0:	20000308 	.word	0x20000308
 80004e4:	0800346c 	.word	0x0800346c
 80004e8:	20000010 	.word	0x20000010
 80004ec:	2000034c 	.word	0x2000034c
 80004f0:	08003470 	.word	0x08003470
 80004f4:	2000001c 	.word	0x2000001c
 80004f8:	08003474 	.word	0x08003474
 80004fc:	20000028 	.word	0x20000028
 8000500:	08003478 	.word	0x08003478
 8000504:	20000034 	.word	0x20000034
 8000508:	0800347c 	.word	0x0800347c
 800050c:	20000040 	.word	0x20000040
 8000510:	08003480 	.word	0x08003480
 8000514:	2000004c 	.word	0x2000004c
 8000518:	08003484 	.word	0x08003484
 800051c:	20000058 	.word	0x20000058
 8000520:	08003488 	.word	0x08003488
 8000524:	20000064 	.word	0x20000064
 8000528:	0800348c 	.word	0x0800348c
 800052c:	20000070 	.word	0x20000070
 8000530:	08003490 	.word	0x08003490
 8000534:	2000007c 	.word	0x2000007c
 8000538:	08003494 	.word	0x08003494
 800053c:	20000088 	.word	0x20000088
 8000540:	08003498 	.word	0x08003498
 8000544:	20000094 	.word	0x20000094
 8000548:	0800349c 	.word	0x0800349c
 800054c:	200000a0 	.word	0x200000a0
 8000550:	080034a0 	.word	0x080034a0
 8000554:	200000ac 	.word	0x200000ac
 8000558:	080034a4 	.word	0x080034a4
 800055c:	200000b8 	.word	0x200000b8
	 else if (strcmp(receivedData4G, "B6") == 0){       //B6
 8000560:	49af      	ldr	r1, [pc, #700]	; (8000820 <receive_transmit_command+0x624>)
 8000562:	48b0      	ldr	r0, [pc, #704]	; (8000824 <receive_transmit_command+0x628>)
 8000564:	f7ff fdf2 	bl	800014c <strcmp>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d110      	bne.n	8000590 <receive_transmit_command+0x394>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B6, 6);
 800056e:	2206      	movs	r2, #6
 8000570:	49ad      	ldr	r1, [pc, #692]	; (8000828 <receive_transmit_command+0x62c>)
 8000572:	48ae      	ldr	r0, [pc, #696]	; (800082c <receive_transmit_command+0x630>)
 8000574:	f002 f975 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000578:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800057c:	f000 ffb6 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000580:	4ba8      	ldr	r3, [pc, #672]	; (8000824 <receive_transmit_command+0x628>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000586:	4ba7      	ldr	r3, [pc, #668]	; (8000824 <receive_transmit_command+0x628>)
 8000588:	2200      	movs	r2, #0
 800058a:	705a      	strb	r2, [r3, #1]
}
 800058c:	f000 bc7a 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "B7") == 0){       //B7
 8000590:	49a7      	ldr	r1, [pc, #668]	; (8000830 <receive_transmit_command+0x634>)
 8000592:	48a4      	ldr	r0, [pc, #656]	; (8000824 <receive_transmit_command+0x628>)
 8000594:	f7ff fdda 	bl	800014c <strcmp>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d110      	bne.n	80005c0 <receive_transmit_command+0x3c4>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B7, 6);
 800059e:	2206      	movs	r2, #6
 80005a0:	49a4      	ldr	r1, [pc, #656]	; (8000834 <receive_transmit_command+0x638>)
 80005a2:	48a2      	ldr	r0, [pc, #648]	; (800082c <receive_transmit_command+0x630>)
 80005a4:	f002 f95d 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80005a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005ac:	f000 ff9e 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80005b0:	4b9c      	ldr	r3, [pc, #624]	; (8000824 <receive_transmit_command+0x628>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80005b6:	4b9b      	ldr	r3, [pc, #620]	; (8000824 <receive_transmit_command+0x628>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	705a      	strb	r2, [r3, #1]
}
 80005bc:	f000 bc62 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "B8") == 0){       //B8
 80005c0:	499d      	ldr	r1, [pc, #628]	; (8000838 <receive_transmit_command+0x63c>)
 80005c2:	4898      	ldr	r0, [pc, #608]	; (8000824 <receive_transmit_command+0x628>)
 80005c4:	f7ff fdc2 	bl	800014c <strcmp>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d110      	bne.n	80005f0 <receive_transmit_command+0x3f4>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B8, 6);
 80005ce:	2206      	movs	r2, #6
 80005d0:	499a      	ldr	r1, [pc, #616]	; (800083c <receive_transmit_command+0x640>)
 80005d2:	4896      	ldr	r0, [pc, #600]	; (800082c <receive_transmit_command+0x630>)
 80005d4:	f002 f945 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80005d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005dc:	f000 ff86 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80005e0:	4b90      	ldr	r3, [pc, #576]	; (8000824 <receive_transmit_command+0x628>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80005e6:	4b8f      	ldr	r3, [pc, #572]	; (8000824 <receive_transmit_command+0x628>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	705a      	strb	r2, [r3, #1]
}
 80005ec:	f000 bc4a 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "B9") == 0){       //B9
 80005f0:	4993      	ldr	r1, [pc, #588]	; (8000840 <receive_transmit_command+0x644>)
 80005f2:	488c      	ldr	r0, [pc, #560]	; (8000824 <receive_transmit_command+0x628>)
 80005f4:	f7ff fdaa 	bl	800014c <strcmp>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d110      	bne.n	8000620 <receive_transmit_command+0x424>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B9, 6);
 80005fe:	2206      	movs	r2, #6
 8000600:	4990      	ldr	r1, [pc, #576]	; (8000844 <receive_transmit_command+0x648>)
 8000602:	488a      	ldr	r0, [pc, #552]	; (800082c <receive_transmit_command+0x630>)
 8000604:	f002 f92d 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000608:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800060c:	f000 ff6e 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000610:	4b84      	ldr	r3, [pc, #528]	; (8000824 <receive_transmit_command+0x628>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000616:	4b83      	ldr	r3, [pc, #524]	; (8000824 <receive_transmit_command+0x628>)
 8000618:	2200      	movs	r2, #0
 800061a:	705a      	strb	r2, [r3, #1]
}
 800061c:	f000 bc32 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "BB") == 0){       //B10
 8000620:	4989      	ldr	r1, [pc, #548]	; (8000848 <receive_transmit_command+0x64c>)
 8000622:	4880      	ldr	r0, [pc, #512]	; (8000824 <receive_transmit_command+0x628>)
 8000624:	f7ff fd92 	bl	800014c <strcmp>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d110      	bne.n	8000650 <receive_transmit_command+0x454>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B10, 6);
 800062e:	2206      	movs	r2, #6
 8000630:	4986      	ldr	r1, [pc, #536]	; (800084c <receive_transmit_command+0x650>)
 8000632:	487e      	ldr	r0, [pc, #504]	; (800082c <receive_transmit_command+0x630>)
 8000634:	f002 f915 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000638:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800063c:	f000 ff56 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000640:	4b78      	ldr	r3, [pc, #480]	; (8000824 <receive_transmit_command+0x628>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000646:	4b77      	ldr	r3, [pc, #476]	; (8000824 <receive_transmit_command+0x628>)
 8000648:	2200      	movs	r2, #0
 800064a:	705a      	strb	r2, [r3, #1]
}
 800064c:	f000 bc1a 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "C1") == 0){       //C1
 8000650:	497f      	ldr	r1, [pc, #508]	; (8000850 <receive_transmit_command+0x654>)
 8000652:	4874      	ldr	r0, [pc, #464]	; (8000824 <receive_transmit_command+0x628>)
 8000654:	f7ff fd7a 	bl	800014c <strcmp>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d110      	bne.n	8000680 <receive_transmit_command+0x484>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C1, 6);
 800065e:	2206      	movs	r2, #6
 8000660:	497c      	ldr	r1, [pc, #496]	; (8000854 <receive_transmit_command+0x658>)
 8000662:	4872      	ldr	r0, [pc, #456]	; (800082c <receive_transmit_command+0x630>)
 8000664:	f002 f8fd 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000668:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800066c:	f000 ff3e 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000670:	4b6c      	ldr	r3, [pc, #432]	; (8000824 <receive_transmit_command+0x628>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000676:	4b6b      	ldr	r3, [pc, #428]	; (8000824 <receive_transmit_command+0x628>)
 8000678:	2200      	movs	r2, #0
 800067a:	705a      	strb	r2, [r3, #1]
}
 800067c:	f000 bc02 	b.w	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "C2") == 0){       //C2
 8000680:	4975      	ldr	r1, [pc, #468]	; (8000858 <receive_transmit_command+0x65c>)
 8000682:	4868      	ldr	r0, [pc, #416]	; (8000824 <receive_transmit_command+0x628>)
 8000684:	f7ff fd62 	bl	800014c <strcmp>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d10f      	bne.n	80006ae <receive_transmit_command+0x4b2>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C2, 6);
 800068e:	2206      	movs	r2, #6
 8000690:	4972      	ldr	r1, [pc, #456]	; (800085c <receive_transmit_command+0x660>)
 8000692:	4866      	ldr	r0, [pc, #408]	; (800082c <receive_transmit_command+0x630>)
 8000694:	f002 f8e5 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000698:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800069c:	f000 ff26 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80006a0:	4b60      	ldr	r3, [pc, #384]	; (8000824 <receive_transmit_command+0x628>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80006a6:	4b5f      	ldr	r3, [pc, #380]	; (8000824 <receive_transmit_command+0x628>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	705a      	strb	r2, [r3, #1]
}
 80006ac:	e3ea      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "C3") == 0){       //C3
 80006ae:	496c      	ldr	r1, [pc, #432]	; (8000860 <receive_transmit_command+0x664>)
 80006b0:	485c      	ldr	r0, [pc, #368]	; (8000824 <receive_transmit_command+0x628>)
 80006b2:	f7ff fd4b 	bl	800014c <strcmp>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d10f      	bne.n	80006dc <receive_transmit_command+0x4e0>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C3, 6);
 80006bc:	2206      	movs	r2, #6
 80006be:	4969      	ldr	r1, [pc, #420]	; (8000864 <receive_transmit_command+0x668>)
 80006c0:	485a      	ldr	r0, [pc, #360]	; (800082c <receive_transmit_command+0x630>)
 80006c2:	f002 f8ce 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80006c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ca:	f000 ff0f 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80006ce:	4b55      	ldr	r3, [pc, #340]	; (8000824 <receive_transmit_command+0x628>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80006d4:	4b53      	ldr	r3, [pc, #332]	; (8000824 <receive_transmit_command+0x628>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	705a      	strb	r2, [r3, #1]
}
 80006da:	e3d3      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "C4") == 0){       //C4
 80006dc:	4962      	ldr	r1, [pc, #392]	; (8000868 <receive_transmit_command+0x66c>)
 80006de:	4851      	ldr	r0, [pc, #324]	; (8000824 <receive_transmit_command+0x628>)
 80006e0:	f7ff fd34 	bl	800014c <strcmp>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10f      	bne.n	800070a <receive_transmit_command+0x50e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C4, 6);
 80006ea:	2206      	movs	r2, #6
 80006ec:	495f      	ldr	r1, [pc, #380]	; (800086c <receive_transmit_command+0x670>)
 80006ee:	484f      	ldr	r0, [pc, #316]	; (800082c <receive_transmit_command+0x630>)
 80006f0:	f002 f8b7 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80006f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006f8:	f000 fef8 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80006fc:	4b49      	ldr	r3, [pc, #292]	; (8000824 <receive_transmit_command+0x628>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000702:	4b48      	ldr	r3, [pc, #288]	; (8000824 <receive_transmit_command+0x628>)
 8000704:	2200      	movs	r2, #0
 8000706:	705a      	strb	r2, [r3, #1]
}
 8000708:	e3bc      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "C5") == 0){       //C5
 800070a:	4959      	ldr	r1, [pc, #356]	; (8000870 <receive_transmit_command+0x674>)
 800070c:	4845      	ldr	r0, [pc, #276]	; (8000824 <receive_transmit_command+0x628>)
 800070e:	f7ff fd1d 	bl	800014c <strcmp>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d10f      	bne.n	8000738 <receive_transmit_command+0x53c>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C5, 6);
 8000718:	2206      	movs	r2, #6
 800071a:	4956      	ldr	r1, [pc, #344]	; (8000874 <receive_transmit_command+0x678>)
 800071c:	4843      	ldr	r0, [pc, #268]	; (800082c <receive_transmit_command+0x630>)
 800071e:	f002 f8a0 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000722:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000726:	f000 fee1 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 800072a:	4b3e      	ldr	r3, [pc, #248]	; (8000824 <receive_transmit_command+0x628>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000730:	4b3c      	ldr	r3, [pc, #240]	; (8000824 <receive_transmit_command+0x628>)
 8000732:	2200      	movs	r2, #0
 8000734:	705a      	strb	r2, [r3, #1]
}
 8000736:	e3a5      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "C6") == 0){       //C6
 8000738:	494f      	ldr	r1, [pc, #316]	; (8000878 <receive_transmit_command+0x67c>)
 800073a:	483a      	ldr	r0, [pc, #232]	; (8000824 <receive_transmit_command+0x628>)
 800073c:	f7ff fd06 	bl	800014c <strcmp>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10f      	bne.n	8000766 <receive_transmit_command+0x56a>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C6, 6);
 8000746:	2206      	movs	r2, #6
 8000748:	494c      	ldr	r1, [pc, #304]	; (800087c <receive_transmit_command+0x680>)
 800074a:	4838      	ldr	r0, [pc, #224]	; (800082c <receive_transmit_command+0x630>)
 800074c:	f002 f889 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000750:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000754:	f000 feca 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000758:	4b32      	ldr	r3, [pc, #200]	; (8000824 <receive_transmit_command+0x628>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800075e:	4b31      	ldr	r3, [pc, #196]	; (8000824 <receive_transmit_command+0x628>)
 8000760:	2200      	movs	r2, #0
 8000762:	705a      	strb	r2, [r3, #1]
}
 8000764:	e38e      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "C7") == 0){       //C7
 8000766:	4946      	ldr	r1, [pc, #280]	; (8000880 <receive_transmit_command+0x684>)
 8000768:	482e      	ldr	r0, [pc, #184]	; (8000824 <receive_transmit_command+0x628>)
 800076a:	f7ff fcef 	bl	800014c <strcmp>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d10f      	bne.n	8000794 <receive_transmit_command+0x598>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C7, 6);
 8000774:	2206      	movs	r2, #6
 8000776:	4943      	ldr	r1, [pc, #268]	; (8000884 <receive_transmit_command+0x688>)
 8000778:	482c      	ldr	r0, [pc, #176]	; (800082c <receive_transmit_command+0x630>)
 800077a:	f002 f872 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 800077e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000782:	f000 feb3 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000786:	4b27      	ldr	r3, [pc, #156]	; (8000824 <receive_transmit_command+0x628>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800078c:	4b25      	ldr	r3, [pc, #148]	; (8000824 <receive_transmit_command+0x628>)
 800078e:	2200      	movs	r2, #0
 8000790:	705a      	strb	r2, [r3, #1]
}
 8000792:	e377      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "C8") == 0){       //C8
 8000794:	493c      	ldr	r1, [pc, #240]	; (8000888 <receive_transmit_command+0x68c>)
 8000796:	4823      	ldr	r0, [pc, #140]	; (8000824 <receive_transmit_command+0x628>)
 8000798:	f7ff fcd8 	bl	800014c <strcmp>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d10f      	bne.n	80007c2 <receive_transmit_command+0x5c6>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C8, 6);
 80007a2:	2206      	movs	r2, #6
 80007a4:	4939      	ldr	r1, [pc, #228]	; (800088c <receive_transmit_command+0x690>)
 80007a6:	4821      	ldr	r0, [pc, #132]	; (800082c <receive_transmit_command+0x630>)
 80007a8:	f002 f85b 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80007ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007b0:	f000 fe9c 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <receive_transmit_command+0x628>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <receive_transmit_command+0x628>)
 80007bc:	2200      	movs	r2, #0
 80007be:	705a      	strb	r2, [r3, #1]
}
 80007c0:	e360      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "C9") == 0){       //C9
 80007c2:	4933      	ldr	r1, [pc, #204]	; (8000890 <receive_transmit_command+0x694>)
 80007c4:	4817      	ldr	r0, [pc, #92]	; (8000824 <receive_transmit_command+0x628>)
 80007c6:	f7ff fcc1 	bl	800014c <strcmp>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d10f      	bne.n	80007f0 <receive_transmit_command+0x5f4>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C9, 6);
 80007d0:	2206      	movs	r2, #6
 80007d2:	4930      	ldr	r1, [pc, #192]	; (8000894 <receive_transmit_command+0x698>)
 80007d4:	4815      	ldr	r0, [pc, #84]	; (800082c <receive_transmit_command+0x630>)
 80007d6:	f002 f844 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80007da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007de:	f000 fe85 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <receive_transmit_command+0x628>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <receive_transmit_command+0x628>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	705a      	strb	r2, [r3, #1]
}
 80007ee:	e349      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "CC") == 0){       //C10
 80007f0:	4929      	ldr	r1, [pc, #164]	; (8000898 <receive_transmit_command+0x69c>)
 80007f2:	480c      	ldr	r0, [pc, #48]	; (8000824 <receive_transmit_command+0x628>)
 80007f4:	f7ff fcaa 	bl	800014c <strcmp>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d150      	bne.n	80008a0 <receive_transmit_command+0x6a4>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C10, 6);
 80007fe:	2206      	movs	r2, #6
 8000800:	4926      	ldr	r1, [pc, #152]	; (800089c <receive_transmit_command+0x6a0>)
 8000802:	480a      	ldr	r0, [pc, #40]	; (800082c <receive_transmit_command+0x630>)
 8000804:	f002 f82d 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000808:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800080c:	f000 fe6e 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <receive_transmit_command+0x628>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000816:	4b03      	ldr	r3, [pc, #12]	; (8000824 <receive_transmit_command+0x628>)
 8000818:	2200      	movs	r2, #0
 800081a:	705a      	strb	r2, [r3, #1]
}
 800081c:	e332      	b.n	8000e84 <receive_transmit_command+0xc88>
 800081e:	bf00      	nop
 8000820:	080034a8 	.word	0x080034a8
 8000824:	20000420 	.word	0x20000420
 8000828:	200000c4 	.word	0x200000c4
 800082c:	2000034c 	.word	0x2000034c
 8000830:	080034ac 	.word	0x080034ac
 8000834:	200000d0 	.word	0x200000d0
 8000838:	080034b0 	.word	0x080034b0
 800083c:	200000dc 	.word	0x200000dc
 8000840:	080034b4 	.word	0x080034b4
 8000844:	200000e8 	.word	0x200000e8
 8000848:	080034b8 	.word	0x080034b8
 800084c:	200000f4 	.word	0x200000f4
 8000850:	080034bc 	.word	0x080034bc
 8000854:	20000100 	.word	0x20000100
 8000858:	080034c0 	.word	0x080034c0
 800085c:	2000010c 	.word	0x2000010c
 8000860:	080034c4 	.word	0x080034c4
 8000864:	20000118 	.word	0x20000118
 8000868:	080034c8 	.word	0x080034c8
 800086c:	20000124 	.word	0x20000124
 8000870:	080034cc 	.word	0x080034cc
 8000874:	20000130 	.word	0x20000130
 8000878:	080034d0 	.word	0x080034d0
 800087c:	2000013c 	.word	0x2000013c
 8000880:	080034d4 	.word	0x080034d4
 8000884:	20000148 	.word	0x20000148
 8000888:	080034d8 	.word	0x080034d8
 800088c:	20000154 	.word	0x20000154
 8000890:	080034dc 	.word	0x080034dc
 8000894:	20000160 	.word	0x20000160
 8000898:	080034e0 	.word	0x080034e0
 800089c:	2000016c 	.word	0x2000016c
	 else if (strcmp(receivedData4G, "D1") == 0){       //D1
 80008a0:	49ac      	ldr	r1, [pc, #688]	; (8000b54 <receive_transmit_command+0x958>)
 80008a2:	48ad      	ldr	r0, [pc, #692]	; (8000b58 <receive_transmit_command+0x95c>)
 80008a4:	f7ff fc52 	bl	800014c <strcmp>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d10f      	bne.n	80008ce <receive_transmit_command+0x6d2>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D1, 6);
 80008ae:	2206      	movs	r2, #6
 80008b0:	49aa      	ldr	r1, [pc, #680]	; (8000b5c <receive_transmit_command+0x960>)
 80008b2:	48ab      	ldr	r0, [pc, #684]	; (8000b60 <receive_transmit_command+0x964>)
 80008b4:	f001 ffd5 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80008b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008bc:	f000 fe16 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80008c0:	4ba5      	ldr	r3, [pc, #660]	; (8000b58 <receive_transmit_command+0x95c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80008c6:	4ba4      	ldr	r3, [pc, #656]	; (8000b58 <receive_transmit_command+0x95c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	705a      	strb	r2, [r3, #1]
}
 80008cc:	e2da      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "D2") == 0){       //D2
 80008ce:	49a5      	ldr	r1, [pc, #660]	; (8000b64 <receive_transmit_command+0x968>)
 80008d0:	48a1      	ldr	r0, [pc, #644]	; (8000b58 <receive_transmit_command+0x95c>)
 80008d2:	f7ff fc3b 	bl	800014c <strcmp>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10f      	bne.n	80008fc <receive_transmit_command+0x700>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D2, 6);
 80008dc:	2206      	movs	r2, #6
 80008de:	49a2      	ldr	r1, [pc, #648]	; (8000b68 <receive_transmit_command+0x96c>)
 80008e0:	489f      	ldr	r0, [pc, #636]	; (8000b60 <receive_transmit_command+0x964>)
 80008e2:	f001 ffbe 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80008e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008ea:	f000 fdff 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80008ee:	4b9a      	ldr	r3, [pc, #616]	; (8000b58 <receive_transmit_command+0x95c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80008f4:	4b98      	ldr	r3, [pc, #608]	; (8000b58 <receive_transmit_command+0x95c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	705a      	strb	r2, [r3, #1]
}
 80008fa:	e2c3      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "D3") == 0){       //D3
 80008fc:	499b      	ldr	r1, [pc, #620]	; (8000b6c <receive_transmit_command+0x970>)
 80008fe:	4896      	ldr	r0, [pc, #600]	; (8000b58 <receive_transmit_command+0x95c>)
 8000900:	f7ff fc24 	bl	800014c <strcmp>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10f      	bne.n	800092a <receive_transmit_command+0x72e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D3, 6);
 800090a:	2206      	movs	r2, #6
 800090c:	4998      	ldr	r1, [pc, #608]	; (8000b70 <receive_transmit_command+0x974>)
 800090e:	4894      	ldr	r0, [pc, #592]	; (8000b60 <receive_transmit_command+0x964>)
 8000910:	f001 ffa7 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000914:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000918:	f000 fde8 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 800091c:	4b8e      	ldr	r3, [pc, #568]	; (8000b58 <receive_transmit_command+0x95c>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000922:	4b8d      	ldr	r3, [pc, #564]	; (8000b58 <receive_transmit_command+0x95c>)
 8000924:	2200      	movs	r2, #0
 8000926:	705a      	strb	r2, [r3, #1]
}
 8000928:	e2ac      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "D4") == 0){       //D4
 800092a:	4992      	ldr	r1, [pc, #584]	; (8000b74 <receive_transmit_command+0x978>)
 800092c:	488a      	ldr	r0, [pc, #552]	; (8000b58 <receive_transmit_command+0x95c>)
 800092e:	f7ff fc0d 	bl	800014c <strcmp>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d10f      	bne.n	8000958 <receive_transmit_command+0x75c>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D4, 6);
 8000938:	2206      	movs	r2, #6
 800093a:	498f      	ldr	r1, [pc, #572]	; (8000b78 <receive_transmit_command+0x97c>)
 800093c:	4888      	ldr	r0, [pc, #544]	; (8000b60 <receive_transmit_command+0x964>)
 800093e:	f001 ff90 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000942:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000946:	f000 fdd1 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 800094a:	4b83      	ldr	r3, [pc, #524]	; (8000b58 <receive_transmit_command+0x95c>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000950:	4b81      	ldr	r3, [pc, #516]	; (8000b58 <receive_transmit_command+0x95c>)
 8000952:	2200      	movs	r2, #0
 8000954:	705a      	strb	r2, [r3, #1]
}
 8000956:	e295      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "D5") == 0){       //D5
 8000958:	4988      	ldr	r1, [pc, #544]	; (8000b7c <receive_transmit_command+0x980>)
 800095a:	487f      	ldr	r0, [pc, #508]	; (8000b58 <receive_transmit_command+0x95c>)
 800095c:	f7ff fbf6 	bl	800014c <strcmp>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d10f      	bne.n	8000986 <receive_transmit_command+0x78a>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D5, 6);
 8000966:	2206      	movs	r2, #6
 8000968:	4985      	ldr	r1, [pc, #532]	; (8000b80 <receive_transmit_command+0x984>)
 800096a:	487d      	ldr	r0, [pc, #500]	; (8000b60 <receive_transmit_command+0x964>)
 800096c:	f001 ff79 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000970:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000974:	f000 fdba 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000978:	4b77      	ldr	r3, [pc, #476]	; (8000b58 <receive_transmit_command+0x95c>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800097e:	4b76      	ldr	r3, [pc, #472]	; (8000b58 <receive_transmit_command+0x95c>)
 8000980:	2200      	movs	r2, #0
 8000982:	705a      	strb	r2, [r3, #1]
}
 8000984:	e27e      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "D6") == 0){       //D6
 8000986:	497f      	ldr	r1, [pc, #508]	; (8000b84 <receive_transmit_command+0x988>)
 8000988:	4873      	ldr	r0, [pc, #460]	; (8000b58 <receive_transmit_command+0x95c>)
 800098a:	f7ff fbdf 	bl	800014c <strcmp>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d10f      	bne.n	80009b4 <receive_transmit_command+0x7b8>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D6, 6);
 8000994:	2206      	movs	r2, #6
 8000996:	497c      	ldr	r1, [pc, #496]	; (8000b88 <receive_transmit_command+0x98c>)
 8000998:	4871      	ldr	r0, [pc, #452]	; (8000b60 <receive_transmit_command+0x964>)
 800099a:	f001 ff62 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 800099e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009a2:	f000 fda3 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80009a6:	4b6c      	ldr	r3, [pc, #432]	; (8000b58 <receive_transmit_command+0x95c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80009ac:	4b6a      	ldr	r3, [pc, #424]	; (8000b58 <receive_transmit_command+0x95c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	705a      	strb	r2, [r3, #1]
}
 80009b2:	e267      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "D7") == 0){       //D7
 80009b4:	4975      	ldr	r1, [pc, #468]	; (8000b8c <receive_transmit_command+0x990>)
 80009b6:	4868      	ldr	r0, [pc, #416]	; (8000b58 <receive_transmit_command+0x95c>)
 80009b8:	f7ff fbc8 	bl	800014c <strcmp>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10f      	bne.n	80009e2 <receive_transmit_command+0x7e6>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D7, 6);
 80009c2:	2206      	movs	r2, #6
 80009c4:	4972      	ldr	r1, [pc, #456]	; (8000b90 <receive_transmit_command+0x994>)
 80009c6:	4866      	ldr	r0, [pc, #408]	; (8000b60 <receive_transmit_command+0x964>)
 80009c8:	f001 ff4b 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80009cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009d0:	f000 fd8c 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 80009d4:	4b60      	ldr	r3, [pc, #384]	; (8000b58 <receive_transmit_command+0x95c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80009da:	4b5f      	ldr	r3, [pc, #380]	; (8000b58 <receive_transmit_command+0x95c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	705a      	strb	r2, [r3, #1]
}
 80009e0:	e250      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "D8") == 0){       //D8
 80009e2:	496c      	ldr	r1, [pc, #432]	; (8000b94 <receive_transmit_command+0x998>)
 80009e4:	485c      	ldr	r0, [pc, #368]	; (8000b58 <receive_transmit_command+0x95c>)
 80009e6:	f7ff fbb1 	bl	800014c <strcmp>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d10f      	bne.n	8000a10 <receive_transmit_command+0x814>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D8, 6);
 80009f0:	2206      	movs	r2, #6
 80009f2:	4969      	ldr	r1, [pc, #420]	; (8000b98 <receive_transmit_command+0x99c>)
 80009f4:	485a      	ldr	r0, [pc, #360]	; (8000b60 <receive_transmit_command+0x964>)
 80009f6:	f001 ff34 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80009fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009fe:	f000 fd75 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000a02:	4b55      	ldr	r3, [pc, #340]	; (8000b58 <receive_transmit_command+0x95c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000a08:	4b53      	ldr	r3, [pc, #332]	; (8000b58 <receive_transmit_command+0x95c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	705a      	strb	r2, [r3, #1]
}
 8000a0e:	e239      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "D9") == 0){       //D9
 8000a10:	4962      	ldr	r1, [pc, #392]	; (8000b9c <receive_transmit_command+0x9a0>)
 8000a12:	4851      	ldr	r0, [pc, #324]	; (8000b58 <receive_transmit_command+0x95c>)
 8000a14:	f7ff fb9a 	bl	800014c <strcmp>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d10f      	bne.n	8000a3e <receive_transmit_command+0x842>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D9, 6);
 8000a1e:	2206      	movs	r2, #6
 8000a20:	495f      	ldr	r1, [pc, #380]	; (8000ba0 <receive_transmit_command+0x9a4>)
 8000a22:	484f      	ldr	r0, [pc, #316]	; (8000b60 <receive_transmit_command+0x964>)
 8000a24:	f001 ff1d 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000a28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a2c:	f000 fd5e 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000a30:	4b49      	ldr	r3, [pc, #292]	; (8000b58 <receive_transmit_command+0x95c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000a36:	4b48      	ldr	r3, [pc, #288]	; (8000b58 <receive_transmit_command+0x95c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	705a      	strb	r2, [r3, #1]
}
 8000a3c:	e222      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "DD") == 0){       //D10
 8000a3e:	4959      	ldr	r1, [pc, #356]	; (8000ba4 <receive_transmit_command+0x9a8>)
 8000a40:	4845      	ldr	r0, [pc, #276]	; (8000b58 <receive_transmit_command+0x95c>)
 8000a42:	f7ff fb83 	bl	800014c <strcmp>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10f      	bne.n	8000a6c <receive_transmit_command+0x870>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D10, 6);
 8000a4c:	2206      	movs	r2, #6
 8000a4e:	4956      	ldr	r1, [pc, #344]	; (8000ba8 <receive_transmit_command+0x9ac>)
 8000a50:	4843      	ldr	r0, [pc, #268]	; (8000b60 <receive_transmit_command+0x964>)
 8000a52:	f001 ff06 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000a56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a5a:	f000 fd47 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000a5e:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <receive_transmit_command+0x95c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000a64:	4b3c      	ldr	r3, [pc, #240]	; (8000b58 <receive_transmit_command+0x95c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	705a      	strb	r2, [r3, #1]
}
 8000a6a:	e20b      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "E1") == 0){       //E1
 8000a6c:	494f      	ldr	r1, [pc, #316]	; (8000bac <receive_transmit_command+0x9b0>)
 8000a6e:	483a      	ldr	r0, [pc, #232]	; (8000b58 <receive_transmit_command+0x95c>)
 8000a70:	f7ff fb6c 	bl	800014c <strcmp>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10f      	bne.n	8000a9a <receive_transmit_command+0x89e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E1, 6);
 8000a7a:	2206      	movs	r2, #6
 8000a7c:	494c      	ldr	r1, [pc, #304]	; (8000bb0 <receive_transmit_command+0x9b4>)
 8000a7e:	4838      	ldr	r0, [pc, #224]	; (8000b60 <receive_transmit_command+0x964>)
 8000a80:	f001 feef 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000a84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a88:	f000 fd30 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000a8c:	4b32      	ldr	r3, [pc, #200]	; (8000b58 <receive_transmit_command+0x95c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000a92:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <receive_transmit_command+0x95c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	705a      	strb	r2, [r3, #1]
}
 8000a98:	e1f4      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "E2") == 0){       //E2
 8000a9a:	4946      	ldr	r1, [pc, #280]	; (8000bb4 <receive_transmit_command+0x9b8>)
 8000a9c:	482e      	ldr	r0, [pc, #184]	; (8000b58 <receive_transmit_command+0x95c>)
 8000a9e:	f7ff fb55 	bl	800014c <strcmp>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10f      	bne.n	8000ac8 <receive_transmit_command+0x8cc>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E2, 6);
 8000aa8:	2206      	movs	r2, #6
 8000aaa:	4943      	ldr	r1, [pc, #268]	; (8000bb8 <receive_transmit_command+0x9bc>)
 8000aac:	482c      	ldr	r0, [pc, #176]	; (8000b60 <receive_transmit_command+0x964>)
 8000aae:	f001 fed8 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000ab2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ab6:	f000 fd19 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <receive_transmit_command+0x95c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <receive_transmit_command+0x95c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	705a      	strb	r2, [r3, #1]
}
 8000ac6:	e1dd      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "E3") == 0){       //E3
 8000ac8:	493c      	ldr	r1, [pc, #240]	; (8000bbc <receive_transmit_command+0x9c0>)
 8000aca:	4823      	ldr	r0, [pc, #140]	; (8000b58 <receive_transmit_command+0x95c>)
 8000acc:	f7ff fb3e 	bl	800014c <strcmp>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10f      	bne.n	8000af6 <receive_transmit_command+0x8fa>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E3, 6);
 8000ad6:	2206      	movs	r2, #6
 8000ad8:	4939      	ldr	r1, [pc, #228]	; (8000bc0 <receive_transmit_command+0x9c4>)
 8000ada:	4821      	ldr	r0, [pc, #132]	; (8000b60 <receive_transmit_command+0x964>)
 8000adc:	f001 fec1 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000ae0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ae4:	f000 fd02 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <receive_transmit_command+0x95c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <receive_transmit_command+0x95c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	705a      	strb	r2, [r3, #1]
}
 8000af4:	e1c6      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "E4") == 0){       //E4
 8000af6:	4933      	ldr	r1, [pc, #204]	; (8000bc4 <receive_transmit_command+0x9c8>)
 8000af8:	4817      	ldr	r0, [pc, #92]	; (8000b58 <receive_transmit_command+0x95c>)
 8000afa:	f7ff fb27 	bl	800014c <strcmp>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d10f      	bne.n	8000b24 <receive_transmit_command+0x928>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E4, 6);
 8000b04:	2206      	movs	r2, #6
 8000b06:	4930      	ldr	r1, [pc, #192]	; (8000bc8 <receive_transmit_command+0x9cc>)
 8000b08:	4815      	ldr	r0, [pc, #84]	; (8000b60 <receive_transmit_command+0x964>)
 8000b0a:	f001 feaa 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000b0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b12:	f000 fceb 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <receive_transmit_command+0x95c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <receive_transmit_command+0x95c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	705a      	strb	r2, [r3, #1]
}
 8000b22:	e1af      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "E5") == 0){       //E5
 8000b24:	4929      	ldr	r1, [pc, #164]	; (8000bcc <receive_transmit_command+0x9d0>)
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <receive_transmit_command+0x95c>)
 8000b28:	f7ff fb10 	bl	800014c <strcmp>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d150      	bne.n	8000bd4 <receive_transmit_command+0x9d8>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E5, 6);
 8000b32:	2206      	movs	r2, #6
 8000b34:	4926      	ldr	r1, [pc, #152]	; (8000bd0 <receive_transmit_command+0x9d4>)
 8000b36:	480a      	ldr	r0, [pc, #40]	; (8000b60 <receive_transmit_command+0x964>)
 8000b38:	f001 fe93 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000b3c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b40:	f000 fcd4 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <receive_transmit_command+0x95c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000b4a:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <receive_transmit_command+0x95c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	705a      	strb	r2, [r3, #1]
}
 8000b50:	e198      	b.n	8000e84 <receive_transmit_command+0xc88>
 8000b52:	bf00      	nop
 8000b54:	080034e4 	.word	0x080034e4
 8000b58:	20000420 	.word	0x20000420
 8000b5c:	20000178 	.word	0x20000178
 8000b60:	2000034c 	.word	0x2000034c
 8000b64:	080034e8 	.word	0x080034e8
 8000b68:	20000184 	.word	0x20000184
 8000b6c:	080034ec 	.word	0x080034ec
 8000b70:	20000190 	.word	0x20000190
 8000b74:	080034f0 	.word	0x080034f0
 8000b78:	2000019c 	.word	0x2000019c
 8000b7c:	080034f4 	.word	0x080034f4
 8000b80:	200001a8 	.word	0x200001a8
 8000b84:	080034f8 	.word	0x080034f8
 8000b88:	200001b4 	.word	0x200001b4
 8000b8c:	080034fc 	.word	0x080034fc
 8000b90:	200001c0 	.word	0x200001c0
 8000b94:	08003500 	.word	0x08003500
 8000b98:	200001cc 	.word	0x200001cc
 8000b9c:	08003504 	.word	0x08003504
 8000ba0:	200001d8 	.word	0x200001d8
 8000ba4:	08003508 	.word	0x08003508
 8000ba8:	200001e4 	.word	0x200001e4
 8000bac:	0800350c 	.word	0x0800350c
 8000bb0:	200001f0 	.word	0x200001f0
 8000bb4:	08003510 	.word	0x08003510
 8000bb8:	200001fc 	.word	0x200001fc
 8000bbc:	08003514 	.word	0x08003514
 8000bc0:	20000208 	.word	0x20000208
 8000bc4:	08003518 	.word	0x08003518
 8000bc8:	20000214 	.word	0x20000214
 8000bcc:	0800351c 	.word	0x0800351c
 8000bd0:	20000220 	.word	0x20000220
	 else if (strcmp(receivedData4G, "E6") == 0){       //E6
 8000bd4:	49ac      	ldr	r1, [pc, #688]	; (8000e88 <receive_transmit_command+0xc8c>)
 8000bd6:	48ad      	ldr	r0, [pc, #692]	; (8000e8c <receive_transmit_command+0xc90>)
 8000bd8:	f7ff fab8 	bl	800014c <strcmp>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10f      	bne.n	8000c02 <receive_transmit_command+0xa06>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E6, 6);
 8000be2:	2206      	movs	r2, #6
 8000be4:	49aa      	ldr	r1, [pc, #680]	; (8000e90 <receive_transmit_command+0xc94>)
 8000be6:	48ab      	ldr	r0, [pc, #684]	; (8000e94 <receive_transmit_command+0xc98>)
 8000be8:	f001 fe3b 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000bec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bf0:	f000 fc7c 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000bf4:	4ba5      	ldr	r3, [pc, #660]	; (8000e8c <receive_transmit_command+0xc90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000bfa:	4ba4      	ldr	r3, [pc, #656]	; (8000e8c <receive_transmit_command+0xc90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	705a      	strb	r2, [r3, #1]
}
 8000c00:	e140      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "E7") == 0){       //E7
 8000c02:	49a5      	ldr	r1, [pc, #660]	; (8000e98 <receive_transmit_command+0xc9c>)
 8000c04:	48a1      	ldr	r0, [pc, #644]	; (8000e8c <receive_transmit_command+0xc90>)
 8000c06:	f7ff faa1 	bl	800014c <strcmp>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d10f      	bne.n	8000c30 <receive_transmit_command+0xa34>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E7, 6);
 8000c10:	2206      	movs	r2, #6
 8000c12:	49a2      	ldr	r1, [pc, #648]	; (8000e9c <receive_transmit_command+0xca0>)
 8000c14:	489f      	ldr	r0, [pc, #636]	; (8000e94 <receive_transmit_command+0xc98>)
 8000c16:	f001 fe24 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000c1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c1e:	f000 fc65 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000c22:	4b9a      	ldr	r3, [pc, #616]	; (8000e8c <receive_transmit_command+0xc90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <receive_transmit_command+0xc90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	705a      	strb	r2, [r3, #1]
}
 8000c2e:	e129      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "E8") == 0){       //E8
 8000c30:	499b      	ldr	r1, [pc, #620]	; (8000ea0 <receive_transmit_command+0xca4>)
 8000c32:	4896      	ldr	r0, [pc, #600]	; (8000e8c <receive_transmit_command+0xc90>)
 8000c34:	f7ff fa8a 	bl	800014c <strcmp>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10f      	bne.n	8000c5e <receive_transmit_command+0xa62>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E8, 6);
 8000c3e:	2206      	movs	r2, #6
 8000c40:	4998      	ldr	r1, [pc, #608]	; (8000ea4 <receive_transmit_command+0xca8>)
 8000c42:	4894      	ldr	r0, [pc, #592]	; (8000e94 <receive_transmit_command+0xc98>)
 8000c44:	f001 fe0d 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000c48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c4c:	f000 fc4e 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000c50:	4b8e      	ldr	r3, [pc, #568]	; (8000e8c <receive_transmit_command+0xc90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000c56:	4b8d      	ldr	r3, [pc, #564]	; (8000e8c <receive_transmit_command+0xc90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	705a      	strb	r2, [r3, #1]
}
 8000c5c:	e112      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "E9") == 0){       //E9
 8000c5e:	4992      	ldr	r1, [pc, #584]	; (8000ea8 <receive_transmit_command+0xcac>)
 8000c60:	488a      	ldr	r0, [pc, #552]	; (8000e8c <receive_transmit_command+0xc90>)
 8000c62:	f7ff fa73 	bl	800014c <strcmp>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d10f      	bne.n	8000c8c <receive_transmit_command+0xa90>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E9, 6);
 8000c6c:	2206      	movs	r2, #6
 8000c6e:	498f      	ldr	r1, [pc, #572]	; (8000eac <receive_transmit_command+0xcb0>)
 8000c70:	4888      	ldr	r0, [pc, #544]	; (8000e94 <receive_transmit_command+0xc98>)
 8000c72:	f001 fdf6 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000c76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c7a:	f000 fc37 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000c7e:	4b83      	ldr	r3, [pc, #524]	; (8000e8c <receive_transmit_command+0xc90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000c84:	4b81      	ldr	r3, [pc, #516]	; (8000e8c <receive_transmit_command+0xc90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	705a      	strb	r2, [r3, #1]
}
 8000c8a:	e0fb      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "EE") == 0){       //E10
 8000c8c:	4988      	ldr	r1, [pc, #544]	; (8000eb0 <receive_transmit_command+0xcb4>)
 8000c8e:	487f      	ldr	r0, [pc, #508]	; (8000e8c <receive_transmit_command+0xc90>)
 8000c90:	f7ff fa5c 	bl	800014c <strcmp>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10f      	bne.n	8000cba <receive_transmit_command+0xabe>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E10, 6);
 8000c9a:	2206      	movs	r2, #6
 8000c9c:	4985      	ldr	r1, [pc, #532]	; (8000eb4 <receive_transmit_command+0xcb8>)
 8000c9e:	487d      	ldr	r0, [pc, #500]	; (8000e94 <receive_transmit_command+0xc98>)
 8000ca0:	f001 fddf 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000ca4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ca8:	f000 fc20 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000cac:	4b77      	ldr	r3, [pc, #476]	; (8000e8c <receive_transmit_command+0xc90>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000cb2:	4b76      	ldr	r3, [pc, #472]	; (8000e8c <receive_transmit_command+0xc90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	705a      	strb	r2, [r3, #1]
}
 8000cb8:	e0e4      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "F1") == 0){       //F1
 8000cba:	497f      	ldr	r1, [pc, #508]	; (8000eb8 <receive_transmit_command+0xcbc>)
 8000cbc:	4873      	ldr	r0, [pc, #460]	; (8000e8c <receive_transmit_command+0xc90>)
 8000cbe:	f7ff fa45 	bl	800014c <strcmp>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d10f      	bne.n	8000ce8 <receive_transmit_command+0xaec>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F1, 6);
 8000cc8:	2206      	movs	r2, #6
 8000cca:	497c      	ldr	r1, [pc, #496]	; (8000ebc <receive_transmit_command+0xcc0>)
 8000ccc:	4871      	ldr	r0, [pc, #452]	; (8000e94 <receive_transmit_command+0xc98>)
 8000cce:	f001 fdc8 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000cd2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cd6:	f000 fc09 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000cda:	4b6c      	ldr	r3, [pc, #432]	; (8000e8c <receive_transmit_command+0xc90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000ce0:	4b6a      	ldr	r3, [pc, #424]	; (8000e8c <receive_transmit_command+0xc90>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	705a      	strb	r2, [r3, #1]
}
 8000ce6:	e0cd      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "F2") == 0){       //F2
 8000ce8:	4975      	ldr	r1, [pc, #468]	; (8000ec0 <receive_transmit_command+0xcc4>)
 8000cea:	4868      	ldr	r0, [pc, #416]	; (8000e8c <receive_transmit_command+0xc90>)
 8000cec:	f7ff fa2e 	bl	800014c <strcmp>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10f      	bne.n	8000d16 <receive_transmit_command+0xb1a>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F2, 6);
 8000cf6:	2206      	movs	r2, #6
 8000cf8:	4972      	ldr	r1, [pc, #456]	; (8000ec4 <receive_transmit_command+0xcc8>)
 8000cfa:	4866      	ldr	r0, [pc, #408]	; (8000e94 <receive_transmit_command+0xc98>)
 8000cfc:	f001 fdb1 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000d00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d04:	f000 fbf2 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000d08:	4b60      	ldr	r3, [pc, #384]	; (8000e8c <receive_transmit_command+0xc90>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000d0e:	4b5f      	ldr	r3, [pc, #380]	; (8000e8c <receive_transmit_command+0xc90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	705a      	strb	r2, [r3, #1]
}
 8000d14:	e0b6      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "F3") == 0){       //F3
 8000d16:	496c      	ldr	r1, [pc, #432]	; (8000ec8 <receive_transmit_command+0xccc>)
 8000d18:	485c      	ldr	r0, [pc, #368]	; (8000e8c <receive_transmit_command+0xc90>)
 8000d1a:	f7ff fa17 	bl	800014c <strcmp>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10f      	bne.n	8000d44 <receive_transmit_command+0xb48>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F3, 6);
 8000d24:	2206      	movs	r2, #6
 8000d26:	4969      	ldr	r1, [pc, #420]	; (8000ecc <receive_transmit_command+0xcd0>)
 8000d28:	485a      	ldr	r0, [pc, #360]	; (8000e94 <receive_transmit_command+0xc98>)
 8000d2a:	f001 fd9a 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000d2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d32:	f000 fbdb 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000d36:	4b55      	ldr	r3, [pc, #340]	; (8000e8c <receive_transmit_command+0xc90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000d3c:	4b53      	ldr	r3, [pc, #332]	; (8000e8c <receive_transmit_command+0xc90>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	705a      	strb	r2, [r3, #1]
}
 8000d42:	e09f      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "F4") == 0){       //F4
 8000d44:	4962      	ldr	r1, [pc, #392]	; (8000ed0 <receive_transmit_command+0xcd4>)
 8000d46:	4851      	ldr	r0, [pc, #324]	; (8000e8c <receive_transmit_command+0xc90>)
 8000d48:	f7ff fa00 	bl	800014c <strcmp>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10f      	bne.n	8000d72 <receive_transmit_command+0xb76>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F4, 6);
 8000d52:	2206      	movs	r2, #6
 8000d54:	495f      	ldr	r1, [pc, #380]	; (8000ed4 <receive_transmit_command+0xcd8>)
 8000d56:	484f      	ldr	r0, [pc, #316]	; (8000e94 <receive_transmit_command+0xc98>)
 8000d58:	f001 fd83 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000d5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d60:	f000 fbc4 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000d64:	4b49      	ldr	r3, [pc, #292]	; (8000e8c <receive_transmit_command+0xc90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000d6a:	4b48      	ldr	r3, [pc, #288]	; (8000e8c <receive_transmit_command+0xc90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	705a      	strb	r2, [r3, #1]
}
 8000d70:	e088      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "F5") == 0){       //F5
 8000d72:	4959      	ldr	r1, [pc, #356]	; (8000ed8 <receive_transmit_command+0xcdc>)
 8000d74:	4845      	ldr	r0, [pc, #276]	; (8000e8c <receive_transmit_command+0xc90>)
 8000d76:	f7ff f9e9 	bl	800014c <strcmp>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d10f      	bne.n	8000da0 <receive_transmit_command+0xba4>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F5, 6);
 8000d80:	2206      	movs	r2, #6
 8000d82:	4956      	ldr	r1, [pc, #344]	; (8000edc <receive_transmit_command+0xce0>)
 8000d84:	4843      	ldr	r0, [pc, #268]	; (8000e94 <receive_transmit_command+0xc98>)
 8000d86:	f001 fd6c 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000d8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d8e:	f000 fbad 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000d92:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <receive_transmit_command+0xc90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000d98:	4b3c      	ldr	r3, [pc, #240]	; (8000e8c <receive_transmit_command+0xc90>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	705a      	strb	r2, [r3, #1]
}
 8000d9e:	e071      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "F6") == 0){       //F6
 8000da0:	494f      	ldr	r1, [pc, #316]	; (8000ee0 <receive_transmit_command+0xce4>)
 8000da2:	483a      	ldr	r0, [pc, #232]	; (8000e8c <receive_transmit_command+0xc90>)
 8000da4:	f7ff f9d2 	bl	800014c <strcmp>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10f      	bne.n	8000dce <receive_transmit_command+0xbd2>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F6, 6);
 8000dae:	2206      	movs	r2, #6
 8000db0:	494c      	ldr	r1, [pc, #304]	; (8000ee4 <receive_transmit_command+0xce8>)
 8000db2:	4838      	ldr	r0, [pc, #224]	; (8000e94 <receive_transmit_command+0xc98>)
 8000db4:	f001 fd55 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000db8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dbc:	f000 fb96 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000dc0:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <receive_transmit_command+0xc90>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000dc6:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <receive_transmit_command+0xc90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	705a      	strb	r2, [r3, #1]
}
 8000dcc:	e05a      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "F7") == 0){       //F7
 8000dce:	4946      	ldr	r1, [pc, #280]	; (8000ee8 <receive_transmit_command+0xcec>)
 8000dd0:	482e      	ldr	r0, [pc, #184]	; (8000e8c <receive_transmit_command+0xc90>)
 8000dd2:	f7ff f9bb 	bl	800014c <strcmp>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10f      	bne.n	8000dfc <receive_transmit_command+0xc00>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F7, 6);
 8000ddc:	2206      	movs	r2, #6
 8000dde:	4943      	ldr	r1, [pc, #268]	; (8000eec <receive_transmit_command+0xcf0>)
 8000de0:	482c      	ldr	r0, [pc, #176]	; (8000e94 <receive_transmit_command+0xc98>)
 8000de2:	f001 fd3e 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000de6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dea:	f000 fb7f 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000dee:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <receive_transmit_command+0xc90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <receive_transmit_command+0xc90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	705a      	strb	r2, [r3, #1]
}
 8000dfa:	e043      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "F8") == 0){       //F8
 8000dfc:	493c      	ldr	r1, [pc, #240]	; (8000ef0 <receive_transmit_command+0xcf4>)
 8000dfe:	4823      	ldr	r0, [pc, #140]	; (8000e8c <receive_transmit_command+0xc90>)
 8000e00:	f7ff f9a4 	bl	800014c <strcmp>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10f      	bne.n	8000e2a <receive_transmit_command+0xc2e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F8, 6);
 8000e0a:	2206      	movs	r2, #6
 8000e0c:	4939      	ldr	r1, [pc, #228]	; (8000ef4 <receive_transmit_command+0xcf8>)
 8000e0e:	4821      	ldr	r0, [pc, #132]	; (8000e94 <receive_transmit_command+0xc98>)
 8000e10:	f001 fd27 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000e14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e18:	f000 fb68 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <receive_transmit_command+0xc90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <receive_transmit_command+0xc90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	705a      	strb	r2, [r3, #1]
}
 8000e28:	e02c      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "F9") == 0){       //F9
 8000e2a:	4933      	ldr	r1, [pc, #204]	; (8000ef8 <receive_transmit_command+0xcfc>)
 8000e2c:	4817      	ldr	r0, [pc, #92]	; (8000e8c <receive_transmit_command+0xc90>)
 8000e2e:	f7ff f98d 	bl	800014c <strcmp>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d10f      	bne.n	8000e58 <receive_transmit_command+0xc5c>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F9, 6);
 8000e38:	2206      	movs	r2, #6
 8000e3a:	4930      	ldr	r1, [pc, #192]	; (8000efc <receive_transmit_command+0xd00>)
 8000e3c:	4815      	ldr	r0, [pc, #84]	; (8000e94 <receive_transmit_command+0xc98>)
 8000e3e:	f001 fd10 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000e42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e46:	f000 fb51 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <receive_transmit_command+0xc90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <receive_transmit_command+0xc90>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	705a      	strb	r2, [r3, #1]
}
 8000e56:	e015      	b.n	8000e84 <receive_transmit_command+0xc88>
	 else if (strcmp(receivedData4G, "FF") == 0){       //F10
 8000e58:	4929      	ldr	r1, [pc, #164]	; (8000f00 <receive_transmit_command+0xd04>)
 8000e5a:	480c      	ldr	r0, [pc, #48]	; (8000e8c <receive_transmit_command+0xc90>)
 8000e5c:	f7ff f976 	bl	800014c <strcmp>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10e      	bne.n	8000e84 <receive_transmit_command+0xc88>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F10, 6);
 8000e66:	2206      	movs	r2, #6
 8000e68:	4926      	ldr	r1, [pc, #152]	; (8000f04 <receive_transmit_command+0xd08>)
 8000e6a:	480a      	ldr	r0, [pc, #40]	; (8000e94 <receive_transmit_command+0xc98>)
 8000e6c:	f001 fcf9 	bl	8002862 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000e70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e74:	f000 fb3a 	bl	80014ec <HAL_Delay>
	     receivedData4G[0] = 0;
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <receive_transmit_command+0xc90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000e7e:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <receive_transmit_command+0xc90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	705a      	strb	r2, [r3, #1]
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	08003520 	.word	0x08003520
 8000e8c:	20000420 	.word	0x20000420
 8000e90:	2000022c 	.word	0x2000022c
 8000e94:	2000034c 	.word	0x2000034c
 8000e98:	08003524 	.word	0x08003524
 8000e9c:	20000238 	.word	0x20000238
 8000ea0:	08003528 	.word	0x08003528
 8000ea4:	20000244 	.word	0x20000244
 8000ea8:	0800352c 	.word	0x0800352c
 8000eac:	20000250 	.word	0x20000250
 8000eb0:	08003530 	.word	0x08003530
 8000eb4:	2000025c 	.word	0x2000025c
 8000eb8:	08003534 	.word	0x08003534
 8000ebc:	20000268 	.word	0x20000268
 8000ec0:	08003538 	.word	0x08003538
 8000ec4:	20000274 	.word	0x20000274
 8000ec8:	0800353c 	.word	0x0800353c
 8000ecc:	20000280 	.word	0x20000280
 8000ed0:	08003540 	.word	0x08003540
 8000ed4:	2000028c 	.word	0x2000028c
 8000ed8:	08003544 	.word	0x08003544
 8000edc:	20000298 	.word	0x20000298
 8000ee0:	08003548 	.word	0x08003548
 8000ee4:	200002a4 	.word	0x200002a4
 8000ee8:	0800354c 	.word	0x0800354c
 8000eec:	200002b0 	.word	0x200002b0
 8000ef0:	08003550 	.word	0x08003550
 8000ef4:	200002bc 	.word	0x200002bc
 8000ef8:	08003554 	.word	0x08003554
 8000efc:	200002c8 	.word	0x200002c8
 8000f00:	08003558 	.word	0x08003558
 8000f04:	200002d4 	.word	0x200002d4

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0c:	f000 fa8c 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f10:	f000 f80b 	bl	8000f2a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f14:	f000 f8c8 	bl	80010a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f18:	f000 f8a0 	bl	800105c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f1c:	f000 f874 	bl	8001008 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f20:	f000 f848 	bl	8000fb4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
//	  HAL_UART_Receive_DMA(&huart2, Rx_data, 20);
	  receive_transmit_command();
 8000f24:	f7ff f96a 	bl	80001fc <receive_transmit_command>
 8000f28:	e7fc      	b.n	8000f24 <main+0x1c>

08000f2a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b090      	sub	sp, #64	; 0x40
 8000f2e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	2228      	movs	r2, #40	; 0x28
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 fa63 	bl	8003404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f54:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f68:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 f80e 	bl	8001f94 <HAL_RCC_OscConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f7e:	f000 f8b5 	bl	80010ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f82:	230f      	movs	r3, #15
 8000f84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f86:	2302      	movs	r3, #2
 8000f88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f001 fa7b 	bl	8002498 <HAL_RCC_ClockConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fa8:	f000 f8a0 	bl	80010ec <Error_Handler>
  }
}
 8000fac:	bf00      	nop
 8000fae:	3740      	adds	r7, #64	; 0x40
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <MX_USART1_UART_Init+0x50>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fec:	f001 fbec 	bl	80027c8 <HAL_UART_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ff6:	f000 f879 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000308 	.word	0x20000308
 8001004:	40013800 	.word	0x40013800

08001008 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_USART2_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 8001014:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001018:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 800101c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001020:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 8001030:	220c      	movs	r2, #12
 8001032:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 8001042:	f001 fbc1 	bl	80027c8 <HAL_UART_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800104c:	f000 f84e 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000034c 	.word	0x2000034c
 8001058:	40004400 	.word	0x40004400

0800105c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_DMA_Init+0x48>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <MX_DMA_Init+0x48>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6153      	str	r3, [r2, #20]
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <MX_DMA_Init+0x48>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2010      	movs	r0, #16
 8001080:	f000 fb2f 	bl	80016e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001084:	2010      	movs	r0, #16
 8001086:	f000 fb48 	bl	800171a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2011      	movs	r0, #17
 8001090:	f000 fb27 	bl	80016e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001094:	2011      	movs	r0, #17
 8001096:	f000 fb40 	bl	800171a <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_GPIO_Init+0x40>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <MX_GPIO_Init+0x40>)
 80010b4:	f043 0320 	orr.w	r3, r3, #32
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_GPIO_Init+0x40>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_GPIO_Init+0x40>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <MX_GPIO_Init+0x40>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6193      	str	r3, [r2, #24]
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <MX_GPIO_Init+0x40>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40021000 	.word	0x40021000

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <Error_Handler+0x8>
	...

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_MspInit+0x5c>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	4a14      	ldr	r2, [pc, #80]	; (8001154 <HAL_MspInit+0x5c>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6193      	str	r3, [r2, #24]
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_MspInit+0x5c>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_MspInit+0x5c>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <HAL_MspInit+0x5c>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_MspInit+0x5c>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_MspInit+0x60>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <HAL_MspInit+0x60>)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	40021000 	.word	0x40021000
 8001158:	40010000 	.word	0x40010000

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0318 	add.w	r3, r7, #24
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a66      	ldr	r2, [pc, #408]	; (8001310 <HAL_UART_MspInit+0x1b4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d13a      	bne.n	80011f2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800117c:	4b65      	ldr	r3, [pc, #404]	; (8001314 <HAL_UART_MspInit+0x1b8>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a64      	ldr	r2, [pc, #400]	; (8001314 <HAL_UART_MspInit+0x1b8>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b62      	ldr	r3, [pc, #392]	; (8001314 <HAL_UART_MspInit+0x1b8>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b5f      	ldr	r3, [pc, #380]	; (8001314 <HAL_UART_MspInit+0x1b8>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a5e      	ldr	r2, [pc, #376]	; (8001314 <HAL_UART_MspInit+0x1b8>)
 800119a:	f043 0304 	orr.w	r3, r3, #4
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b5c      	ldr	r3, [pc, #368]	; (8001314 <HAL_UART_MspInit+0x1b8>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0318 	add.w	r3, r7, #24
 80011be:	4619      	mov	r1, r3
 80011c0:	4855      	ldr	r0, [pc, #340]	; (8001318 <HAL_UART_MspInit+0x1bc>)
 80011c2:	f000 fd63 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	4619      	mov	r1, r3
 80011da:	484f      	ldr	r0, [pc, #316]	; (8001318 <HAL_UART_MspInit+0x1bc>)
 80011dc:	f000 fd56 	bl	8001c8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2025      	movs	r0, #37	; 0x25
 80011e6:	f000 fa7c 	bl	80016e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ea:	2025      	movs	r0, #37	; 0x25
 80011ec:	f000 fa95 	bl	800171a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011f0:	e089      	b.n	8001306 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a49      	ldr	r2, [pc, #292]	; (800131c <HAL_UART_MspInit+0x1c0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	f040 8084 	bne.w	8001306 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011fe:	4b45      	ldr	r3, [pc, #276]	; (8001314 <HAL_UART_MspInit+0x1b8>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a44      	ldr	r2, [pc, #272]	; (8001314 <HAL_UART_MspInit+0x1b8>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b42      	ldr	r3, [pc, #264]	; (8001314 <HAL_UART_MspInit+0x1b8>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <HAL_UART_MspInit+0x1b8>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a3e      	ldr	r2, [pc, #248]	; (8001314 <HAL_UART_MspInit+0x1b8>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <HAL_UART_MspInit+0x1b8>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800122e:	2304      	movs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 0318 	add.w	r3, r7, #24
 800123e:	4619      	mov	r1, r3
 8001240:	4835      	ldr	r0, [pc, #212]	; (8001318 <HAL_UART_MspInit+0x1bc>)
 8001242:	f000 fd23 	bl	8001c8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001246:	2308      	movs	r3, #8
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	4619      	mov	r1, r3
 8001258:	482f      	ldr	r0, [pc, #188]	; (8001318 <HAL_UART_MspInit+0x1bc>)
 800125a:	f000 fd17 	bl	8001c8c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800125e:	4b30      	ldr	r3, [pc, #192]	; (8001320 <HAL_UART_MspInit+0x1c4>)
 8001260:	4a30      	ldr	r2, [pc, #192]	; (8001324 <HAL_UART_MspInit+0x1c8>)
 8001262:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001264:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <HAL_UART_MspInit+0x1c4>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <HAL_UART_MspInit+0x1c4>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001270:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <HAL_UART_MspInit+0x1c4>)
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <HAL_UART_MspInit+0x1c4>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127c:	4b28      	ldr	r3, [pc, #160]	; (8001320 <HAL_UART_MspInit+0x1c4>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001282:	4b27      	ldr	r3, [pc, #156]	; (8001320 <HAL_UART_MspInit+0x1c4>)
 8001284:	2220      	movs	r2, #32
 8001286:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <HAL_UART_MspInit+0x1c4>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800128e:	4824      	ldr	r0, [pc, #144]	; (8001320 <HAL_UART_MspInit+0x1c4>)
 8001290:	f000 fa5e 	bl	8001750 <HAL_DMA_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_UART_MspInit+0x142>
      Error_Handler();
 800129a:	f7ff ff27 	bl	80010ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <HAL_UART_MspInit+0x1c4>)
 80012a2:	639a      	str	r2, [r3, #56]	; 0x38
 80012a4:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <HAL_UART_MspInit+0x1c4>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80012ac:	4a1f      	ldr	r2, [pc, #124]	; (800132c <HAL_UART_MspInit+0x1d0>)
 80012ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80012b2:	2210      	movs	r2, #16
 80012b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80012d0:	2220      	movs	r2, #32
 80012d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012da:	4813      	ldr	r0, [pc, #76]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80012dc:	f000 fa38 	bl	8001750 <HAL_DMA_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_UART_MspInit+0x18e>
      Error_Handler();
 80012e6:	f7ff ff01 	bl	80010ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <HAL_UART_MspInit+0x1cc>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2026      	movs	r0, #38	; 0x26
 80012fc:	f000 f9f1 	bl	80016e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001300:	2026      	movs	r0, #38	; 0x26
 8001302:	f000 fa0a 	bl	800171a <HAL_NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40013800 	.word	0x40013800
 8001314:	40021000 	.word	0x40021000
 8001318:	40010800 	.word	0x40010800
 800131c:	40004400 	.word	0x40004400
 8001320:	20000390 	.word	0x20000390
 8001324:	4002006c 	.word	0x4002006c
 8001328:	200003d4 	.word	0x200003d4
 800132c:	40020080 	.word	0x40020080

08001330 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <NMI_Handler+0x4>

08001336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <HardFault_Handler+0x4>

0800133c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <MemManage_Handler+0x4>

08001342 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001346:	e7fe      	b.n	8001346 <BusFault_Handler+0x4>

08001348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <UsageFault_Handler+0x4>

0800134e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr

08001366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001376:	f000 f89d 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <DMA1_Channel6_IRQHandler+0x10>)
 8001386:	f000 fb4d 	bl	8001a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000390 	.word	0x20000390

08001394 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <DMA1_Channel7_IRQHandler+0x10>)
 800139a:	f000 fb43 	bl	8001a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200003d4 	.word	0x200003d4

080013a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <USART1_IRQHandler+0x10>)
 80013ae:	f001 fafd 	bl	80029ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000308 	.word	0x20000308

080013bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <USART2_IRQHandler+0x10>)
 80013c2:	f001 faf3 	bl	80029ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	2000034c 	.word	0x2000034c

080013d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013de:	490d      	ldr	r1, [pc, #52]	; (8001414 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f4:	4c0a      	ldr	r4, [pc, #40]	; (8001420 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001402:	f7ff ffe5 	bl	80013d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001406:	f001 ffd9 	bl	80033bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800140a:	f7ff fd7d 	bl	8000f08 <main>
  bx lr
 800140e:	4770      	bx	lr
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8001418:	0800358c 	.word	0x0800358c
  ldr r2, =_sbss
 800141c:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 8001420:	20000428 	.word	0x20000428

08001424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC1_2_IRQHandler>
	...

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_Init+0x28>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_Init+0x28>)
 8001432:	f043 0310 	orr.w	r3, r3, #16
 8001436:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 f947 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	200f      	movs	r0, #15
 8001440:	f000 f808 	bl	8001454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001444:	f7ff fe58 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40022000 	.word	0x40022000

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x54>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_InitTick+0x58>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	fbb3 f3f1 	udiv	r3, r3, r1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f95f 	bl	8001736 <HAL_SYSTICK_Config>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e00e      	b.n	80014a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d80a      	bhi.n	800149e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 f927 	bl	80016e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <HAL_InitTick+0x5c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e000      	b.n	80014a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200002e0 	.word	0x200002e0
 80014ac:	200002e8 	.word	0x200002e8
 80014b0:	200002e4 	.word	0x200002e4

080014b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_IncTick+0x1c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_IncTick+0x20>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a03      	ldr	r2, [pc, #12]	; (80014d4 <HAL_IncTick+0x20>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	200002e8 	.word	0x200002e8
 80014d4:	20000424 	.word	0x20000424

080014d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b02      	ldr	r3, [pc, #8]	; (80014e8 <HAL_GetTick+0x10>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000424 	.word	0x20000424

080014ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff fff0 	bl	80014d8 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d005      	beq.n	8001512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_Delay+0x44>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001512:	bf00      	nop
 8001514:	f7ff ffe0 	bl	80014d8 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8f7      	bhi.n	8001514 <HAL_Delay+0x28>
  {
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200002e8 	.word	0x200002e8

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4906      	ldr	r1, [pc, #24]	; (80015cc <__NVIC_EnableIRQ+0x34>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	; (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001698:	d301      	bcc.n	800169e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169a:	2301      	movs	r3, #1
 800169c:	e00f      	b.n	80016be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <SysTick_Config+0x40>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a6:	210f      	movs	r1, #15
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f7ff ff90 	bl	80015d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SysTick_Config+0x40>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SysTick_Config+0x40>)
 80016b8:	2207      	movs	r2, #7
 80016ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff2d 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f4:	f7ff ff42 	bl	800157c <__NVIC_GetPriorityGrouping>
 80016f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	6978      	ldr	r0, [r7, #20]
 8001700:	f7ff ff90 	bl	8001624 <NVIC_EncodePriority>
 8001704:	4602      	mov	r2, r0
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff5f 	bl	80015d0 <__NVIC_SetPriority>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff35 	bl	8001598 <__NVIC_EnableIRQ>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffa2 	bl	8001688 <SysTick_Config>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e043      	b.n	80017ee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_DMA_Init+0xa8>)
 800176e:	4413      	add	r3, r2
 8001770:	4a22      	ldr	r2, [pc, #136]	; (80017fc <HAL_DMA_Init+0xac>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	009a      	lsls	r2, r3, #2
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <HAL_DMA_Init+0xb0>)
 8001782:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2202      	movs	r2, #2
 8001788:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800179a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800179e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	bffdfff8 	.word	0xbffdfff8
 80017fc:	cccccccd 	.word	0xcccccccd
 8001800:	40020000 	.word	0x40020000

08001804 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_DMA_Start_IT+0x20>
 8001820:	2302      	movs	r3, #2
 8001822:	e04a      	b.n	80018ba <HAL_DMA_Start_IT+0xb6>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001832:	2b01      	cmp	r3, #1
 8001834:	d13a      	bne.n	80018ac <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2202      	movs	r2, #2
 800183a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0201 	bic.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f9e8 	bl	8001c30 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 020e 	orr.w	r2, r2, #14
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e00f      	b.n	800189a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0204 	bic.w	r2, r2, #4
 8001888:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 020a 	orr.w	r2, r2, #10
 8001898:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0201 	orr.w	r2, r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e005      	b.n	80018b8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80018b4:	2302      	movs	r3, #2
 80018b6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b085      	sub	sp, #20
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d008      	beq.n	80018ea <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2204      	movs	r2, #4
 80018dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e020      	b.n	800192c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 020e 	bic.w	r2, r2, #14
 80018f8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0201 	bic.w	r2, r2, #1
 8001908:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800192a:	7bfb      	ldrb	r3, [r7, #15]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
	...

08001938 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800194a:	2b02      	cmp	r3, #2
 800194c:	d005      	beq.n	800195a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2204      	movs	r2, #4
 8001952:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	e051      	b.n	80019fe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 020e 	bic.w	r2, r2, #14
 8001968:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0201 	bic.w	r2, r2, #1
 8001978:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a22      	ldr	r2, [pc, #136]	; (8001a08 <HAL_DMA_Abort_IT+0xd0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d029      	beq.n	80019d8 <HAL_DMA_Abort_IT+0xa0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a20      	ldr	r2, [pc, #128]	; (8001a0c <HAL_DMA_Abort_IT+0xd4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d022      	beq.n	80019d4 <HAL_DMA_Abort_IT+0x9c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <HAL_DMA_Abort_IT+0xd8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d01a      	beq.n	80019ce <HAL_DMA_Abort_IT+0x96>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <HAL_DMA_Abort_IT+0xdc>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d012      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x90>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <HAL_DMA_Abort_IT+0xe0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00a      	beq.n	80019c2 <HAL_DMA_Abort_IT+0x8a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1a      	ldr	r2, [pc, #104]	; (8001a1c <HAL_DMA_Abort_IT+0xe4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d102      	bne.n	80019bc <HAL_DMA_Abort_IT+0x84>
 80019b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019ba:	e00e      	b.n	80019da <HAL_DMA_Abort_IT+0xa2>
 80019bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019c0:	e00b      	b.n	80019da <HAL_DMA_Abort_IT+0xa2>
 80019c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c6:	e008      	b.n	80019da <HAL_DMA_Abort_IT+0xa2>
 80019c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019cc:	e005      	b.n	80019da <HAL_DMA_Abort_IT+0xa2>
 80019ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d2:	e002      	b.n	80019da <HAL_DMA_Abort_IT+0xa2>
 80019d4:	2310      	movs	r3, #16
 80019d6:	e000      	b.n	80019da <HAL_DMA_Abort_IT+0xa2>
 80019d8:	2301      	movs	r3, #1
 80019da:	4a11      	ldr	r2, [pc, #68]	; (8001a20 <HAL_DMA_Abort_IT+0xe8>)
 80019dc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	4798      	blx	r3
    } 
  }
  return status;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40020008 	.word	0x40020008
 8001a0c:	4002001c 	.word	0x4002001c
 8001a10:	40020030 	.word	0x40020030
 8001a14:	40020044 	.word	0x40020044
 8001a18:	40020058 	.word	0x40020058
 8001a1c:	4002006c 	.word	0x4002006c
 8001a20:	40020000 	.word	0x40020000

08001a24 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	2204      	movs	r2, #4
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d04f      	beq.n	8001aec <HAL_DMA_IRQHandler+0xc8>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d04a      	beq.n	8001aec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0320 	and.w	r3, r3, #32
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d107      	bne.n	8001a74 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0204 	bic.w	r2, r2, #4
 8001a72:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a66      	ldr	r2, [pc, #408]	; (8001c14 <HAL_DMA_IRQHandler+0x1f0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d029      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0xae>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a65      	ldr	r2, [pc, #404]	; (8001c18 <HAL_DMA_IRQHandler+0x1f4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d022      	beq.n	8001ace <HAL_DMA_IRQHandler+0xaa>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a63      	ldr	r2, [pc, #396]	; (8001c1c <HAL_DMA_IRQHandler+0x1f8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01a      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0xa4>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a62      	ldr	r2, [pc, #392]	; (8001c20 <HAL_DMA_IRQHandler+0x1fc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d012      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0x9e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a60      	ldr	r2, [pc, #384]	; (8001c24 <HAL_DMA_IRQHandler+0x200>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00a      	beq.n	8001abc <HAL_DMA_IRQHandler+0x98>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a5f      	ldr	r2, [pc, #380]	; (8001c28 <HAL_DMA_IRQHandler+0x204>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d102      	bne.n	8001ab6 <HAL_DMA_IRQHandler+0x92>
 8001ab0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ab4:	e00e      	b.n	8001ad4 <HAL_DMA_IRQHandler+0xb0>
 8001ab6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001aba:	e00b      	b.n	8001ad4 <HAL_DMA_IRQHandler+0xb0>
 8001abc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ac0:	e008      	b.n	8001ad4 <HAL_DMA_IRQHandler+0xb0>
 8001ac2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ac6:	e005      	b.n	8001ad4 <HAL_DMA_IRQHandler+0xb0>
 8001ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001acc:	e002      	b.n	8001ad4 <HAL_DMA_IRQHandler+0xb0>
 8001ace:	2340      	movs	r3, #64	; 0x40
 8001ad0:	e000      	b.n	8001ad4 <HAL_DMA_IRQHandler+0xb0>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	4a55      	ldr	r2, [pc, #340]	; (8001c2c <HAL_DMA_IRQHandler+0x208>)
 8001ad6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8094 	beq.w	8001c0a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001aea:	e08e      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	2202      	movs	r2, #2
 8001af2:	409a      	lsls	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d056      	beq.n	8001baa <HAL_DMA_IRQHandler+0x186>
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d051      	beq.n	8001baa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10b      	bne.n	8001b2c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 020a 	bic.w	r2, r2, #10
 8001b22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a38      	ldr	r2, [pc, #224]	; (8001c14 <HAL_DMA_IRQHandler+0x1f0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d029      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x166>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a37      	ldr	r2, [pc, #220]	; (8001c18 <HAL_DMA_IRQHandler+0x1f4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d022      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x162>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a35      	ldr	r2, [pc, #212]	; (8001c1c <HAL_DMA_IRQHandler+0x1f8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d01a      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x15c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a34      	ldr	r2, [pc, #208]	; (8001c20 <HAL_DMA_IRQHandler+0x1fc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d012      	beq.n	8001b7a <HAL_DMA_IRQHandler+0x156>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a32      	ldr	r2, [pc, #200]	; (8001c24 <HAL_DMA_IRQHandler+0x200>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d00a      	beq.n	8001b74 <HAL_DMA_IRQHandler+0x150>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a31      	ldr	r2, [pc, #196]	; (8001c28 <HAL_DMA_IRQHandler+0x204>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d102      	bne.n	8001b6e <HAL_DMA_IRQHandler+0x14a>
 8001b68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b6c:	e00e      	b.n	8001b8c <HAL_DMA_IRQHandler+0x168>
 8001b6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b72:	e00b      	b.n	8001b8c <HAL_DMA_IRQHandler+0x168>
 8001b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b78:	e008      	b.n	8001b8c <HAL_DMA_IRQHandler+0x168>
 8001b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7e:	e005      	b.n	8001b8c <HAL_DMA_IRQHandler+0x168>
 8001b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b84:	e002      	b.n	8001b8c <HAL_DMA_IRQHandler+0x168>
 8001b86:	2320      	movs	r3, #32
 8001b88:	e000      	b.n	8001b8c <HAL_DMA_IRQHandler+0x168>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <HAL_DMA_IRQHandler+0x208>)
 8001b8e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d034      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ba8:	e02f      	b.n	8001c0a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	2208      	movs	r2, #8
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d028      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x1e8>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d023      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020e 	bic.w	r2, r2, #14
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bdc:	2101      	movs	r1, #1
 8001bde:	fa01 f202 	lsl.w	r2, r1, r2
 8001be2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	4798      	blx	r3
    }
  }
  return;
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
}
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40020008 	.word	0x40020008
 8001c18:	4002001c 	.word	0x4002001c
 8001c1c:	40020030 	.word	0x40020030
 8001c20:	40020044 	.word	0x40020044
 8001c24:	40020058 	.word	0x40020058
 8001c28:	4002006c 	.word	0x4002006c
 8001c2c:	40020000 	.word	0x40020000

08001c30 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c46:	2101      	movs	r1, #1
 8001c48:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d108      	bne.n	8001c70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c6e:	e007      	b.n	8001c80 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	60da      	str	r2, [r3, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b08b      	sub	sp, #44	; 0x2c
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9e:	e169      	b.n	8001f74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	f040 8158 	bne.w	8001f6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4a9a      	ldr	r2, [pc, #616]	; (8001f2c <HAL_GPIO_Init+0x2a0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d05e      	beq.n	8001d86 <HAL_GPIO_Init+0xfa>
 8001cc8:	4a98      	ldr	r2, [pc, #608]	; (8001f2c <HAL_GPIO_Init+0x2a0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d875      	bhi.n	8001dba <HAL_GPIO_Init+0x12e>
 8001cce:	4a98      	ldr	r2, [pc, #608]	; (8001f30 <HAL_GPIO_Init+0x2a4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d058      	beq.n	8001d86 <HAL_GPIO_Init+0xfa>
 8001cd4:	4a96      	ldr	r2, [pc, #600]	; (8001f30 <HAL_GPIO_Init+0x2a4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d86f      	bhi.n	8001dba <HAL_GPIO_Init+0x12e>
 8001cda:	4a96      	ldr	r2, [pc, #600]	; (8001f34 <HAL_GPIO_Init+0x2a8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d052      	beq.n	8001d86 <HAL_GPIO_Init+0xfa>
 8001ce0:	4a94      	ldr	r2, [pc, #592]	; (8001f34 <HAL_GPIO_Init+0x2a8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d869      	bhi.n	8001dba <HAL_GPIO_Init+0x12e>
 8001ce6:	4a94      	ldr	r2, [pc, #592]	; (8001f38 <HAL_GPIO_Init+0x2ac>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d04c      	beq.n	8001d86 <HAL_GPIO_Init+0xfa>
 8001cec:	4a92      	ldr	r2, [pc, #584]	; (8001f38 <HAL_GPIO_Init+0x2ac>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d863      	bhi.n	8001dba <HAL_GPIO_Init+0x12e>
 8001cf2:	4a92      	ldr	r2, [pc, #584]	; (8001f3c <HAL_GPIO_Init+0x2b0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d046      	beq.n	8001d86 <HAL_GPIO_Init+0xfa>
 8001cf8:	4a90      	ldr	r2, [pc, #576]	; (8001f3c <HAL_GPIO_Init+0x2b0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d85d      	bhi.n	8001dba <HAL_GPIO_Init+0x12e>
 8001cfe:	2b12      	cmp	r3, #18
 8001d00:	d82a      	bhi.n	8001d58 <HAL_GPIO_Init+0xcc>
 8001d02:	2b12      	cmp	r3, #18
 8001d04:	d859      	bhi.n	8001dba <HAL_GPIO_Init+0x12e>
 8001d06:	a201      	add	r2, pc, #4	; (adr r2, 8001d0c <HAL_GPIO_Init+0x80>)
 8001d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0c:	08001d87 	.word	0x08001d87
 8001d10:	08001d61 	.word	0x08001d61
 8001d14:	08001d73 	.word	0x08001d73
 8001d18:	08001db5 	.word	0x08001db5
 8001d1c:	08001dbb 	.word	0x08001dbb
 8001d20:	08001dbb 	.word	0x08001dbb
 8001d24:	08001dbb 	.word	0x08001dbb
 8001d28:	08001dbb 	.word	0x08001dbb
 8001d2c:	08001dbb 	.word	0x08001dbb
 8001d30:	08001dbb 	.word	0x08001dbb
 8001d34:	08001dbb 	.word	0x08001dbb
 8001d38:	08001dbb 	.word	0x08001dbb
 8001d3c:	08001dbb 	.word	0x08001dbb
 8001d40:	08001dbb 	.word	0x08001dbb
 8001d44:	08001dbb 	.word	0x08001dbb
 8001d48:	08001dbb 	.word	0x08001dbb
 8001d4c:	08001dbb 	.word	0x08001dbb
 8001d50:	08001d69 	.word	0x08001d69
 8001d54:	08001d7d 	.word	0x08001d7d
 8001d58:	4a79      	ldr	r2, [pc, #484]	; (8001f40 <HAL_GPIO_Init+0x2b4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d5e:	e02c      	b.n	8001dba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	623b      	str	r3, [r7, #32]
          break;
 8001d66:	e029      	b.n	8001dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	623b      	str	r3, [r7, #32]
          break;
 8001d70:	e024      	b.n	8001dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	3308      	adds	r3, #8
 8001d78:	623b      	str	r3, [r7, #32]
          break;
 8001d7a:	e01f      	b.n	8001dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	330c      	adds	r3, #12
 8001d82:	623b      	str	r3, [r7, #32]
          break;
 8001d84:	e01a      	b.n	8001dbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d102      	bne.n	8001d94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	623b      	str	r3, [r7, #32]
          break;
 8001d92:	e013      	b.n	8001dbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d105      	bne.n	8001da8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	611a      	str	r2, [r3, #16]
          break;
 8001da6:	e009      	b.n	8001dbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da8:	2308      	movs	r3, #8
 8001daa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	615a      	str	r2, [r3, #20]
          break;
 8001db2:	e003      	b.n	8001dbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001db4:	2300      	movs	r3, #0
 8001db6:	623b      	str	r3, [r7, #32]
          break;
 8001db8:	e000      	b.n	8001dbc <HAL_GPIO_Init+0x130>
          break;
 8001dba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2bff      	cmp	r3, #255	; 0xff
 8001dc0:	d801      	bhi.n	8001dc6 <HAL_GPIO_Init+0x13a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	e001      	b.n	8001dca <HAL_GPIO_Init+0x13e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2bff      	cmp	r3, #255	; 0xff
 8001dd0:	d802      	bhi.n	8001dd8 <HAL_GPIO_Init+0x14c>
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	e002      	b.n	8001dde <HAL_GPIO_Init+0x152>
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	3b08      	subs	r3, #8
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	210f      	movs	r1, #15
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	401a      	ands	r2, r3
 8001df0:	6a39      	ldr	r1, [r7, #32]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 80b1 	beq.w	8001f6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e0c:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	4a4c      	ldr	r2, [pc, #304]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6193      	str	r3, [r2, #24]
 8001e18:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e24:	4a48      	ldr	r2, [pc, #288]	; (8001f48 <HAL_GPIO_Init+0x2bc>)
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4013      	ands	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a40      	ldr	r2, [pc, #256]	; (8001f4c <HAL_GPIO_Init+0x2c0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d013      	beq.n	8001e78 <HAL_GPIO_Init+0x1ec>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a3f      	ldr	r2, [pc, #252]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d00d      	beq.n	8001e74 <HAL_GPIO_Init+0x1e8>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a3e      	ldr	r2, [pc, #248]	; (8001f54 <HAL_GPIO_Init+0x2c8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d007      	beq.n	8001e70 <HAL_GPIO_Init+0x1e4>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a3d      	ldr	r2, [pc, #244]	; (8001f58 <HAL_GPIO_Init+0x2cc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d101      	bne.n	8001e6c <HAL_GPIO_Init+0x1e0>
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e006      	b.n	8001e7a <HAL_GPIO_Init+0x1ee>
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	e004      	b.n	8001e7a <HAL_GPIO_Init+0x1ee>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e002      	b.n	8001e7a <HAL_GPIO_Init+0x1ee>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_GPIO_Init+0x1ee>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7c:	f002 0203 	and.w	r2, r2, #3
 8001e80:	0092      	lsls	r2, r2, #2
 8001e82:	4093      	lsls	r3, r2
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e8a:	492f      	ldr	r1, [pc, #188]	; (8001f48 <HAL_GPIO_Init+0x2bc>)
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	089b      	lsrs	r3, r3, #2
 8001e90:	3302      	adds	r3, #2
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	492c      	ldr	r1, [pc, #176]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
 8001eb0:	e006      	b.n	8001ec0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eb2:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	4928      	ldr	r1, [pc, #160]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d006      	beq.n	8001eda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ecc:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4922      	ldr	r1, [pc, #136]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	491e      	ldr	r1, [pc, #120]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d006      	beq.n	8001f02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	4918      	ldr	r1, [pc, #96]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4914      	ldr	r1, [pc, #80]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d021      	beq.n	8001f60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	490e      	ldr	r1, [pc, #56]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60cb      	str	r3, [r1, #12]
 8001f28:	e021      	b.n	8001f6e <HAL_GPIO_Init+0x2e2>
 8001f2a:	bf00      	nop
 8001f2c:	10320000 	.word	0x10320000
 8001f30:	10310000 	.word	0x10310000
 8001f34:	10220000 	.word	0x10220000
 8001f38:	10210000 	.word	0x10210000
 8001f3c:	10120000 	.word	0x10120000
 8001f40:	10110000 	.word	0x10110000
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40010000 	.word	0x40010000
 8001f4c:	40010800 	.word	0x40010800
 8001f50:	40010c00 	.word	0x40010c00
 8001f54:	40011000 	.word	0x40011000
 8001f58:	40011400 	.word	0x40011400
 8001f5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_GPIO_Init+0x304>)
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	4909      	ldr	r1, [pc, #36]	; (8001f90 <HAL_GPIO_Init+0x304>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	3301      	adds	r3, #1
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f47f ae8e 	bne.w	8001ca0 <HAL_GPIO_Init+0x14>
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	372c      	adds	r7, #44	; 0x2c
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	40010400 	.word	0x40010400

08001f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e272      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8087 	beq.w	80020c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fb4:	4b92      	ldr	r3, [pc, #584]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d00c      	beq.n	8001fda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fc0:	4b8f      	ldr	r3, [pc, #572]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d112      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x5e>
 8001fcc:	4b8c      	ldr	r3, [pc, #560]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fda:	4b89      	ldr	r3, [pc, #548]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d06c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x12c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d168      	bne.n	80020c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e24c      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x76>
 8001ffc:	4b80      	ldr	r3, [pc, #512]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a7f      	ldr	r2, [pc, #508]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e02e      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x98>
 8002012:	4b7b      	ldr	r3, [pc, #492]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7a      	ldr	r2, [pc, #488]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b78      	ldr	r3, [pc, #480]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a77      	ldr	r2, [pc, #476]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e01d      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0xbc>
 8002036:	4b72      	ldr	r3, [pc, #456]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a71      	ldr	r2, [pc, #452]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6e      	ldr	r2, [pc, #440]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 8002050:	4b6b      	ldr	r3, [pc, #428]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a6a      	ldr	r2, [pc, #424]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b68      	ldr	r3, [pc, #416]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a67      	ldr	r2, [pc, #412]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002066:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff fa32 	bl	80014d8 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff fa2e 	bl	80014d8 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e200      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b5d      	ldr	r3, [pc, #372]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0xe4>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff fa1e 	bl	80014d8 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a0:	f7ff fa1a 	bl	80014d8 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e1ec      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x10c>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d063      	beq.n	8002196 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ce:	4b4c      	ldr	r3, [pc, #304]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020da:	4b49      	ldr	r3, [pc, #292]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x18c>
 80020e6:	4b46      	ldr	r3, [pc, #280]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x176>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e1c0      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4939      	ldr	r1, [pc, #228]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	e03a      	b.n	8002196 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7ff f9d3 	bl	80014d8 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002136:	f7ff f9cf 	bl	80014d8 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1a1      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4927      	ldr	r1, [pc, #156]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e015      	b.n	8002196 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff f9b2 	bl	80014d8 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002178:	f7ff f9ae 	bl	80014d8 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e180      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d03a      	beq.n	8002218 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d019      	beq.n	80021de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_RCC_OscConfig+0x274>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b0:	f7ff f992 	bl	80014d8 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b8:	f7ff f98e 	bl	80014d8 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e160      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f000 fad8 	bl	800278c <RCC_Delay>
 80021dc:	e01c      	b.n	8002218 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_RCC_OscConfig+0x274>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e4:	f7ff f978 	bl	80014d8 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ea:	e00f      	b.n	800220c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ec:	f7ff f974 	bl	80014d8 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d908      	bls.n	800220c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e146      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	42420000 	.word	0x42420000
 8002208:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220c:	4b92      	ldr	r3, [pc, #584]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e9      	bne.n	80021ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80a6 	beq.w	8002372 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222a:	4b8b      	ldr	r3, [pc, #556]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10d      	bne.n	8002252 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	4b88      	ldr	r3, [pc, #544]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a87      	ldr	r2, [pc, #540]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	61d3      	str	r3, [r2, #28]
 8002242:	4b85      	ldr	r3, [pc, #532]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224e:	2301      	movs	r3, #1
 8002250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	4b82      	ldr	r3, [pc, #520]	; (800245c <HAL_RCC_OscConfig+0x4c8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d118      	bne.n	8002290 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225e:	4b7f      	ldr	r3, [pc, #508]	; (800245c <HAL_RCC_OscConfig+0x4c8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a7e      	ldr	r2, [pc, #504]	; (800245c <HAL_RCC_OscConfig+0x4c8>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226a:	f7ff f935 	bl	80014d8 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002272:	f7ff f931 	bl	80014d8 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b64      	cmp	r3, #100	; 0x64
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e103      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	4b75      	ldr	r3, [pc, #468]	; (800245c <HAL_RCC_OscConfig+0x4c8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x312>
 8002298:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a6e      	ldr	r2, [pc, #440]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	e02d      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x334>
 80022ae:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4a69      	ldr	r2, [pc, #420]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	6213      	str	r3, [r2, #32]
 80022ba:	4b67      	ldr	r3, [pc, #412]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4a66      	ldr	r2, [pc, #408]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	6213      	str	r3, [r2, #32]
 80022c6:	e01c      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d10c      	bne.n	80022ea <HAL_RCC_OscConfig+0x356>
 80022d0:	4b61      	ldr	r3, [pc, #388]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4a60      	ldr	r2, [pc, #384]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	6213      	str	r3, [r2, #32]
 80022dc:	4b5e      	ldr	r3, [pc, #376]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4a5d      	ldr	r2, [pc, #372]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6213      	str	r3, [r2, #32]
 80022e8:	e00b      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022ea:	4b5b      	ldr	r3, [pc, #364]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a5a      	ldr	r2, [pc, #360]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	4b58      	ldr	r3, [pc, #352]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4a57      	ldr	r2, [pc, #348]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d015      	beq.n	8002336 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230a:	f7ff f8e5 	bl	80014d8 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7ff f8e1 	bl	80014d8 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e0b1      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002328:	4b4b      	ldr	r3, [pc, #300]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ee      	beq.n	8002312 <HAL_RCC_OscConfig+0x37e>
 8002334:	e014      	b.n	8002360 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002336:	f7ff f8cf 	bl	80014d8 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7ff f8cb 	bl	80014d8 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e09b      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002354:	4b40      	ldr	r3, [pc, #256]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ee      	bne.n	800233e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d105      	bne.n	8002372 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002366:	4b3c      	ldr	r3, [pc, #240]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	4a3b      	ldr	r2, [pc, #236]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002370:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8087 	beq.w	800248a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800237c:	4b36      	ldr	r3, [pc, #216]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b08      	cmp	r3, #8
 8002386:	d061      	beq.n	800244c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d146      	bne.n	800241e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002390:	4b33      	ldr	r3, [pc, #204]	; (8002460 <HAL_RCC_OscConfig+0x4cc>)
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7ff f89f 	bl	80014d8 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239e:	f7ff f89b 	bl	80014d8 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e06d      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b0:	4b29      	ldr	r3, [pc, #164]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d108      	bne.n	80023d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	4921      	ldr	r1, [pc, #132]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d8:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a19      	ldr	r1, [r3, #32]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	430b      	orrs	r3, r1
 80023ea:	491b      	ldr	r1, [pc, #108]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_RCC_OscConfig+0x4cc>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7ff f86f 	bl	80014d8 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fe:	f7ff f86b 	bl	80014d8 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e03d      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x46a>
 800241c:	e035      	b.n	800248a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_RCC_OscConfig+0x4cc>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff f858 	bl	80014d8 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7ff f854 	bl	80014d8 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e026      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x498>
 800244a:	e01e      	b.n	800248a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d107      	bne.n	8002464 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e019      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
 8002458:	40021000 	.word	0x40021000
 800245c:	40007000 	.word	0x40007000
 8002460:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_OscConfig+0x500>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	429a      	cmp	r2, r3
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000

08002498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0d0      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ac:	4b6a      	ldr	r3, [pc, #424]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d910      	bls.n	80024dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b67      	ldr	r3, [pc, #412]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 0207 	bic.w	r2, r3, #7
 80024c2:	4965      	ldr	r1, [pc, #404]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	4b63      	ldr	r3, [pc, #396]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0b8      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f4:	4b59      	ldr	r3, [pc, #356]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4a58      	ldr	r2, [pc, #352]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800250c:	4b53      	ldr	r3, [pc, #332]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4a52      	ldr	r2, [pc, #328]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002516:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002518:	4b50      	ldr	r3, [pc, #320]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	494d      	ldr	r1, [pc, #308]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d040      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d107      	bne.n	800254e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	4b47      	ldr	r3, [pc, #284]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d115      	bne.n	8002576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e07f      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e073      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002566:	4b3d      	ldr	r3, [pc, #244]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e06b      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002576:	4b39      	ldr	r3, [pc, #228]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f023 0203 	bic.w	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4936      	ldr	r1, [pc, #216]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002588:	f7fe ffa6 	bl	80014d8 <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002590:	f7fe ffa2 	bl	80014d8 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e053      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	4b2d      	ldr	r3, [pc, #180]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 020c 	and.w	r2, r3, #12
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d1eb      	bne.n	8002590 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d210      	bcs.n	80025e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 0207 	bic.w	r2, r3, #7
 80025ce:	4922      	ldr	r1, [pc, #136]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b20      	ldr	r3, [pc, #128]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e032      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4916      	ldr	r1, [pc, #88]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	490e      	ldr	r1, [pc, #56]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002626:	f000 f821 	bl	800266c <HAL_RCC_GetSysClockFreq>
 800262a:	4602      	mov	r2, r0
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	490a      	ldr	r1, [pc, #40]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 8002638:	5ccb      	ldrb	r3, [r1, r3]
 800263a:	fa22 f303 	lsr.w	r3, r2, r3
 800263e:	4a09      	ldr	r2, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x1cc>)
 8002640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCC_ClockConfig+0x1d0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe ff04 	bl	8001454 <HAL_InitTick>

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40022000 	.word	0x40022000
 800265c:	40021000 	.word	0x40021000
 8002660:	0800356c 	.word	0x0800356c
 8002664:	200002e0 	.word	0x200002e0
 8002668:	200002e4 	.word	0x200002e4

0800266c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800266c:	b490      	push	{r4, r7}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002672:	4b29      	ldr	r3, [pc, #164]	; (8002718 <HAL_RCC_GetSysClockFreq+0xac>)
 8002674:	1d3c      	adds	r4, r7, #4
 8002676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800267c:	f240 2301 	movw	r3, #513	; 0x201
 8002680:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d002      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x40>
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d003      	beq.n	80026b2 <HAL_RCC_GetSysClockFreq+0x46>
 80026aa:	e02b      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026ac:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026ae:	623b      	str	r3, [r7, #32]
      break;
 80026b0:	e02b      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	0c9b      	lsrs	r3, r3, #18
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	3328      	adds	r3, #40	; 0x28
 80026bc:	443b      	add	r3, r7
 80026be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d012      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <HAL_RCC_GetSysClockFreq+0xb0>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	0c5b      	lsrs	r3, r3, #17
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	3328      	adds	r3, #40	; 0x28
 80026da:	443b      	add	r3, r7
 80026dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	4a0e      	ldr	r2, [pc, #56]	; (8002720 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026e6:	fb03 f202 	mul.w	r2, r3, r2
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	e004      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f8:	fb02 f303 	mul.w	r3, r2, r3
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	623b      	str	r3, [r7, #32]
      break;
 8002702:	e002      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002706:	623b      	str	r3, [r7, #32]
      break;
 8002708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270a:	6a3b      	ldr	r3, [r7, #32]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3728      	adds	r7, #40	; 0x28
 8002710:	46bd      	mov	sp, r7
 8002712:	bc90      	pop	{r4, r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	0800355c 	.word	0x0800355c
 800271c:	40021000 	.word	0x40021000
 8002720:	007a1200 	.word	0x007a1200
 8002724:	003d0900 	.word	0x003d0900

08002728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800272c:	4b02      	ldr	r3, [pc, #8]	; (8002738 <HAL_RCC_GetHCLKFreq+0x10>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	200002e0 	.word	0x200002e0

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002740:	f7ff fff2 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4903      	ldr	r1, [pc, #12]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	0800357c 	.word	0x0800357c

08002764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002768:	f7ff ffde 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	0adb      	lsrs	r3, r3, #11
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4903      	ldr	r1, [pc, #12]	; (8002788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000
 8002788:	0800357c 	.word	0x0800357c

0800278c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <RCC_Delay+0x34>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <RCC_Delay+0x38>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0a5b      	lsrs	r3, r3, #9
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	fb02 f303 	mul.w	r3, r2, r3
 80027a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027a8:	bf00      	nop
  }
  while (Delay --);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1e5a      	subs	r2, r3, #1
 80027ae:	60fa      	str	r2, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f9      	bne.n	80027a8 <RCC_Delay+0x1c>
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	200002e0 	.word	0x200002e0
 80027c4:	10624dd3 	.word	0x10624dd3

080027c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e03f      	b.n	800285a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe fcb4 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2224      	movs	r2, #36	; 0x24
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800280a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fd47 	bl	80032a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002820:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002830:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002840:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	4613      	mov	r3, r2
 800286e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b20      	cmp	r3, #32
 800287a:	d130      	bne.n	80028de <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <HAL_UART_Transmit_IT+0x26>
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e029      	b.n	80028e0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_UART_Transmit_IT+0x38>
 8002896:	2302      	movs	r3, #2
 8002898:	e022      	b.n	80028e0 <HAL_UART_Transmit_IT+0x7e>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	88fa      	ldrh	r2, [r7, #6]
 80028ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	88fa      	ldrh	r2, [r7, #6]
 80028b2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2221      	movs	r2, #33	; 0x21
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028d8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	e000      	b.n	80028e0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80028de:	2302      	movs	r3, #2
  }
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	4613      	mov	r3, r2
 80028f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b20      	cmp	r3, #32
 8002902:	d11d      	bne.n	8002940 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_UART_Receive_IT+0x26>
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e016      	b.n	8002942 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_UART_Receive_IT+0x38>
 800291e:	2302      	movs	r3, #2
 8002920:	e00f      	b.n	8002942 <HAL_UART_Receive_IT+0x58>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	461a      	mov	r2, r3
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 faaf 	bl	8002e9a <UART_Start_Receive_IT>
 800293c:	4603      	mov	r3, r0
 800293e:	e000      	b.n	8002942 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002940:	2302      	movs	r3, #2
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	4613      	mov	r3, r2
 8002956:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b20      	cmp	r3, #32
 8002962:	d11d      	bne.n	80029a0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_UART_Receive_DMA+0x26>
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e016      	b.n	80029a2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_UART_Receive_DMA+0x38>
 800297e:	2302      	movs	r3, #2
 8002980:	e00f      	b.n	80029a2 <HAL_UART_Receive_DMA+0x58>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	461a      	mov	r2, r3
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fab8 	bl	8002f0c <UART_Start_Receive_DMA>
 800299c:	4603      	mov	r3, r0
 800299e:	e000      	b.n	80029a2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80029a0:	2302      	movs	r3, #2
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10d      	bne.n	80029fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_UART_IRQHandler+0x52>
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fba8 	bl	800314c <UART_Receive_IT>
      return;
 80029fc:	e17b      	b.n	8002cf6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80b1 	beq.w	8002b68 <HAL_UART_IRQHandler+0x1bc>
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <HAL_UART_IRQHandler+0x70>
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80a6 	beq.w	8002b68 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_UART_IRQHandler+0x90>
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_UART_IRQHandler+0xb0>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f043 0202 	orr.w	r2, r3, #2
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_UART_IRQHandler+0xd0>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f043 0204 	orr.w	r2, r3, #4
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00f      	beq.n	8002aa6 <HAL_UART_IRQHandler+0xfa>
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d104      	bne.n	8002a9a <HAL_UART_IRQHandler+0xee>
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0208 	orr.w	r2, r3, #8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 811e 	beq.w	8002cec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d007      	beq.n	8002aca <HAL_UART_IRQHandler+0x11e>
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fb41 	bl	800314c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <HAL_UART_IRQHandler+0x146>
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d031      	beq.n	8002b56 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa83 	bl	8002ffe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d023      	beq.n	8002b4e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b14:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d013      	beq.n	8002b46 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	4a76      	ldr	r2, [pc, #472]	; (8002cfc <HAL_UART_IRQHandler+0x350>)
 8002b24:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe ff04 	bl	8001938 <HAL_DMA_Abort_IT>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d016      	beq.n	8002b64 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b40:	4610      	mov	r0, r2
 8002b42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b44:	e00e      	b.n	8002b64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f8e3 	bl	8002d12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4c:	e00a      	b.n	8002b64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f8df 	bl	8002d12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b54:	e006      	b.n	8002b64 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f8db 	bl	8002d12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b62:	e0c3      	b.n	8002cec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b64:	bf00      	nop
    return;
 8002b66:	e0c1      	b.n	8002cec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	f040 80a1 	bne.w	8002cb4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 809b 	beq.w	8002cb4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 8095 	beq.w	8002cb4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d04e      	beq.n	8002c4c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002bb8:	8a3b      	ldrh	r3, [r7, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8098 	beq.w	8002cf0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bc4:	8a3a      	ldrh	r2, [r7, #16]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	f080 8092 	bcs.w	8002cf0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8a3a      	ldrh	r2, [r7, #16]
 8002bd0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d02b      	beq.n	8002c34 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c0a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0210 	bic.w	r2, r2, #16
 8002c28:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fe47 	bl	80018c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	4619      	mov	r1, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f86d 	bl	8002d24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c4a:	e051      	b.n	8002cf0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d047      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002c64:	8a7b      	ldrh	r3, [r7, #18]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d044      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c78:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0210 	bic.w	r2, r2, #16
 8002ca6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ca8:	8a7b      	ldrh	r3, [r7, #18]
 8002caa:	4619      	mov	r1, r3
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f839 	bl	8002d24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002cb2:	e01f      	b.n	8002cf4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x324>
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f9d8 	bl	800307e <UART_Transmit_IT>
    return;
 8002cce:	e012      	b.n	8002cf6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00d      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x34a>
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fa19 	bl	800311c <UART_EndTransmit_IT>
    return;
 8002cea:	e004      	b.n	8002cf6 <HAL_UART_IRQHandler+0x34a>
    return;
 8002cec:	bf00      	nop
 8002cee:	e002      	b.n	8002cf6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002cf0:	bf00      	nop
 8002cf2:	e000      	b.n	8002cf6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002cf4:	bf00      	nop
  }
}
 8002cf6:	3728      	adds	r7, #40	; 0x28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	08003057 	.word	0x08003057

08002d00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d12a      	bne.n	8002dac <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d6a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d8a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0210 	bic.w	r2, r2, #16
 8002daa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d106      	bne.n	8002dc2 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002db8:	4619      	mov	r1, r3
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f7ff ffb2 	bl	8002d24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002dc0:	e002      	b.n	8002dc8 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f7fd f9d6 	bl	8000174 <HAL_UART_RxCpltCallback>
}
 8002dc8:	bf00      	nop
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d108      	bne.n	8002df8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	4619      	mov	r1, r3
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff ff97 	bl	8002d24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002df6:	e002      	b.n	8002dfe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff ff81 	bl	8002d00 <HAL_UART_RxHalfCpltCallback>
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bf14      	ite	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	2300      	moveq	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b21      	cmp	r3, #33	; 0x21
 8002e38:	d108      	bne.n	8002e4c <UART_DMAError+0x46>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2200      	movs	r2, #0
 8002e44:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002e46:	68b8      	ldr	r0, [r7, #8]
 8002e48:	f000 f8c4 	bl	8002fd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bf14      	ite	ne
 8002e5a:	2301      	movne	r3, #1
 8002e5c:	2300      	moveq	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b22      	cmp	r3, #34	; 0x22
 8002e6c:	d108      	bne.n	8002e80 <UART_DMAError+0x7a>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2200      	movs	r2, #0
 8002e78:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002e7a:	68b8      	ldr	r0, [r7, #8]
 8002e7c:	f000 f8bf 	bl	8002ffe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f043 0210 	orr.w	r2, r3, #16
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e8c:	68b8      	ldr	r0, [r7, #8]
 8002e8e:	f7ff ff40 	bl	8002d12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b085      	sub	sp, #20
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	88fa      	ldrh	r2, [r7, #6]
 8002eb2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	88fa      	ldrh	r2, [r7, #6]
 8002eb8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2222      	movs	r2, #34	; 0x22
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ede:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0220 	orr.w	r2, r2, #32
 8002efe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	4613      	mov	r3, r2
 8002f18:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2222      	movs	r2, #34	; 0x22
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <UART_Start_Receive_DMA+0xbc>)
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	4a22      	ldr	r2, [pc, #136]	; (8002fcc <UART_Start_Receive_DMA+0xc0>)
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	4a21      	ldr	r2, [pc, #132]	; (8002fd0 <UART_Start_Receive_DMA+0xc4>)
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	2200      	movs	r2, #0
 8002f52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002f54:	f107 0308 	add.w	r3, r7, #8
 8002f58:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3304      	adds	r3, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	f7fe fc4a 	bl	8001804 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f9c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fbc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	08002d3b 	.word	0x08002d3b
 8002fcc:	08002dd1 	.word	0x08002dd1
 8002fd0:	08002e07 	.word	0x08002e07

08002fd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002fea:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003014:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0201 	bic.w	r2, r2, #1
 8003024:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	2b01      	cmp	r3, #1
 800302c:	d107      	bne.n	800303e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0210 	bic.w	r2, r2, #16
 800303c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f7ff fe4e 	bl	8002d12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800307e:	b480      	push	{r7}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b21      	cmp	r3, #33	; 0x21
 8003090:	d13e      	bne.n	8003110 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309a:	d114      	bne.n	80030c6 <UART_Transmit_IT+0x48>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d110      	bne.n	80030c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	1c9a      	adds	r2, r3, #2
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	621a      	str	r2, [r3, #32]
 80030c4:	e008      	b.n	80030d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	1c59      	adds	r1, r3, #1
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6211      	str	r1, [r2, #32]
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	4619      	mov	r1, r3
 80030e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10f      	bne.n	800310c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800310a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003132:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7fd f80f 	bl	8000160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b22      	cmp	r3, #34	; 0x22
 800315e:	f040 8099 	bne.w	8003294 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316a:	d117      	bne.n	800319c <UART_Receive_IT+0x50>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d113      	bne.n	800319c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	b29b      	uxth	r3, r3
 8003186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318a:	b29a      	uxth	r2, r3
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	1c9a      	adds	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	629a      	str	r2, [r3, #40]	; 0x28
 800319a:	e026      	b.n	80031ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ae:	d007      	beq.n	80031c0 <UART_Receive_IT+0x74>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <UART_Receive_IT+0x82>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d106      	bne.n	80031ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	701a      	strb	r2, [r3, #0]
 80031cc:	e008      	b.n	80031e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4619      	mov	r1, r3
 80031f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d148      	bne.n	8003290 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0220 	bic.w	r2, r2, #32
 800320c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800321c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	2b01      	cmp	r3, #1
 800323c:	d123      	bne.n	8003286 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0210 	bic.w	r2, r2, #16
 8003252:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b10      	cmp	r3, #16
 8003260:	d10a      	bne.n	8003278 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800327c:	4619      	mov	r1, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff fd50 	bl	8002d24 <HAL_UARTEx_RxEventCallback>
 8003284:	e002      	b.n	800328c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fc ff74 	bl	8000174 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e002      	b.n	8003296 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e000      	b.n	8003296 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003294:	2302      	movs	r3, #2
  }
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032da:	f023 030c 	bic.w	r3, r3, #12
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	430b      	orrs	r3, r1
 80032e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <UART_SetConfig+0x114>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d103      	bne.n	8003310 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003308:	f7ff fa2c 	bl	8002764 <HAL_RCC_GetPCLK2Freq>
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	e002      	b.n	8003316 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003310:	f7ff fa14 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8003314:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	009a      	lsls	r2, r3, #2
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <UART_SetConfig+0x118>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	0119      	lsls	r1, r3, #4
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	009a      	lsls	r2, r3, #2
 8003340:	441a      	add	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	fbb2 f2f3 	udiv	r2, r2, r3
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <UART_SetConfig+0x118>)
 800334e:	fba3 0302 	umull	r0, r3, r3, r2
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2064      	movs	r0, #100	; 0x64
 8003356:	fb00 f303 	mul.w	r3, r0, r3
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	3332      	adds	r3, #50	; 0x32
 8003360:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <UART_SetConfig+0x118>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800336c:	4419      	add	r1, r3
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	009a      	lsls	r2, r3, #2
 8003378:	441a      	add	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	fbb2 f2f3 	udiv	r2, r2, r3
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <UART_SetConfig+0x118>)
 8003386:	fba3 0302 	umull	r0, r3, r3, r2
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2064      	movs	r0, #100	; 0x64
 800338e:	fb00 f303 	mul.w	r3, r0, r3
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	3332      	adds	r3, #50	; 0x32
 8003398:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <UART_SetConfig+0x118>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	f003 020f 	and.w	r2, r3, #15
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	440a      	add	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40013800 	.word	0x40013800
 80033b8:	51eb851f 	.word	0x51eb851f

080033bc <__libc_init_array>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	2600      	movs	r6, #0
 80033c0:	4d0c      	ldr	r5, [pc, #48]	; (80033f4 <__libc_init_array+0x38>)
 80033c2:	4c0d      	ldr	r4, [pc, #52]	; (80033f8 <__libc_init_array+0x3c>)
 80033c4:	1b64      	subs	r4, r4, r5
 80033c6:	10a4      	asrs	r4, r4, #2
 80033c8:	42a6      	cmp	r6, r4
 80033ca:	d109      	bne.n	80033e0 <__libc_init_array+0x24>
 80033cc:	f000 f822 	bl	8003414 <_init>
 80033d0:	2600      	movs	r6, #0
 80033d2:	4d0a      	ldr	r5, [pc, #40]	; (80033fc <__libc_init_array+0x40>)
 80033d4:	4c0a      	ldr	r4, [pc, #40]	; (8003400 <__libc_init_array+0x44>)
 80033d6:	1b64      	subs	r4, r4, r5
 80033d8:	10a4      	asrs	r4, r4, #2
 80033da:	42a6      	cmp	r6, r4
 80033dc:	d105      	bne.n	80033ea <__libc_init_array+0x2e>
 80033de:	bd70      	pop	{r4, r5, r6, pc}
 80033e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e4:	4798      	blx	r3
 80033e6:	3601      	adds	r6, #1
 80033e8:	e7ee      	b.n	80033c8 <__libc_init_array+0xc>
 80033ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ee:	4798      	blx	r3
 80033f0:	3601      	adds	r6, #1
 80033f2:	e7f2      	b.n	80033da <__libc_init_array+0x1e>
 80033f4:	08003584 	.word	0x08003584
 80033f8:	08003584 	.word	0x08003584
 80033fc:	08003584 	.word	0x08003584
 8003400:	08003588 	.word	0x08003588

08003404 <memset>:
 8003404:	4603      	mov	r3, r0
 8003406:	4402      	add	r2, r0
 8003408:	4293      	cmp	r3, r2
 800340a:	d100      	bne.n	800340e <memset+0xa>
 800340c:	4770      	bx	lr
 800340e:	f803 1b01 	strb.w	r1, [r3], #1
 8003412:	e7f9      	b.n	8003408 <memset+0x4>

08003414 <_init>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	bf00      	nop
 8003418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341a:	bc08      	pop	{r3}
 800341c:	469e      	mov	lr, r3
 800341e:	4770      	bx	lr

08003420 <_fini>:
 8003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003422:	bf00      	nop
 8003424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003426:	bc08      	pop	{r3}
 8003428:	469e      	mov	lr, r3
 800342a:	4770      	bx	lr
