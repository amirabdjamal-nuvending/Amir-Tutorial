
MMW_V2_Dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007664  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08007778  08007778  00017778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb0  08007cb0  0002026c  2**0
                  CONTENTS
  4 .ARM          00000000  08007cb0  08007cb0  0002026c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cb0  08007cb0  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb0  08007cb0  00017cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cb4  08007cb4  00017cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08007cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000026c  08007f24  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  08007f24  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4ce  00000000  00000000  00020295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dcf  00000000  00000000  0002b763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002d538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  0002e270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018586  00000000  00000000  0002eef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d107  00000000  00000000  00047476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008be25  00000000  00000000  0005457d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e03a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a74  00000000  00000000  000e03f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000026c 	.word	0x2000026c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800775c 	.word	0x0800775c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000270 	.word	0x20000270
 800014c:	0800775c 	.word	0x0800775c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	; 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d0a:	2afd      	cmp	r2, #253	; 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	; 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	; 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	; 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <delay>:
uint8_t TEST_MOTOR_ERROR[5] = {0xFB,  0x03,  0x00,  0x00,  0xFB};

/**************************** Milliseconds Delay Function ****************************/

void delay (uint32_t us)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim1,0);
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <delay+0x2c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2200      	movs	r2, #0
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
    while ((__HAL_TIM_GET_COUNTER(&htim1))<us);
 8000f68:	bf00      	nop
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <delay+0x2c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d8f9      	bhi.n	8000f6a <delay+0x12>
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000288 	.word	0x20000288

08000f88 <Set_Pin_Output>:

/**************************** Set Pin as Input/Output for TEMPERATURE Sensor ****************************/

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_Pin;
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2302      	movs	r3, #2
 8000fac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f001 fda5 	bl	8002b04 <HAL_GPIO_Init>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_Pin;
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <Set_Pin_Input+0x3c>)
 8000ff2:	f001 fd87 	bl	8002b04 <HAL_GPIO_Init>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40010800 	.word	0x40010800

08001004 <DS18B20_Start>:
/**************************** DS18B20/TEMPERATURE Sensor Functions ****************************/
#define DS18B20_PORT GPIOA
#define DS18B20_PIN GPIO_PIN_7

uint8_t DS18B20_Start (void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	4813      	ldr	r0, [pc, #76]	; (8001060 <DS18B20_Start+0x5c>)
 8001012:	f7ff ffb9 	bl	8000f88 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8001016:	2200      	movs	r2, #0
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	4811      	ldr	r0, [pc, #68]	; (8001060 <DS18B20_Start+0x5c>)
 800101c:	f001 ff0d 	bl	8002e3a <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8001020:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001024:	f7ff ff98 	bl	8000f58 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	480d      	ldr	r0, [pc, #52]	; (8001060 <DS18B20_Start+0x5c>)
 800102c:	f7ff ffca 	bl	8000fc4 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8001030:	2050      	movs	r0, #80	; 0x50
 8001032:	f7ff ff91 	bl	8000f58 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	4809      	ldr	r0, [pc, #36]	; (8001060 <DS18B20_Start+0x5c>)
 800103a:	f001 fee7 	bl	8002e0c <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <DS18B20_Start+0x46>
 8001044:	2301      	movs	r3, #1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	e001      	b.n	800104e <DS18B20_Start+0x4a>
	else Response = -1;
 800104a:	23ff      	movs	r3, #255	; 0xff
 800104c:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 800104e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001052:	f7ff ff81 	bl	8000f58 <delay>

	return Response;
 8001056:	79fb      	ldrb	r3, [r7, #7]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40010800 	.word	0x40010800

08001064 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	481e      	ldr	r0, [pc, #120]	; (80010ec <DS18B20_Write+0x88>)
 8001072:	f7ff ff89 	bl	8000f88 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	e02e      	b.n	80010da <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	fa42 f303 	asr.w	r3, r2, r3
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d013      	beq.n	80010b4 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	4817      	ldr	r0, [pc, #92]	; (80010ec <DS18B20_Write+0x88>)
 8001090:	f7ff ff7a 	bl	8000f88 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001094:	2200      	movs	r2, #0
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	4814      	ldr	r0, [pc, #80]	; (80010ec <DS18B20_Write+0x88>)
 800109a:	f001 fece 	bl	8002e3a <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff ff5a 	bl	8000f58 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	4811      	ldr	r0, [pc, #68]	; (80010ec <DS18B20_Write+0x88>)
 80010a8:	f7ff ff8c 	bl	8000fc4 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 80010ac:	2032      	movs	r0, #50	; 0x32
 80010ae:	f7ff ff53 	bl	8000f58 <delay>
 80010b2:	e00f      	b.n	80010d4 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <DS18B20_Write+0x88>)
 80010b8:	f7ff ff66 	bl	8000f88 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80010bc:	2200      	movs	r2, #0
 80010be:	2180      	movs	r1, #128	; 0x80
 80010c0:	480a      	ldr	r0, [pc, #40]	; (80010ec <DS18B20_Write+0x88>)
 80010c2:	f001 feba 	bl	8002e3a <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 80010c6:	2032      	movs	r0, #50	; 0x32
 80010c8:	f7ff ff46 	bl	8000f58 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <DS18B20_Write+0x88>)
 80010d0:	f7ff ff78 	bl	8000fc4 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2b07      	cmp	r3, #7
 80010de:	ddcd      	ble.n	800107c <DS18B20_Write+0x18>
		}
	}
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40010800 	.word	0x40010800

080010f0 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	481a      	ldr	r0, [pc, #104]	; (8001168 <DS18B20_Read+0x78>)
 80010fe:	f7ff ff61 	bl	8000fc4 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	e026      	b.n	8001156 <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	4817      	ldr	r0, [pc, #92]	; (8001168 <DS18B20_Read+0x78>)
 800110c:	f7ff ff3c 	bl	8000f88 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 8001110:	2200      	movs	r2, #0
 8001112:	2180      	movs	r1, #128	; 0x80
 8001114:	4814      	ldr	r0, [pc, #80]	; (8001168 <DS18B20_Read+0x78>)
 8001116:	f001 fe90 	bl	8002e3a <HAL_GPIO_WritePin>
		delay (2);  // wait for 2 us
 800111a:	2002      	movs	r0, #2
 800111c:	f7ff ff1c 	bl	8000f58 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	4811      	ldr	r0, [pc, #68]	; (8001168 <DS18B20_Read+0x78>)
 8001124:	f7ff ff4e 	bl	8000fc4 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	480f      	ldr	r0, [pc, #60]	; (8001168 <DS18B20_Read+0x78>)
 800112c:	f001 fe6e 	bl	8002e0c <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d009      	beq.n	800114a <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8001136:	2201      	movs	r2, #1
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	b25a      	sxtb	r2, r3
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4313      	orrs	r3, r2
 8001146:	b25b      	sxtb	r3, r3
 8001148:	71fb      	strb	r3, [r7, #7]
		}
		delay (60);  // wait for 60 us
 800114a:	203c      	movs	r0, #60	; 0x3c
 800114c:	f7ff ff04 	bl	8000f58 <delay>
	for (int i=0;i<8;i++)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2b07      	cmp	r3, #7
 800115a:	ddd5      	ble.n	8001108 <DS18B20_Read+0x18>
	}
	return value;
 800115c:	79fb      	ldrb	r3, [r7, #7]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40010800 	.word	0x40010800

0800116c <HAL_UART_TxCpltCallback>:
int tx_to_DTU_enable = 0;
char TX_BUFF_TO_DTU[25]; //String from STM32 to DTU is sent using this buffer
uint16_t TX_COMMAND_TO_STC[6]; //Hex Command from STM32 to STC is sent using this buffer

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
	...

08001180 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a20      	ldr	r2, [pc, #128]	; (8001210 <HAL_UART_RxCpltCallback+0x90>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d127      	bne.n	80011e2 <HAL_UART_RxCpltCallback+0x62>
	 {
  /**************************** UART Split ****************************/
		if(strncmp(RX_BUFF_FROM_DTU, SENSOR_REQUEST_STRING[0], 7) == 0 ||
 8001192:	2207      	movs	r2, #7
 8001194:	491f      	ldr	r1, [pc, #124]	; (8001214 <HAL_UART_RxCpltCallback+0x94>)
 8001196:	4820      	ldr	r0, [pc, #128]	; (8001218 <HAL_UART_RxCpltCallback+0x98>)
 8001198:	f004 f812 	bl	80051c0 <strncmp>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00f      	beq.n	80011c2 <HAL_UART_RxCpltCallback+0x42>
					strncmp(RX_BUFF_FROM_DTU, SENSOR_REQUEST_STRING[1], 7) == 0 ||
 80011a2:	2207      	movs	r2, #7
 80011a4:	491d      	ldr	r1, [pc, #116]	; (800121c <HAL_UART_RxCpltCallback+0x9c>)
 80011a6:	481c      	ldr	r0, [pc, #112]	; (8001218 <HAL_UART_RxCpltCallback+0x98>)
 80011a8:	f004 f80a 	bl	80051c0 <strncmp>
 80011ac:	4603      	mov	r3, r0
		if(strncmp(RX_BUFF_FROM_DTU, SENSOR_REQUEST_STRING[0], 7) == 0 ||
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d007      	beq.n	80011c2 <HAL_UART_RxCpltCallback+0x42>
					strncmp(RX_BUFF_FROM_DTU, SENSOR_REQUEST_STRING[2], 7) == 0){
 80011b2:	2207      	movs	r2, #7
 80011b4:	491a      	ldr	r1, [pc, #104]	; (8001220 <HAL_UART_RxCpltCallback+0xa0>)
 80011b6:	4818      	ldr	r0, [pc, #96]	; (8001218 <HAL_UART_RxCpltCallback+0x98>)
 80011b8:	f004 f802 	bl	80051c0 <strncmp>
 80011bc:	4603      	mov	r3, r0
					strncmp(RX_BUFF_FROM_DTU, SENSOR_REQUEST_STRING[1], 7) == 0 ||
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d106      	bne.n	80011d0 <HAL_UART_RxCpltCallback+0x50>

			  tx_to_DTU_enable = 1;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_UART_RxCpltCallback+0xa4>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
			  tx_doorOpen_to_DTU_enable = 0;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_UART_RxCpltCallback+0xa8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e008      	b.n	80011e2 <HAL_UART_RxCpltCallback+0x62>
		}
		else{
			  split_Command_from_DTU();
 80011d0:	f000 f9d4 	bl	800157c <split_Command_from_DTU>
			  concat_Command_for_STC();
 80011d4:	f000 f9fe 	bl	80015d4 <concat_Command_for_STC>
			/**************************** UART Transmit & Receive ****************************/
			  send_Command_to_STC();
 80011d8:	f000 fb62 	bl	80018a0 <send_Command_to_STC>
			  tx_doorOpen_to_DTU_enable = 0;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_UART_RxCpltCallback+0xa8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
		}
	 }

	if(huart->Instance==USART2)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <HAL_UART_RxCpltCallback+0xac>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d102      	bne.n	80011f2 <HAL_UART_RxCpltCallback+0x72>
	 {
		tx_to_DTU_enable = 1;
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_UART_RxCpltCallback+0xa4>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]
	 }

	HAL_UART_Receive_DMA(&huart2, RX_DATA_FROM_STC, 5); //restart the reception mode
 80011f2:	2205      	movs	r2, #5
 80011f4:	490e      	ldr	r1, [pc, #56]	; (8001230 <HAL_UART_RxCpltCallback+0xb0>)
 80011f6:	480f      	ldr	r0, [pc, #60]	; (8001234 <HAL_UART_RxCpltCallback+0xb4>)
 80011f8:	f002 fddf 	bl	8003dba <HAL_UART_Receive_DMA>
	HAL_UART_Receive_IT(&huart1,RX_BUFF_FROM_DTU, 7);
 80011fc:	2207      	movs	r2, #7
 80011fe:	4906      	ldr	r1, [pc, #24]	; (8001218 <HAL_UART_RxCpltCallback+0x98>)
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <HAL_UART_RxCpltCallback+0xb8>)
 8001202:	f002 fdaa 	bl	8003d5a <HAL_UART_Receive_IT>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40013800 	.word	0x40013800
 8001214:	20000004 	.word	0x20000004
 8001218:	20000470 	.word	0x20000470
 800121c:	2000000b 	.word	0x2000000b
 8001220:	20000012 	.word	0x20000012
 8001224:	20000498 	.word	0x20000498
 8001228:	20000000 	.word	0x20000000
 800122c:	40004400 	.word	0x40004400
 8001230:	20000468 	.word	0x20000468
 8001234:	20000314 	.word	0x20000314
 8001238:	200002d0 	.word	0x200002d0

0800123c <write_read_Temperature>:

/**************************** LOOPING FUNCTIONS ****************************/
/*-------WRITE & READ TEMPERATURE FUNCTION-------*/

void write_read_Temperature(){
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

	  Presence = DS18B20_Start();
 8001240:	f7ff fee0 	bl	8001004 <DS18B20_Start>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <write_read_Temperature+0x9c>)
 800124a:	701a      	strb	r2, [r3, #0]
	  HAL_Delay (1);
 800124c:	2001      	movs	r0, #1
 800124e:	f001 f889 	bl	8002364 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 8001252:	20cc      	movs	r0, #204	; 0xcc
 8001254:	f7ff ff06 	bl	8001064 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 8001258:	2044      	movs	r0, #68	; 0x44
 800125a:	f7ff ff03 	bl	8001064 <DS18B20_Write>
	  HAL_Delay (800);
 800125e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001262:	f001 f87f 	bl	8002364 <HAL_Delay>

	  Presence = DS18B20_Start();
 8001266:	f7ff fecd 	bl	8001004 <DS18B20_Start>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <write_read_Temperature+0x9c>)
 8001270:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1);
 8001272:	2001      	movs	r0, #1
 8001274:	f001 f876 	bl	8002364 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 8001278:	20cc      	movs	r0, #204	; 0xcc
 800127a:	f7ff fef3 	bl	8001064 <DS18B20_Write>
	  DS18B20_Write (0xBE);  // Read Scratch-pad
 800127e:	20be      	movs	r0, #190	; 0xbe
 8001280:	f7ff fef0 	bl	8001064 <DS18B20_Write>

	  Temp_byte1 = DS18B20_Read();
 8001284:	f7ff ff34 	bl	80010f0 <DS18B20_Read>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <write_read_Temperature+0xa0>)
 800128e:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DS18B20_Read();
 8001290:	f7ff ff2e 	bl	80010f0 <DS18B20_Read>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <write_read_Temperature+0xa4>)
 800129a:	701a      	strb	r2, [r3, #0]

	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <write_read_Temperature+0xa4>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <write_read_Temperature+0xa0>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <write_read_Temperature+0xa8>)
 80012b2:	801a      	strh	r2, [r3, #0]
	  TEMPERATURE = (float)TEMP/16;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <write_read_Temperature+0xa8>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fca5 	bl	8000c08 <__aeabi_ui2f>
 80012be:	4603      	mov	r3, r0
 80012c0:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fdab 	bl	8000e20 <__aeabi_fdiv>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <write_read_Temperature+0xac>)
 80012d0:	601a      	str	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000494 	.word	0x20000494
 80012dc:	2000048c 	.word	0x2000048c
 80012e0:	2000048d 	.word	0x2000048d
 80012e4:	2000048e 	.word	0x2000048e
 80012e8:	20000490 	.word	0x20000490

080012ec <transmit_Data_to_DTU>:

/*-------TRANSMITTING DATA TO DTU FUNCTION-------*/

void transmit_Data_to_DTU(){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af02      	add	r7, sp, #8

	for(int i = 0; i < sizeof(TX_BUFF_TO_DTU); i++){
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e007      	b.n	8001308 <transmit_Data_to_DTU+0x1c>
		TX_BUFF_TO_DTU[i] = '\0';
 80012f8:	4a88      	ldr	r2, [pc, #544]	; (800151c <transmit_Data_to_DTU+0x230>)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	4413      	add	r3, r2
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(TX_BUFF_TO_DTU); i++){
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b18      	cmp	r3, #24
 800130c:	d9f4      	bls.n	80012f8 <transmit_Data_to_DTU+0xc>
	}
	if (strcmp(RX_DATA_FROM_STC, DROP_SUCCESS) == 0){
 800130e:	4984      	ldr	r1, [pc, #528]	; (8001520 <transmit_Data_to_DTU+0x234>)
 8001310:	4884      	ldr	r0, [pc, #528]	; (8001524 <transmit_Data_to_DTU+0x238>)
 8001312:	f7fe ff1d 	bl	8000150 <strcmp>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d11c      	bne.n	8001356 <transmit_Data_to_DTU+0x6a>

		sprintf(TX_BUFF_TO_DTU, "sglsuccess_%.2f_%d_1_1_", TEMPERATURE, DOOR_STATUS);
 800131c:	4b82      	ldr	r3, [pc, #520]	; (8001528 <transmit_Data_to_DTU+0x23c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f88b 	bl	800043c <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4980      	ldr	r1, [pc, #512]	; (800152c <transmit_Data_to_DTU+0x240>)
 800132c:	6809      	ldr	r1, [r1, #0]
 800132e:	9100      	str	r1, [sp, #0]
 8001330:	497f      	ldr	r1, [pc, #508]	; (8001530 <transmit_Data_to_DTU+0x244>)
 8001332:	487a      	ldr	r0, [pc, #488]	; (800151c <transmit_Data_to_DTU+0x230>)
 8001334:	f003 ff24 	bl	8005180 <siprintf>
		for(int i = 0; i < sizeof(RX_DATA_FROM_STC); i++){
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	e007      	b.n	800134e <transmit_Data_to_DTU+0x62>
			RX_DATA_FROM_STC[i] = '\0';
 800133e:	4a79      	ldr	r2, [pc, #484]	; (8001524 <transmit_Data_to_DTU+0x238>)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4413      	add	r3, r2
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < sizeof(RX_DATA_FROM_STC); i++){
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	3301      	adds	r3, #1
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	2b04      	cmp	r3, #4
 8001352:	d9f4      	bls.n	800133e <transmit_Data_to_DTU+0x52>
 8001354:	e0d6      	b.n	8001504 <transmit_Data_to_DTU+0x218>
		}
	}
	else if (strcmp(RX_DATA_FROM_STC, DROP_NOT_SUCCESS) == 0){
 8001356:	4977      	ldr	r1, [pc, #476]	; (8001534 <transmit_Data_to_DTU+0x248>)
 8001358:	4872      	ldr	r0, [pc, #456]	; (8001524 <transmit_Data_to_DTU+0x238>)
 800135a:	f7fe fef9 	bl	8000150 <strcmp>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d11c      	bne.n	800139e <transmit_Data_to_DTU+0xb2>

		sprintf(TX_BUFF_TO_DTU, "sglfail_%.2f_%d_0_1_", TEMPERATURE, DOOR_STATUS);
 8001364:	4b70      	ldr	r3, [pc, #448]	; (8001528 <transmit_Data_to_DTU+0x23c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f867 	bl	800043c <__aeabi_f2d>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	496e      	ldr	r1, [pc, #440]	; (800152c <transmit_Data_to_DTU+0x240>)
 8001374:	6809      	ldr	r1, [r1, #0]
 8001376:	9100      	str	r1, [sp, #0]
 8001378:	496f      	ldr	r1, [pc, #444]	; (8001538 <transmit_Data_to_DTU+0x24c>)
 800137a:	4868      	ldr	r0, [pc, #416]	; (800151c <transmit_Data_to_DTU+0x230>)
 800137c:	f003 ff00 	bl	8005180 <siprintf>
		for(int i = 0; i < sizeof(RX_DATA_FROM_STC); i++){
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e007      	b.n	8001396 <transmit_Data_to_DTU+0xaa>
			RX_DATA_FROM_STC[i] = '\0';
 8001386:	4a67      	ldr	r2, [pc, #412]	; (8001524 <transmit_Data_to_DTU+0x238>)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < sizeof(RX_DATA_FROM_STC); i++){
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3301      	adds	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2b04      	cmp	r3, #4
 800139a:	d9f4      	bls.n	8001386 <transmit_Data_to_DTU+0x9a>
 800139c:	e0b2      	b.n	8001504 <transmit_Data_to_DTU+0x218>
		}
	}
	else if (strcmp(RX_DATA_FROM_STC, MOTOR_ERROR) == 0){
 800139e:	4967      	ldr	r1, [pc, #412]	; (800153c <transmit_Data_to_DTU+0x250>)
 80013a0:	4860      	ldr	r0, [pc, #384]	; (8001524 <transmit_Data_to_DTU+0x238>)
 80013a2:	f7fe fed5 	bl	8000150 <strcmp>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d11c      	bne.n	80013e6 <transmit_Data_to_DTU+0xfa>

		sprintf(TX_BUFF_TO_DTU, "sglmotorerror_%.2f_%d_0_0_", TEMPERATURE, DOOR_STATUS);
 80013ac:	4b5e      	ldr	r3, [pc, #376]	; (8001528 <transmit_Data_to_DTU+0x23c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f843 	bl	800043c <__aeabi_f2d>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	495c      	ldr	r1, [pc, #368]	; (800152c <transmit_Data_to_DTU+0x240>)
 80013bc:	6809      	ldr	r1, [r1, #0]
 80013be:	9100      	str	r1, [sp, #0]
 80013c0:	495f      	ldr	r1, [pc, #380]	; (8001540 <transmit_Data_to_DTU+0x254>)
 80013c2:	4856      	ldr	r0, [pc, #344]	; (800151c <transmit_Data_to_DTU+0x230>)
 80013c4:	f003 fedc 	bl	8005180 <siprintf>
		for(int i = 0; i < sizeof(RX_DATA_FROM_STC); i++){
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	e007      	b.n	80013de <transmit_Data_to_DTU+0xf2>
			RX_DATA_FROM_STC[i] = '\0';
 80013ce:	4a55      	ldr	r2, [pc, #340]	; (8001524 <transmit_Data_to_DTU+0x238>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4413      	add	r3, r2
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < sizeof(RX_DATA_FROM_STC); i++){
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	3301      	adds	r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d9f4      	bls.n	80013ce <transmit_Data_to_DTU+0xe2>
 80013e4:	e08e      	b.n	8001504 <transmit_Data_to_DTU+0x218>
		}
	}
	else if (strcmp(RX_DATA_FROM_STC, TEST_MOTOR_NORMAL) == 0){
 80013e6:	4957      	ldr	r1, [pc, #348]	; (8001544 <transmit_Data_to_DTU+0x258>)
 80013e8:	484e      	ldr	r0, [pc, #312]	; (8001524 <transmit_Data_to_DTU+0x238>)
 80013ea:	f7fe feb1 	bl	8000150 <strcmp>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d11c      	bne.n	800142e <transmit_Data_to_DTU+0x142>

		sprintf(TX_BUFF_TO_DTU, "tstsuccess_%.2f_%d_0_1_", TEMPERATURE, DOOR_STATUS);
 80013f4:	4b4c      	ldr	r3, [pc, #304]	; (8001528 <transmit_Data_to_DTU+0x23c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f81f 	bl	800043c <__aeabi_f2d>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	494a      	ldr	r1, [pc, #296]	; (800152c <transmit_Data_to_DTU+0x240>)
 8001404:	6809      	ldr	r1, [r1, #0]
 8001406:	9100      	str	r1, [sp, #0]
 8001408:	494f      	ldr	r1, [pc, #316]	; (8001548 <transmit_Data_to_DTU+0x25c>)
 800140a:	4844      	ldr	r0, [pc, #272]	; (800151c <transmit_Data_to_DTU+0x230>)
 800140c:	f003 feb8 	bl	8005180 <siprintf>
		for(int i = 0; i < sizeof(RX_DATA_FROM_STC); i++){
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	e007      	b.n	8001426 <transmit_Data_to_DTU+0x13a>
			RX_DATA_FROM_STC[i] = '\0';
 8001416:	4a43      	ldr	r2, [pc, #268]	; (8001524 <transmit_Data_to_DTU+0x238>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < sizeof(RX_DATA_FROM_STC); i++){
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3301      	adds	r3, #1
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d9f4      	bls.n	8001416 <transmit_Data_to_DTU+0x12a>
 800142c:	e06a      	b.n	8001504 <transmit_Data_to_DTU+0x218>
		}
	}
	else if (strcmp(RX_DATA_FROM_STC, TEST_MOTOR_ERROR) == 0){
 800142e:	4947      	ldr	r1, [pc, #284]	; (800154c <transmit_Data_to_DTU+0x260>)
 8001430:	483c      	ldr	r0, [pc, #240]	; (8001524 <transmit_Data_to_DTU+0x238>)
 8001432:	f7fe fe8d 	bl	8000150 <strcmp>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d11c      	bne.n	8001476 <transmit_Data_to_DTU+0x18a>

		sprintf(TX_BUFF_TO_DTU, "tstmotorerror_%.2f_%d_0_0_", TEMPERATURE, DOOR_STATUS);
 800143c:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <transmit_Data_to_DTU+0x23c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7fe fffb 	bl	800043c <__aeabi_f2d>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4938      	ldr	r1, [pc, #224]	; (800152c <transmit_Data_to_DTU+0x240>)
 800144c:	6809      	ldr	r1, [r1, #0]
 800144e:	9100      	str	r1, [sp, #0]
 8001450:	493f      	ldr	r1, [pc, #252]	; (8001550 <transmit_Data_to_DTU+0x264>)
 8001452:	4832      	ldr	r0, [pc, #200]	; (800151c <transmit_Data_to_DTU+0x230>)
 8001454:	f003 fe94 	bl	8005180 <siprintf>
		for(int i = 0; i < sizeof(RX_DATA_FROM_STC); i++){
 8001458:	2300      	movs	r3, #0
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	e007      	b.n	800146e <transmit_Data_to_DTU+0x182>
			RX_DATA_FROM_STC[i] = '\0';
 800145e:	4a31      	ldr	r2, [pc, #196]	; (8001524 <transmit_Data_to_DTU+0x238>)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4413      	add	r3, r2
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < sizeof(RX_DATA_FROM_STC); i++){
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2b04      	cmp	r3, #4
 8001472:	d9f4      	bls.n	800145e <transmit_Data_to_DTU+0x172>
 8001474:	e046      	b.n	8001504 <transmit_Data_to_DTU+0x218>
		}
	}
	else if (strncmp(RX_BUFF_FROM_DTU, SENSOR_REQUEST_STRING[0], 7) == 0){
 8001476:	2207      	movs	r2, #7
 8001478:	4936      	ldr	r1, [pc, #216]	; (8001554 <transmit_Data_to_DTU+0x268>)
 800147a:	4837      	ldr	r0, [pc, #220]	; (8001558 <transmit_Data_to_DTU+0x26c>)
 800147c:	f003 fea0 	bl	80051c0 <strncmp>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10b      	bne.n	800149e <transmit_Data_to_DTU+0x1b2>

		sprintf(TX_BUFF_TO_DTU, "tmpchck_%.2f_0_0_0_", TEMPERATURE);
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <transmit_Data_to_DTU+0x23c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe ffd6 	bl	800043c <__aeabi_f2d>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4931      	ldr	r1, [pc, #196]	; (800155c <transmit_Data_to_DTU+0x270>)
 8001496:	4821      	ldr	r0, [pc, #132]	; (800151c <transmit_Data_to_DTU+0x230>)
 8001498:	f003 fe72 	bl	8005180 <siprintf>
 800149c:	e032      	b.n	8001504 <transmit_Data_to_DTU+0x218>
	}
	else if (strncmp(RX_BUFF_FROM_DTU, SENSOR_REQUEST_STRING[1], 7) == 0){
 800149e:	2207      	movs	r2, #7
 80014a0:	492f      	ldr	r1, [pc, #188]	; (8001560 <transmit_Data_to_DTU+0x274>)
 80014a2:	482d      	ldr	r0, [pc, #180]	; (8001558 <transmit_Data_to_DTU+0x26c>)
 80014a4:	f003 fe8c 	bl	80051c0 <strncmp>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d107      	bne.n	80014be <transmit_Data_to_DTU+0x1d2>

		sprintf(TX_BUFF_TO_DTU, "dorchck_0_%d_0_0_", DOOR_STATUS);
 80014ae:	4b1f      	ldr	r3, [pc, #124]	; (800152c <transmit_Data_to_DTU+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	492b      	ldr	r1, [pc, #172]	; (8001564 <transmit_Data_to_DTU+0x278>)
 80014b6:	4819      	ldr	r0, [pc, #100]	; (800151c <transmit_Data_to_DTU+0x230>)
 80014b8:	f003 fe62 	bl	8005180 <siprintf>
 80014bc:	e022      	b.n	8001504 <transmit_Data_to_DTU+0x218>
	}
	else if (strncmp(RX_BUFF_FROM_DTU, SENSOR_REQUEST_STRING[2], 7) == 0){
 80014be:	2207      	movs	r2, #7
 80014c0:	4929      	ldr	r1, [pc, #164]	; (8001568 <transmit_Data_to_DTU+0x27c>)
 80014c2:	4825      	ldr	r0, [pc, #148]	; (8001558 <transmit_Data_to_DTU+0x26c>)
 80014c4:	f003 fe7c 	bl	80051c0 <strncmp>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10e      	bne.n	80014ec <transmit_Data_to_DTU+0x200>

		sprintf(TX_BUFF_TO_DTU, "stachck_%.2f_%d_0_0_", TEMPERATURE, DOOR_STATUS);
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <transmit_Data_to_DTU+0x23c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe ffb2 	bl	800043c <__aeabi_f2d>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4913      	ldr	r1, [pc, #76]	; (800152c <transmit_Data_to_DTU+0x240>)
 80014de:	6809      	ldr	r1, [r1, #0]
 80014e0:	9100      	str	r1, [sp, #0]
 80014e2:	4922      	ldr	r1, [pc, #136]	; (800156c <transmit_Data_to_DTU+0x280>)
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <transmit_Data_to_DTU+0x230>)
 80014e6:	f003 fe4b 	bl	8005180 <siprintf>
 80014ea:	e00b      	b.n	8001504 <transmit_Data_to_DTU+0x218>
	}
	else if(DOOR_STATUS == 0 && tx_doorOpen_to_DTU_enable == 1){
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <transmit_Data_to_DTU+0x240>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d107      	bne.n	8001504 <transmit_Data_to_DTU+0x218>
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <transmit_Data_to_DTU+0x284>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d103      	bne.n	8001504 <transmit_Data_to_DTU+0x218>

		sprintf(TX_BUFF_TO_DTU, "DOOR OPEN");
 80014fc:	491d      	ldr	r1, [pc, #116]	; (8001574 <transmit_Data_to_DTU+0x288>)
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <transmit_Data_to_DTU+0x230>)
 8001500:	f003 fe3e 	bl	8005180 <siprintf>
	}
	else{

	}

	HAL_UART_Transmit_IT(&huart1, TX_BUFF_TO_DTU, sizeof(TX_BUFF_TO_DTU));
 8001504:	2219      	movs	r2, #25
 8001506:	4905      	ldr	r1, [pc, #20]	; (800151c <transmit_Data_to_DTU+0x230>)
 8001508:	481b      	ldr	r0, [pc, #108]	; (8001578 <transmit_Data_to_DTU+0x28c>)
 800150a:	f002 fbe2 	bl	8003cd2 <HAL_UART_Transmit_IT>
	tx_doorOpen_to_DTU_enable = 1;
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <transmit_Data_to_DTU+0x284>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]

}
 8001514:	bf00      	nop
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000049c 	.word	0x2000049c
 8001520:	20000068 	.word	0x20000068
 8001524:	20000468 	.word	0x20000468
 8001528:	20000490 	.word	0x20000490
 800152c:	20000484 	.word	0x20000484
 8001530:	08007778 	.word	0x08007778
 8001534:	20000070 	.word	0x20000070
 8001538:	08007790 	.word	0x08007790
 800153c:	20000078 	.word	0x20000078
 8001540:	080077a8 	.word	0x080077a8
 8001544:	20000080 	.word	0x20000080
 8001548:	080077c4 	.word	0x080077c4
 800154c:	20000088 	.word	0x20000088
 8001550:	080077dc 	.word	0x080077dc
 8001554:	20000004 	.word	0x20000004
 8001558:	20000470 	.word	0x20000470
 800155c:	080077f8 	.word	0x080077f8
 8001560:	2000000b 	.word	0x2000000b
 8001564:	0800780c 	.word	0x0800780c
 8001568:	20000012 	.word	0x20000012
 800156c:	08007820 	.word	0x08007820
 8001570:	20000000 	.word	0x20000000
 8001574:	08007838 	.word	0x08007838
 8001578:	200002d0 	.word	0x200002d0

0800157c <split_Command_from_DTU>:

/**************************** FUNCTIONS THAT RUN IN UART CALLBACK FUNCTIONS ****************************/

void split_Command_from_DTU(){
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0

	char *token;
	int j = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
	token = strtok(RX_BUFF_FROM_DTU, "_");
 8001586:	490f      	ldr	r1, [pc, #60]	; (80015c4 <split_Command_from_DTU+0x48>)
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <split_Command_from_DTU+0x4c>)
 800158a:	f003 fe2d 	bl	80051e8 <strtok>
 800158e:	6078      	str	r0, [r7, #4]

	while( token != NULL ) {
 8001590:	e00f      	b.n	80015b2 <split_Command_from_DTU+0x36>
		printf( " %s\n", token );
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <split_Command_from_DTU+0x50>)
 8001596:	f003 fddb 	bl	8005150 <iprintf>
		SPLIT_RX_BUFF_FROM_DTU[j++] = token;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	603a      	str	r2, [r7, #0]
 80015a0:	490b      	ldr	r1, [pc, #44]	; (80015d0 <split_Command_from_DTU+0x54>)
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		token = strtok(NULL, "_");
 80015a8:	4906      	ldr	r1, [pc, #24]	; (80015c4 <split_Command_from_DTU+0x48>)
 80015aa:	2000      	movs	r0, #0
 80015ac:	f003 fe1c 	bl	80051e8 <strtok>
 80015b0:	6078      	str	r0, [r7, #4]
	while( token != NULL ) {
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1ec      	bne.n	8001592 <split_Command_from_DTU+0x16>
	}


}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	08007844 	.word	0x08007844
 80015c8:	20000470 	.word	0x20000470
 80015cc:	08007848 	.word	0x08007848
 80015d0:	20000478 	.word	0x20000478

080015d4 <concat_Command_for_STC>:


void concat_Command_for_STC(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0

	/************* Set First & End Hex Byte *************/
	TX_COMMAND_TO_STC[0] = STX;
 80015d8:	4b84      	ldr	r3, [pc, #528]	; (80017ec <concat_Command_for_STC+0x218>)
 80015da:	881a      	ldrh	r2, [r3, #0]
 80015dc:	4b84      	ldr	r3, [pc, #528]	; (80017f0 <concat_Command_for_STC+0x21c>)
 80015de:	801a      	strh	r2, [r3, #0]
	TX_COMMAND_TO_STC[5] = ENX;
 80015e0:	4b84      	ldr	r3, [pc, #528]	; (80017f4 <concat_Command_for_STC+0x220>)
 80015e2:	881a      	ldrh	r2, [r3, #0]
 80015e4:	4b82      	ldr	r3, [pc, #520]	; (80017f0 <concat_Command_for_STC+0x21c>)
 80015e6:	815a      	strh	r2, [r3, #10]

	/************* Set Second & Fifth Hex Byte *************/

	if(strncmp(SPLIT_RX_BUFF_FROM_DTU[0], MOTOR_FIRST_STRING[0], 3) == 0){
 80015e8:	4b83      	ldr	r3, [pc, #524]	; (80017f8 <concat_Command_for_STC+0x224>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2203      	movs	r2, #3
 80015ee:	4983      	ldr	r1, [pc, #524]	; (80017fc <concat_Command_for_STC+0x228>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 fde5 	bl	80051c0 <strncmp>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d108      	bne.n	800160e <concat_Command_for_STC+0x3a>
		TX_COMMAND_TO_STC[1] = SINGLE_MOTOR_DISPENSING;// ------------------------>single motor dispensing = 0x02
 80015fc:	4b80      	ldr	r3, [pc, #512]	; (8001800 <concat_Command_for_STC+0x22c>)
 80015fe:	881a      	ldrh	r2, [r3, #0]
 8001600:	4b7b      	ldr	r3, [pc, #492]	; (80017f0 <concat_Command_for_STC+0x21c>)
 8001602:	805a      	strh	r2, [r3, #2]
		TX_COMMAND_TO_STC[4] = SINGLE_MOTOR_DISPENSING_MODE;// ------------------->spiral cargo mode with drop sensor = 0x01
 8001604:	4b7f      	ldr	r3, [pc, #508]	; (8001804 <concat_Command_for_STC+0x230>)
 8001606:	881a      	ldrh	r2, [r3, #0]
 8001608:	4b79      	ldr	r3, [pc, #484]	; (80017f0 <concat_Command_for_STC+0x21c>)
 800160a:	811a      	strh	r2, [r3, #8]
 800160c:	e011      	b.n	8001632 <concat_Command_for_STC+0x5e>
	}
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[0], MOTOR_FIRST_STRING[1], 3) == 0){
 800160e:	4b7a      	ldr	r3, [pc, #488]	; (80017f8 <concat_Command_for_STC+0x224>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2203      	movs	r2, #3
 8001614:	497c      	ldr	r1, [pc, #496]	; (8001808 <concat_Command_for_STC+0x234>)
 8001616:	4618      	mov	r0, r3
 8001618:	f003 fdd2 	bl	80051c0 <strncmp>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d107      	bne.n	8001632 <concat_Command_for_STC+0x5e>
	    TX_COMMAND_TO_STC[1] = TEST_MOTOR_FUNCTION;// ---------------------------->test motor function = 0x03
 8001622:	4b7a      	ldr	r3, [pc, #488]	; (800180c <concat_Command_for_STC+0x238>)
 8001624:	881a      	ldrh	r2, [r3, #0]
 8001626:	4b72      	ldr	r3, [pc, #456]	; (80017f0 <concat_Command_for_STC+0x21c>)
 8001628:	805a      	strh	r2, [r3, #2]
	    TX_COMMAND_TO_STC[4] = TEST_MOTOR_FUNCTION_MODE;// ----------------------->test if spiral cargo motor not connected = 0x11
 800162a:	4b79      	ldr	r3, [pc, #484]	; (8001810 <concat_Command_for_STC+0x23c>)
 800162c:	881a      	ldrh	r2, [r3, #0]
 800162e:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <concat_Command_for_STC+0x21c>)
 8001630:	811a      	strh	r2, [r3, #8]
	else{

	}

	/************* Set Third Hex Byte (Motor MOTOR_ROW)*************/
	if(strncmp(SPLIT_RX_BUFF_FROM_DTU[1], MOTOR_SECOND_STRING[0], 1) == 0){
 8001632:	4b71      	ldr	r3, [pc, #452]	; (80017f8 <concat_Command_for_STC+0x224>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	4b76      	ldr	r3, [pc, #472]	; (8001814 <concat_Command_for_STC+0x240>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d104      	bne.n	800164c <concat_Command_for_STC+0x78>
		TX_COMMAND_TO_STC[2] = MOTOR_ROW[0];// ------------------------------------------>A = 0x06
 8001642:	4b75      	ldr	r3, [pc, #468]	; (8001818 <concat_Command_for_STC+0x244>)
 8001644:	881a      	ldrh	r2, [r3, #0]
 8001646:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <concat_Command_for_STC+0x21c>)
 8001648:	809a      	strh	r2, [r3, #4]
 800164a:	e03f      	b.n	80016cc <concat_Command_for_STC+0xf8>
	}
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[1], MOTOR_SECOND_STRING[1], 1) == 0){
 800164c:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <concat_Command_for_STC+0x224>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	781a      	ldrb	r2, [r3, #0]
 8001652:	4b70      	ldr	r3, [pc, #448]	; (8001814 <concat_Command_for_STC+0x240>)
 8001654:	785b      	ldrb	r3, [r3, #1]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d104      	bne.n	8001666 <concat_Command_for_STC+0x92>
		TX_COMMAND_TO_STC[2] = MOTOR_ROW[1];// ------------------------------------------>B = 0x05
 800165c:	4b6e      	ldr	r3, [pc, #440]	; (8001818 <concat_Command_for_STC+0x244>)
 800165e:	885a      	ldrh	r2, [r3, #2]
 8001660:	4b63      	ldr	r3, [pc, #396]	; (80017f0 <concat_Command_for_STC+0x21c>)
 8001662:	809a      	strh	r2, [r3, #4]
 8001664:	e032      	b.n	80016cc <concat_Command_for_STC+0xf8>
	}
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[1], MOTOR_SECOND_STRING[2], 1) == 0){
 8001666:	4b64      	ldr	r3, [pc, #400]	; (80017f8 <concat_Command_for_STC+0x224>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	781a      	ldrb	r2, [r3, #0]
 800166c:	4b69      	ldr	r3, [pc, #420]	; (8001814 <concat_Command_for_STC+0x240>)
 800166e:	789b      	ldrb	r3, [r3, #2]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d104      	bne.n	8001680 <concat_Command_for_STC+0xac>
		TX_COMMAND_TO_STC[2] = MOTOR_ROW[2];// ------------------------------------------>C = 0x04
 8001676:	4b68      	ldr	r3, [pc, #416]	; (8001818 <concat_Command_for_STC+0x244>)
 8001678:	889a      	ldrh	r2, [r3, #4]
 800167a:	4b5d      	ldr	r3, [pc, #372]	; (80017f0 <concat_Command_for_STC+0x21c>)
 800167c:	809a      	strh	r2, [r3, #4]
 800167e:	e025      	b.n	80016cc <concat_Command_for_STC+0xf8>
	}
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[1], MOTOR_SECOND_STRING[3], 1) == 0){
 8001680:	4b5d      	ldr	r3, [pc, #372]	; (80017f8 <concat_Command_for_STC+0x224>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	781a      	ldrb	r2, [r3, #0]
 8001686:	4b63      	ldr	r3, [pc, #396]	; (8001814 <concat_Command_for_STC+0x240>)
 8001688:	78db      	ldrb	r3, [r3, #3]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d104      	bne.n	800169a <concat_Command_for_STC+0xc6>
		TX_COMMAND_TO_STC[2] = MOTOR_ROW[3];// ------------------------------------------>D = 0x03
 8001690:	4b61      	ldr	r3, [pc, #388]	; (8001818 <concat_Command_for_STC+0x244>)
 8001692:	88da      	ldrh	r2, [r3, #6]
 8001694:	4b56      	ldr	r3, [pc, #344]	; (80017f0 <concat_Command_for_STC+0x21c>)
 8001696:	809a      	strh	r2, [r3, #4]
 8001698:	e018      	b.n	80016cc <concat_Command_for_STC+0xf8>
	}
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[1], MOTOR_SECOND_STRING[4], 1) == 0){
 800169a:	4b57      	ldr	r3, [pc, #348]	; (80017f8 <concat_Command_for_STC+0x224>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	781a      	ldrb	r2, [r3, #0]
 80016a0:	4b5c      	ldr	r3, [pc, #368]	; (8001814 <concat_Command_for_STC+0x240>)
 80016a2:	791b      	ldrb	r3, [r3, #4]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d104      	bne.n	80016b4 <concat_Command_for_STC+0xe0>
		TX_COMMAND_TO_STC[2] = MOTOR_ROW[4];// ------------------------------------------>E = 0x02
 80016aa:	4b5b      	ldr	r3, [pc, #364]	; (8001818 <concat_Command_for_STC+0x244>)
 80016ac:	891a      	ldrh	r2, [r3, #8]
 80016ae:	4b50      	ldr	r3, [pc, #320]	; (80017f0 <concat_Command_for_STC+0x21c>)
 80016b0:	809a      	strh	r2, [r3, #4]
 80016b2:	e00b      	b.n	80016cc <concat_Command_for_STC+0xf8>
	}
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[1], MOTOR_SECOND_STRING[5], 1) == 0){
 80016b4:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <concat_Command_for_STC+0x224>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	781a      	ldrb	r2, [r3, #0]
 80016ba:	4b56      	ldr	r3, [pc, #344]	; (8001814 <concat_Command_for_STC+0x240>)
 80016bc:	795b      	ldrb	r3, [r3, #5]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d103      	bne.n	80016cc <concat_Command_for_STC+0xf8>
		TX_COMMAND_TO_STC[2] = MOTOR_ROW[5];// ------------------------------------------>F = 0x01
 80016c4:	4b54      	ldr	r3, [pc, #336]	; (8001818 <concat_Command_for_STC+0x244>)
 80016c6:	895a      	ldrh	r2, [r3, #10]
 80016c8:	4b49      	ldr	r3, [pc, #292]	; (80017f0 <concat_Command_for_STC+0x21c>)
 80016ca:	809a      	strh	r2, [r3, #4]

	}

	/************* Set Fourth Hex Byte (Motor MOTOR_COLUMN)*************/

	if(strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[0], 1) == 0){
 80016cc:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <concat_Command_for_STC+0x224>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	781a      	ldrb	r2, [r3, #0]
 80016d2:	4b52      	ldr	r3, [pc, #328]	; (800181c <concat_Command_for_STC+0x248>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d104      	bne.n	80016e6 <concat_Command_for_STC+0x112>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[0];// ------------------------------------------>1 = 0x0A
 80016dc:	4b50      	ldr	r3, [pc, #320]	; (8001820 <concat_Command_for_STC+0x24c>)
 80016de:	881a      	ldrh	r2, [r3, #0]
 80016e0:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <concat_Command_for_STC+0x21c>)
 80016e2:	80da      	strh	r2, [r3, #6]
	}
	else{

	}

}
 80016e4:	e0d1      	b.n	800188a <concat_Command_for_STC+0x2b6>
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[1], 1) == 0){
 80016e6:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <concat_Command_for_STC+0x224>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	781a      	ldrb	r2, [r3, #0]
 80016ec:	4b4b      	ldr	r3, [pc, #300]	; (800181c <concat_Command_for_STC+0x248>)
 80016ee:	785b      	ldrb	r3, [r3, #1]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d104      	bne.n	8001700 <concat_Command_for_STC+0x12c>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[1];// ------------------------------------------>2 = 0x09
 80016f6:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <concat_Command_for_STC+0x24c>)
 80016f8:	885a      	ldrh	r2, [r3, #2]
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <concat_Command_for_STC+0x21c>)
 80016fc:	80da      	strh	r2, [r3, #6]
}
 80016fe:	e0c4      	b.n	800188a <concat_Command_for_STC+0x2b6>
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[2], 1) == 0){
 8001700:	4b3d      	ldr	r3, [pc, #244]	; (80017f8 <concat_Command_for_STC+0x224>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	4b45      	ldr	r3, [pc, #276]	; (800181c <concat_Command_for_STC+0x248>)
 8001708:	789b      	ldrb	r3, [r3, #2]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b00      	cmp	r3, #0
 800170e:	d104      	bne.n	800171a <concat_Command_for_STC+0x146>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[2];// ------------------------------------------>3 = 0x08
 8001710:	4b43      	ldr	r3, [pc, #268]	; (8001820 <concat_Command_for_STC+0x24c>)
 8001712:	889a      	ldrh	r2, [r3, #4]
 8001714:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <concat_Command_for_STC+0x21c>)
 8001716:	80da      	strh	r2, [r3, #6]
}
 8001718:	e0b7      	b.n	800188a <concat_Command_for_STC+0x2b6>
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[3], 1) == 0){
 800171a:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <concat_Command_for_STC+0x224>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	781a      	ldrb	r2, [r3, #0]
 8001720:	4b3e      	ldr	r3, [pc, #248]	; (800181c <concat_Command_for_STC+0x248>)
 8001722:	78db      	ldrb	r3, [r3, #3]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d104      	bne.n	8001734 <concat_Command_for_STC+0x160>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[3];// ------------------------------------------>4 = 0x07
 800172a:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <concat_Command_for_STC+0x24c>)
 800172c:	88da      	ldrh	r2, [r3, #6]
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <concat_Command_for_STC+0x21c>)
 8001730:	80da      	strh	r2, [r3, #6]
}
 8001732:	e0aa      	b.n	800188a <concat_Command_for_STC+0x2b6>
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[4], 1) == 0){
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <concat_Command_for_STC+0x224>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	4b38      	ldr	r3, [pc, #224]	; (800181c <concat_Command_for_STC+0x248>)
 800173c:	791b      	ldrb	r3, [r3, #4]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d104      	bne.n	800174e <concat_Command_for_STC+0x17a>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[4];// ------------------------------------------>5 = 0x06
 8001744:	4b36      	ldr	r3, [pc, #216]	; (8001820 <concat_Command_for_STC+0x24c>)
 8001746:	891a      	ldrh	r2, [r3, #8]
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <concat_Command_for_STC+0x21c>)
 800174a:	80da      	strh	r2, [r3, #6]
}
 800174c:	e09d      	b.n	800188a <concat_Command_for_STC+0x2b6>
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[5], 1) == 0){
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <concat_Command_for_STC+0x224>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	781a      	ldrb	r2, [r3, #0]
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <concat_Command_for_STC+0x248>)
 8001756:	795b      	ldrb	r3, [r3, #5]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d104      	bne.n	8001768 <concat_Command_for_STC+0x194>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[5];// ------------------------------------------>6 = 0x05
 800175e:	4b30      	ldr	r3, [pc, #192]	; (8001820 <concat_Command_for_STC+0x24c>)
 8001760:	895a      	ldrh	r2, [r3, #10]
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <concat_Command_for_STC+0x21c>)
 8001764:	80da      	strh	r2, [r3, #6]
}
 8001766:	e090      	b.n	800188a <concat_Command_for_STC+0x2b6>
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[6], 1) == 0){
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <concat_Command_for_STC+0x224>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <concat_Command_for_STC+0x248>)
 8001770:	799b      	ldrb	r3, [r3, #6]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d104      	bne.n	8001782 <concat_Command_for_STC+0x1ae>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[6];// ------------------------------------------>7 = 0x04
 8001778:	4b29      	ldr	r3, [pc, #164]	; (8001820 <concat_Command_for_STC+0x24c>)
 800177a:	899a      	ldrh	r2, [r3, #12]
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <concat_Command_for_STC+0x21c>)
 800177e:	80da      	strh	r2, [r3, #6]
}
 8001780:	e083      	b.n	800188a <concat_Command_for_STC+0x2b6>
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[7], 1) == 0){
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <concat_Command_for_STC+0x224>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	781a      	ldrb	r2, [r3, #0]
 8001788:	4b24      	ldr	r3, [pc, #144]	; (800181c <concat_Command_for_STC+0x248>)
 800178a:	79db      	ldrb	r3, [r3, #7]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d104      	bne.n	800179c <concat_Command_for_STC+0x1c8>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[7];// ------------------------------------------>8 = 0x03
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <concat_Command_for_STC+0x24c>)
 8001794:	89da      	ldrh	r2, [r3, #14]
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <concat_Command_for_STC+0x21c>)
 8001798:	80da      	strh	r2, [r3, #6]
}
 800179a:	e076      	b.n	800188a <concat_Command_for_STC+0x2b6>
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[8], 1) == 0){
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <concat_Command_for_STC+0x224>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	781a      	ldrb	r2, [r3, #0]
 80017a2:	4b1e      	ldr	r3, [pc, #120]	; (800181c <concat_Command_for_STC+0x248>)
 80017a4:	7a1b      	ldrb	r3, [r3, #8]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d104      	bne.n	80017b6 <concat_Command_for_STC+0x1e2>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[8];// ------------------------------------------>9 = 0x02
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <concat_Command_for_STC+0x24c>)
 80017ae:	8a1a      	ldrh	r2, [r3, #16]
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <concat_Command_for_STC+0x21c>)
 80017b2:	80da      	strh	r2, [r3, #6]
}
 80017b4:	e069      	b.n	800188a <concat_Command_for_STC+0x2b6>
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[9], 1) == 0){
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <concat_Command_for_STC+0x224>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <concat_Command_for_STC+0x248>)
 80017be:	7a5b      	ldrb	r3, [r3, #9]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d104      	bne.n	80017d0 <concat_Command_for_STC+0x1fc>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[9];// ------------------------------------------>A = 0x01 for AA / 10A
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <concat_Command_for_STC+0x24c>)
 80017c8:	8a5a      	ldrh	r2, [r3, #18]
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <concat_Command_for_STC+0x21c>)
 80017cc:	80da      	strh	r2, [r3, #6]
}
 80017ce:	e05c      	b.n	800188a <concat_Command_for_STC+0x2b6>
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[10], 1) == 0){
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <concat_Command_for_STC+0x224>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <concat_Command_for_STC+0x248>)
 80017d8:	7a9b      	ldrb	r3, [r3, #10]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d121      	bne.n	8001824 <concat_Command_for_STC+0x250>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[9];// ------------------------------------------>B = 0x01 for BB / 10B
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <concat_Command_for_STC+0x24c>)
 80017e2:	8a5a      	ldrh	r2, [r3, #18]
 80017e4:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <concat_Command_for_STC+0x21c>)
 80017e6:	80da      	strh	r2, [r3, #6]
}
 80017e8:	e04f      	b.n	800188a <concat_Command_for_STC+0x2b6>
 80017ea:	bf00      	nop
 80017ec:	2000003c 	.word	0x2000003c
 80017f0:	200004b8 	.word	0x200004b8
 80017f4:	2000003e 	.word	0x2000003e
 80017f8:	20000478 	.word	0x20000478
 80017fc:	2000001c 	.word	0x2000001c
 8001800:	20000040 	.word	0x20000040
 8001804:	20000042 	.word	0x20000042
 8001808:	2000001f 	.word	0x2000001f
 800180c:	20000044 	.word	0x20000044
 8001810:	20000046 	.word	0x20000046
 8001814:	20000024 	.word	0x20000024
 8001818:	20000048 	.word	0x20000048
 800181c:	2000002c 	.word	0x2000002c
 8001820:	20000054 	.word	0x20000054
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[11], 1) == 0){
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <concat_Command_for_STC+0x2bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <concat_Command_for_STC+0x2c0>)
 800182c:	7adb      	ldrb	r3, [r3, #11]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d104      	bne.n	800183e <concat_Command_for_STC+0x26a>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[9];// ------------------------------------------>C = 0x01 for CC / 10C
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <concat_Command_for_STC+0x2c4>)
 8001836:	8a5a      	ldrh	r2, [r3, #18]
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <concat_Command_for_STC+0x2c8>)
 800183a:	80da      	strh	r2, [r3, #6]
}
 800183c:	e025      	b.n	800188a <concat_Command_for_STC+0x2b6>
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[12], 1) == 0){
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <concat_Command_for_STC+0x2bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	4b13      	ldr	r3, [pc, #76]	; (8001894 <concat_Command_for_STC+0x2c0>)
 8001846:	7b1b      	ldrb	r3, [r3, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d104      	bne.n	8001858 <concat_Command_for_STC+0x284>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[9];// ------------------------------------------>D = 0x01 for DD / 10D
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <concat_Command_for_STC+0x2c4>)
 8001850:	8a5a      	ldrh	r2, [r3, #18]
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <concat_Command_for_STC+0x2c8>)
 8001854:	80da      	strh	r2, [r3, #6]
}
 8001856:	e018      	b.n	800188a <concat_Command_for_STC+0x2b6>
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[13], 1) == 0){
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <concat_Command_for_STC+0x2bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <concat_Command_for_STC+0x2c0>)
 8001860:	7b5b      	ldrb	r3, [r3, #13]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d104      	bne.n	8001872 <concat_Command_for_STC+0x29e>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[9];// ------------------------------------------>E = 0x01 for EE / 10E
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <concat_Command_for_STC+0x2c4>)
 800186a:	8a5a      	ldrh	r2, [r3, #18]
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <concat_Command_for_STC+0x2c8>)
 800186e:	80da      	strh	r2, [r3, #6]
}
 8001870:	e00b      	b.n	800188a <concat_Command_for_STC+0x2b6>
	else if (strncmp(SPLIT_RX_BUFF_FROM_DTU[2], MOTOR_THIRD_STRING[14], 1) == 0){
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <concat_Command_for_STC+0x2bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <concat_Command_for_STC+0x2c0>)
 800187a:	7b9b      	ldrb	r3, [r3, #14]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d103      	bne.n	800188a <concat_Command_for_STC+0x2b6>
		TX_COMMAND_TO_STC[3] = MOTOR_COLUMN[9];// ------------------------------------------>F = 0x01 for FF / 10F
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <concat_Command_for_STC+0x2c4>)
 8001884:	8a5a      	ldrh	r2, [r3, #18]
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <concat_Command_for_STC+0x2c8>)
 8001888:	80da      	strh	r2, [r3, #6]
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000478 	.word	0x20000478
 8001894:	2000002c 	.word	0x2000002c
 8001898:	20000054 	.word	0x20000054
 800189c:	200004b8 	.word	0x200004b8

080018a0 <send_Command_to_STC>:

void send_Command_to_STC(void){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0

	HAL_UART_Transmit_IT(&huart2, TX_COMMAND_TO_STC, 6);
 80018a6:	2206      	movs	r2, #6
 80018a8:	490b      	ldr	r1, [pc, #44]	; (80018d8 <send_Command_to_STC+0x38>)
 80018aa:	480c      	ldr	r0, [pc, #48]	; (80018dc <send_Command_to_STC+0x3c>)
 80018ac:	f002 fa11 	bl	8003cd2 <HAL_UART_Transmit_IT>
	for(int i = 0; i < sizeof(RX_BUFF_FROM_DTU); i++){
 80018b0:	2300      	movs	r3, #0
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	e007      	b.n	80018c6 <send_Command_to_STC+0x26>
		RX_BUFF_FROM_DTU[i] = '\0';
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <send_Command_to_STC+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4413      	add	r3, r2
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(RX_BUFF_FROM_DTU); i++){
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3301      	adds	r3, #1
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b06      	cmp	r3, #6
 80018ca:	d9f4      	bls.n	80018b6 <send_Command_to_STC+0x16>
	}
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200004b8 	.word	0x200004b8
 80018dc:	20000314 	.word	0x20000314
 80018e0:	20000470 	.word	0x20000470

080018e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e8:	f000 fcda 	bl	80022a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ec:	f000 f86a 	bl	80019c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f0:	f000 f988 	bl	8001c04 <MX_GPIO_Init>
  MX_DMA_Init();
 80018f4:	f000 f950 	bl	8001b98 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80018f8:	f000 f8fa 	bl	8001af0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80018fc:	f000 f922 	bl	8001b44 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001900:	f000 f8a6 	bl	8001a50 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001904:	4812      	ldr	r0, [pc, #72]	; (8001950 <main+0x6c>)
 8001906:	f001 ff33 	bl	8003770 <HAL_TIM_Base_Start>
  HAL_UART_Receive_DMA(&huart2, RX_DATA_FROM_STC, 5);
 800190a:	2205      	movs	r2, #5
 800190c:	4911      	ldr	r1, [pc, #68]	; (8001954 <main+0x70>)
 800190e:	4812      	ldr	r0, [pc, #72]	; (8001958 <main+0x74>)
 8001910:	f002 fa53 	bl	8003dba <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart1,RX_BUFF_FROM_DTU, 7);
 8001914:	2207      	movs	r2, #7
 8001916:	4911      	ldr	r1, [pc, #68]	; (800195c <main+0x78>)
 8001918:	4811      	ldr	r0, [pc, #68]	; (8001960 <main+0x7c>)
 800191a:	f002 fa1e 	bl	8003d5a <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(tx_to_DTU_enable == 1){
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <main+0x80>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d104      	bne.n	8001930 <main+0x4c>
		  transmit_Data_to_DTU();
 8001926:	f7ff fce1 	bl	80012ec <transmit_Data_to_DTU>
		  tx_to_DTU_enable = 0;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <main+0x80>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
	  }
	  if(DOOR_STATUS == 0 && toggle_send_once == 1){
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <main+0x84>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d108      	bne.n	800194a <main+0x66>
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <main+0x88>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d104      	bne.n	800194a <main+0x66>
		  transmit_Data_to_DTU();
 8001940:	f7ff fcd4 	bl	80012ec <transmit_Data_to_DTU>
		  toggle_send_once = 0;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <main+0x88>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
	  }
	  write_read_Temperature();
 800194a:	f7ff fc77 	bl	800123c <write_read_Temperature>
	  if(tx_to_DTU_enable == 1){
 800194e:	e7e6      	b.n	800191e <main+0x3a>
 8001950:	20000288 	.word	0x20000288
 8001954:	20000468 	.word	0x20000468
 8001958:	20000314 	.word	0x20000314
 800195c:	20000470 	.word	0x20000470
 8001960:	200002d0 	.word	0x200002d0
 8001964:	20000498 	.word	0x20000498
 8001968:	20000484 	.word	0x20000484
 800196c:	20000488 	.word	0x20000488

08001970 <HAL_GPIO_EXTI_Callback>:
  /* USER CODE END 3 */
}

// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == DOOR_SENSOR_PIN) // INT Source is pin A9
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001980:	d114      	bne.n	80019ac <HAL_GPIO_EXTI_Callback+0x3c>
    {
    	if(HAL_GPIO_ReadPin(DOOR_SENSOR_PORT, DOOR_SENSOR_PIN) != GPIO_PIN_RESET){
 8001982:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001986:	480b      	ldr	r0, [pc, #44]	; (80019b4 <HAL_GPIO_EXTI_Callback+0x44>)
 8001988:	f001 fa40 	bl	8002e0c <HAL_GPIO_ReadPin>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <HAL_GPIO_EXTI_Callback+0x36>
    		DOOR_STATUS = 0;
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_GPIO_EXTI_Callback+0x48>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
    		toggle_send_once = 1;
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_GPIO_EXTI_Callback+0x4c>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]
    		tx_doorOpen_to_DTU_enable = 1;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_GPIO_EXTI_Callback+0x50>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
		}
		else{
			DOOR_STATUS = 1;
		}
    }
}
 80019a4:	e002      	b.n	80019ac <HAL_GPIO_EXTI_Callback+0x3c>
			DOOR_STATUS = 1;
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <HAL_GPIO_EXTI_Callback+0x48>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40010c00 	.word	0x40010c00
 80019b8:	20000484 	.word	0x20000484
 80019bc:	20000488 	.word	0x20000488
 80019c0:	20000000 	.word	0x20000000

080019c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b090      	sub	sp, #64	; 0x40
 80019c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ca:	f107 0318 	add.w	r3, r7, #24
 80019ce:	2228      	movs	r2, #40	; 0x28
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 ff54 	bl	8004880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e6:	2301      	movs	r3, #1
 80019e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019f4:	2301      	movs	r3, #1
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f8:	2302      	movs	r3, #2
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a02:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a08:	f107 0318 	add.w	r3, r7, #24
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 fa45 	bl	8002e9c <HAL_RCC_OscConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a18:	f000 f956 	bl	8001cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a20:	2302      	movs	r3, #2
 8001a22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2102      	movs	r1, #2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 fcb2 	bl	80033a0 <HAL_RCC_ClockConfig>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a42:	f000 f941 	bl	8001cc8 <Error_Handler>
  }
}
 8001a46:	bf00      	nop
 8001a48:	3740      	adds	r7, #64	; 0x40
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a64:	463b      	mov	r3, r7
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <MX_TIM1_Init+0x98>)
 8001a6e:	4a1f      	ldr	r2, [pc, #124]	; (8001aec <MX_TIM1_Init+0x9c>)
 8001a70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <MX_TIM1_Init+0x98>)
 8001a74:	2247      	movs	r2, #71	; 0x47
 8001a76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <MX_TIM1_Init+0x98>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <MX_TIM1_Init+0x98>)
 8001a80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a86:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <MX_TIM1_Init+0x98>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a8c:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_TIM1_Init+0x98>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <MX_TIM1_Init+0x98>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a98:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <MX_TIM1_Init+0x98>)
 8001a9a:	f001 fe19 	bl	80036d0 <HAL_TIM_Base_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001aa4:	f000 f910 	bl	8001cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <MX_TIM1_Init+0x98>)
 8001ab6:	f001 fea5 	bl	8003804 <HAL_TIM_ConfigClockSource>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ac0:	f000 f902 	bl	8001cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001acc:	463b      	mov	r3, r7
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_TIM1_Init+0x98>)
 8001ad2:	f002 f853 	bl	8003b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001adc:	f000 f8f4 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000288 	.word	0x20000288
 8001aec:	40012c00 	.word	0x40012c00

08001af0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <MX_USART1_UART_Init+0x50>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b28:	f002 f886 	bl	8003c38 <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b32:	f000 f8c9 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200002d0 	.word	0x200002d0
 8001b40:	40013800 	.word	0x40013800

08001b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <MX_USART2_UART_Init+0x50>)
 8001b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b5c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b6c:	220c      	movs	r2, #12
 8001b6e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	f002 f85b 	bl	8003c38 <HAL_UART_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001b88:	f000 f89e 	bl	8001cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000314 	.word	0x20000314
 8001b94:	40004400 	.word	0x40004400

08001b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <MX_DMA_Init+0x68>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <MX_DMA_Init+0x68>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6153      	str	r3, [r2, #20]
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <MX_DMA_Init+0x68>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	200e      	movs	r0, #14
 8001bbc:	f000 fccd 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001bc0:	200e      	movs	r0, #14
 8001bc2:	f000 fce6 	bl	8002592 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	200f      	movs	r0, #15
 8001bcc:	f000 fcc5 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001bd0:	200f      	movs	r0, #15
 8001bd2:	f000 fcde 	bl	8002592 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2010      	movs	r0, #16
 8001bdc:	f000 fcbd 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001be0:	2010      	movs	r0, #16
 8001be2:	f000 fcd6 	bl	8002592 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	2011      	movs	r0, #17
 8001bec:	f000 fcb5 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001bf0:	2011      	movs	r0, #17
 8001bf2:	f000 fcce 	bl	8002592 <HAL_NVIC_EnableIRQ>

}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000

08001c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <MX_GPIO_Init+0xb4>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <MX_GPIO_Init+0xb4>)
 8001c1e:	f043 0320 	orr.w	r3, r3, #32
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <MX_GPIO_Init+0xb4>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c30:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <MX_GPIO_Init+0xb4>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <MX_GPIO_Init+0xb4>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <MX_GPIO_Init+0xb4>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <MX_GPIO_Init+0xb4>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <MX_GPIO_Init+0xb4>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6193      	str	r3, [r2, #24]
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <MX_GPIO_Init+0xb4>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	4815      	ldr	r0, [pc, #84]	; (8001cbc <MX_GPIO_Init+0xb8>)
 8001c66:	f001 f8e8 	bl	8002e3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f107 0310 	add.w	r3, r7, #16
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480e      	ldr	r0, [pc, #56]	; (8001cbc <MX_GPIO_Init+0xb8>)
 8001c82:	f000 ff3f 	bl	8002b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <MX_GPIO_Init+0xbc>)
 8001c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480a      	ldr	r0, [pc, #40]	; (8001cc4 <MX_GPIO_Init+0xc0>)
 8001c9c:	f000 ff32 	bl	8002b04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2017      	movs	r0, #23
 8001ca6:	f000 fc58 	bl	800255a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001caa:	2017      	movs	r0, #23
 8001cac:	f000 fc71 	bl	8002592 <HAL_NVIC_EnableIRQ>

}
 8001cb0:	bf00      	nop
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40010800 	.word	0x40010800
 8001cc0:	10310000 	.word	0x10310000
 8001cc4:	40010c00 	.word	0x40010c00

08001cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ccc:	b672      	cpsid	i
}
 8001cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <Error_Handler+0x8>
	...

08001cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_MspInit+0x5c>)
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <HAL_MspInit+0x5c>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6193      	str	r3, [r2, #24]
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_MspInit+0x5c>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_MspInit+0x5c>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <HAL_MspInit+0x5c>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	61d3      	str	r3, [r2, #28]
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_MspInit+0x5c>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_MspInit+0x60>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_MspInit+0x60>)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000

08001d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <HAL_TIM_Base_MspInit+0x34>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d10b      	bne.n	8001d62 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_TIM_Base_MspInit+0x38>)
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	4a08      	ldr	r2, [pc, #32]	; (8001d70 <HAL_TIM_Base_MspInit+0x38>)
 8001d50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d54:	6193      	str	r3, [r2, #24]
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_TIM_Base_MspInit+0x38>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	40012c00 	.word	0x40012c00
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0318 	add.w	r3, r7, #24
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a8c      	ldr	r2, [pc, #560]	; (8001fc0 <HAL_UART_MspInit+0x24c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	f040 8087 	bne.w	8001ea4 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d96:	4b8b      	ldr	r3, [pc, #556]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	4a8a      	ldr	r2, [pc, #552]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6193      	str	r3, [r2, #24]
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	4a84      	ldr	r2, [pc, #528]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001db4:	f043 0304 	orr.w	r3, r3, #4
 8001db8:	6193      	str	r3, [r2, #24]
 8001dba:	4b82      	ldr	r3, [pc, #520]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 0318 	add.w	r3, r7, #24
 8001dd8:	4619      	mov	r1, r3
 8001dda:	487b      	ldr	r0, [pc, #492]	; (8001fc8 <HAL_UART_MspInit+0x254>)
 8001ddc:	f000 fe92 	bl	8002b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dee:	f107 0318 	add.w	r3, r7, #24
 8001df2:	4619      	mov	r1, r3
 8001df4:	4874      	ldr	r0, [pc, #464]	; (8001fc8 <HAL_UART_MspInit+0x254>)
 8001df6:	f000 fe85 	bl	8002b04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001dfa:	4b74      	ldr	r3, [pc, #464]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001dfc:	4a74      	ldr	r2, [pc, #464]	; (8001fd0 <HAL_UART_MspInit+0x25c>)
 8001dfe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e00:	4b72      	ldr	r3, [pc, #456]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e06:	4b71      	ldr	r3, [pc, #452]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e0c:	4b6f      	ldr	r3, [pc, #444]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e12:	4b6e      	ldr	r3, [pc, #440]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e18:	4b6c      	ldr	r3, [pc, #432]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e1e:	4b6b      	ldr	r3, [pc, #428]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e20:	2220      	movs	r2, #32
 8001e22:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e24:	4b69      	ldr	r3, [pc, #420]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e2a:	4868      	ldr	r0, [pc, #416]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e2c:	f000 fbcc 	bl	80025c8 <HAL_DMA_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001e36:	f7ff ff47 	bl	8001cc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a63      	ldr	r2, [pc, #396]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e3e:	639a      	str	r2, [r3, #56]	; 0x38
 8001e40:	4a62      	ldr	r2, [pc, #392]	; (8001fcc <HAL_UART_MspInit+0x258>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001e46:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e48:	4a63      	ldr	r2, [pc, #396]	; (8001fd8 <HAL_UART_MspInit+0x264>)
 8001e4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e4c:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e4e:	2210      	movs	r2, #16
 8001e50:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e52:	4b60      	ldr	r3, [pc, #384]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e58:	4b5e      	ldr	r3, [pc, #376]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e5a:	2280      	movs	r2, #128	; 0x80
 8001e5c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e5e:	4b5d      	ldr	r3, [pc, #372]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e64:	4b5b      	ldr	r3, [pc, #364]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8001e6a:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e70:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e76:	4857      	ldr	r0, [pc, #348]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e78:	f000 fba6 	bl	80025c8 <HAL_DMA_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001e82:	f7ff ff21 	bl	8001cc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a52      	ldr	r2, [pc, #328]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e8a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e8c:	4a51      	ldr	r2, [pc, #324]	; (8001fd4 <HAL_UART_MspInit+0x260>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2025      	movs	r0, #37	; 0x25
 8001e98:	f000 fb5f 	bl	800255a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e9c:	2025      	movs	r0, #37	; 0x25
 8001e9e:	f000 fb78 	bl	8002592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ea2:	e089      	b.n	8001fb8 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a4c      	ldr	r2, [pc, #304]	; (8001fdc <HAL_UART_MspInit+0x268>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	f040 8084 	bne.w	8001fb8 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eb0:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	4a43      	ldr	r2, [pc, #268]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eba:	61d3      	str	r3, [r2, #28]
 8001ebc:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec8:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	4a3d      	ldr	r2, [pc, #244]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	6193      	str	r3, [r2, #24]
 8001ed4:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <HAL_UART_MspInit+0x250>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f107 0318 	add.w	r3, r7, #24
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4835      	ldr	r0, [pc, #212]	; (8001fc8 <HAL_UART_MspInit+0x254>)
 8001ef4:	f000 fe06 	bl	8002b04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	482f      	ldr	r0, [pc, #188]	; (8001fc8 <HAL_UART_MspInit+0x254>)
 8001f0c:	f000 fdfa 	bl	8002b04 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001f10:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f12:	4a34      	ldr	r2, [pc, #208]	; (8001fe4 <HAL_UART_MspInit+0x270>)
 8001f14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f16:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1c:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f22:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001f34:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f36:	2220      	movs	r2, #32
 8001f38:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f40:	4827      	ldr	r0, [pc, #156]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f42:	f000 fb41 	bl	80025c8 <HAL_DMA_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001f4c:	f7ff febc 	bl	8001cc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a23      	ldr	r2, [pc, #140]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f54:	639a      	str	r2, [r3, #56]	; 0x38
 8001f56:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <HAL_UART_MspInit+0x26c>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f5e:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_UART_MspInit+0x278>)
 8001f60:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f64:	2210      	movs	r2, #16
 8001f66:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f68:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f74:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f82:	2220      	movs	r2, #32
 8001f84:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f8c:	4816      	ldr	r0, [pc, #88]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001f8e:	f000 fb1b 	bl	80025c8 <HAL_DMA_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <HAL_UART_MspInit+0x228>
      Error_Handler();
 8001f98:	f7ff fe96 	bl	8001cc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001fa0:	635a      	str	r2, [r3, #52]	; 0x34
 8001fa2:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <HAL_UART_MspInit+0x274>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2026      	movs	r0, #38	; 0x26
 8001fae:	f000 fad4 	bl	800255a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fb2:	2026      	movs	r0, #38	; 0x26
 8001fb4:	f000 faed 	bl	8002592 <HAL_NVIC_EnableIRQ>
}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40013800 	.word	0x40013800
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010800 	.word	0x40010800
 8001fcc:	20000358 	.word	0x20000358
 8001fd0:	40020058 	.word	0x40020058
 8001fd4:	2000039c 	.word	0x2000039c
 8001fd8:	40020044 	.word	0x40020044
 8001fdc:	40004400 	.word	0x40004400
 8001fe0:	200003e0 	.word	0x200003e0
 8001fe4:	4002006c 	.word	0x4002006c
 8001fe8:	20000424 	.word	0x20000424
 8001fec:	40020080 	.word	0x40020080

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <NMI_Handler+0x4>

08001ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	e7fe      	b.n	8002000 <MemManage_Handler+0x4>

08002002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002006:	e7fe      	b.n	8002006 <BusFault_Handler+0x4>

08002008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <UsageFault_Handler+0x4>

0800200e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002036:	f000 f979 	bl	800232c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <DMA1_Channel4_IRQHandler+0x10>)
 8002046:	f000 fc29 	bl	800289c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000039c 	.word	0x2000039c

08002054 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002058:	4802      	ldr	r0, [pc, #8]	; (8002064 <DMA1_Channel5_IRQHandler+0x10>)
 800205a:	f000 fc1f 	bl	800289c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000358 	.word	0x20000358

08002068 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <DMA1_Channel6_IRQHandler+0x10>)
 800206e:	f000 fc15 	bl	800289c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200003e0 	.word	0x200003e0

0800207c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <DMA1_Channel7_IRQHandler+0x10>)
 8002082:	f000 fc0b 	bl	800289c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000424 	.word	0x20000424

08002090 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002094:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002098:	f000 fee8 	bl	8002e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}

080020a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <USART1_IRQHandler+0x10>)
 80020a6:	f001 feb9 	bl	8003e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200002d0 	.word	0x200002d0

080020b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <USART2_IRQHandler+0x10>)
 80020ba:	f001 feaf 	bl	8003e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000314 	.word	0x20000314

080020c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
	return 1;
 80020cc:	2301      	movs	r3, #1
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <_kill>:

int _kill(int pid, int sig)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020e0:	f002 fba4 	bl	800482c <__errno>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2216      	movs	r2, #22
 80020e8:	601a      	str	r2, [r3, #0]
	return -1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_exit>:

void _exit (int status)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ffe7 	bl	80020d6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002108:	e7fe      	b.n	8002108 <_exit+0x12>

0800210a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e00a      	b.n	8002132 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800211c:	f3af 8000 	nop.w
 8002120:	4601      	mov	r1, r0
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	60ba      	str	r2, [r7, #8]
 8002128:	b2ca      	uxtb	r2, r1
 800212a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	3301      	adds	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	429a      	cmp	r2, r3
 8002138:	dbf0      	blt.n	800211c <_read+0x12>
	}

return len;
 800213a:	687b      	ldr	r3, [r7, #4]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	e009      	b.n	800216a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	60ba      	str	r2, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3301      	adds	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	429a      	cmp	r2, r3
 8002170:	dbf1      	blt.n	8002156 <_write+0x12>
	}
	return len;
 8002172:	687b      	ldr	r3, [r7, #4]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_close>:

int _close(int file)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	return -1;
 8002184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021a2:	605a      	str	r2, [r3, #4]
	return 0;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <_isatty>:

int _isatty(int file)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	return 1;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
	return 0;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <_sbrk+0x5c>)
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <_sbrk+0x60>)
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <_sbrk+0x64>)
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <_sbrk+0x68>)
 80021fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	429a      	cmp	r2, r3
 800220a:	d207      	bcs.n	800221c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800220c:	f002 fb0e 	bl	800482c <__errno>
 8002210:	4603      	mov	r3, r0
 8002212:	220c      	movs	r2, #12
 8002214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	e009      	b.n	8002230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <_sbrk+0x64>)
 800222c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222e:	68fb      	ldr	r3, [r7, #12]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20005000 	.word	0x20005000
 800223c:	00000400 	.word	0x00000400
 8002240:	200004c4 	.word	0x200004c4
 8002244:	200004e0 	.word	0x200004e0

08002248 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002254:	480c      	ldr	r0, [pc, #48]	; (8002288 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002256:	490d      	ldr	r1, [pc, #52]	; (800228c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002258:	4a0d      	ldr	r2, [pc, #52]	; (8002290 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800225a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800225c:	e002      	b.n	8002264 <LoopCopyDataInit>

0800225e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002262:	3304      	adds	r3, #4

08002264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002268:	d3f9      	bcc.n	800225e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800226c:	4c0a      	ldr	r4, [pc, #40]	; (8002298 <LoopFillZerobss+0x22>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002270:	e001      	b.n	8002276 <LoopFillZerobss>

08002272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002274:	3204      	adds	r2, #4

08002276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002278:	d3fb      	bcc.n	8002272 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800227a:	f7ff ffe5 	bl	8002248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227e:	f002 fadb 	bl	8004838 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002282:	f7ff fb2f 	bl	80018e4 <main>
  bx lr
 8002286:	4770      	bx	lr
  ldr r0, =_sdata
 8002288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800228c:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8002290:	08007cb8 	.word	0x08007cb8
  ldr r2, =_sbss
 8002294:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8002298:	200004dc 	.word	0x200004dc

0800229c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800229c:	e7fe      	b.n	800229c <ADC1_2_IRQHandler>
	...

080022a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <HAL_Init+0x28>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <HAL_Init+0x28>)
 80022aa:	f043 0310 	orr.w	r3, r3, #16
 80022ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 f947 	bl	8002544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b6:	200f      	movs	r0, #15
 80022b8:	f000 f808 	bl	80022cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022bc:	f7ff fd0a 	bl	8001cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_InitTick+0x54>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_InitTick+0x58>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f95f 	bl	80025ae <HAL_SYSTICK_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00e      	b.n	8002318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	d80a      	bhi.n	8002316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002300:	2200      	movs	r2, #0
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f000 f927 	bl	800255a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <HAL_InitTick+0x5c>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000090 	.word	0x20000090
 8002324:	20000098 	.word	0x20000098
 8002328:	20000094 	.word	0x20000094

0800232c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_IncTick+0x1c>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_IncTick+0x20>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4413      	add	r3, r2
 800233c:	4a03      	ldr	r2, [pc, #12]	; (800234c <HAL_IncTick+0x20>)
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	20000098 	.word	0x20000098
 800234c:	200004c8 	.word	0x200004c8

08002350 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return uwTick;
 8002354:	4b02      	ldr	r3, [pc, #8]	; (8002360 <HAL_GetTick+0x10>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	200004c8 	.word	0x200004c8

08002364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff fff0 	bl	8002350 <HAL_GetTick>
 8002370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d005      	beq.n	800238a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_Delay+0x44>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800238a:	bf00      	nop
 800238c:	f7ff ffe0 	bl	8002350 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d8f7      	bhi.n	800238c <HAL_Delay+0x28>
  {
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000098 	.word	0x20000098

080023ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	60d3      	str	r3, [r2, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <__NVIC_GetPriorityGrouping+0x18>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 0307 	and.w	r3, r3, #7
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db0b      	blt.n	800243a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4906      	ldr	r1, [pc, #24]	; (8002444 <__NVIC_EnableIRQ+0x34>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	e000e100 	.word	0xe000e100

08002448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	db0a      	blt.n	8002472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	490c      	ldr	r1, [pc, #48]	; (8002494 <__NVIC_SetPriority+0x4c>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	0112      	lsls	r2, r2, #4
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	440b      	add	r3, r1
 800246c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002470:	e00a      	b.n	8002488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4908      	ldr	r1, [pc, #32]	; (8002498 <__NVIC_SetPriority+0x50>)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3b04      	subs	r3, #4
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	440b      	add	r3, r1
 8002486:	761a      	strb	r2, [r3, #24]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000e100 	.word	0xe000e100
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f1c3 0307 	rsb	r3, r3, #7
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	bf28      	it	cs
 80024ba:	2304      	movcs	r3, #4
 80024bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d902      	bls.n	80024cc <NVIC_EncodePriority+0x30>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3b03      	subs	r3, #3
 80024ca:	e000      	b.n	80024ce <NVIC_EncodePriority+0x32>
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	401a      	ands	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	4313      	orrs	r3, r2
         );
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002510:	d301      	bcc.n	8002516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002512:	2301      	movs	r3, #1
 8002514:	e00f      	b.n	8002536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <SysTick_Config+0x40>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251e:	210f      	movs	r1, #15
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f7ff ff90 	bl	8002448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <SysTick_Config+0x40>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <SysTick_Config+0x40>)
 8002530:	2207      	movs	r2, #7
 8002532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	e000e010 	.word	0xe000e010

08002544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff2d 	bl	80023ac <__NVIC_SetPriorityGrouping>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800256c:	f7ff ff42 	bl	80023f4 <__NVIC_GetPriorityGrouping>
 8002570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	6978      	ldr	r0, [r7, #20]
 8002578:	f7ff ff90 	bl	800249c <NVIC_EncodePriority>
 800257c:	4602      	mov	r2, r0
 800257e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff5f 	bl	8002448 <__NVIC_SetPriority>
}
 800258a:	bf00      	nop
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff35 	bl	8002410 <__NVIC_EnableIRQ>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ffa2 	bl	8002500 <SysTick_Config>
 80025bc:	4603      	mov	r3, r0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e043      	b.n	8002666 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b22      	ldr	r3, [pc, #136]	; (8002670 <HAL_DMA_Init+0xa8>)
 80025e6:	4413      	add	r3, r2
 80025e8:	4a22      	ldr	r2, [pc, #136]	; (8002674 <HAL_DMA_Init+0xac>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	009a      	lsls	r2, r3, #2
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a1f      	ldr	r2, [pc, #124]	; (8002678 <HAL_DMA_Init+0xb0>)
 80025fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002612:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002616:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002620:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002638:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	bffdfff8 	.word	0xbffdfff8
 8002674:	cccccccd 	.word	0xcccccccd
 8002678:	40020000 	.word	0x40020000

0800267c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_DMA_Start_IT+0x20>
 8002698:	2302      	movs	r3, #2
 800269a:	e04a      	b.n	8002732 <HAL_DMA_Start_IT+0xb6>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d13a      	bne.n	8002724 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2202      	movs	r2, #2
 80026b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f9e8 	bl	8002aa8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 020e 	orr.w	r2, r2, #14
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e00f      	b.n	8002712 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0204 	bic.w	r2, r2, #4
 8002700:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 020a 	orr.w	r2, r2, #10
 8002710:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0201 	orr.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e005      	b.n	8002730 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800272c:	2302      	movs	r3, #2
 800272e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002730:	7dfb      	ldrb	r3, [r7, #23]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800274c:	2b02      	cmp	r3, #2
 800274e:	d008      	beq.n	8002762 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2204      	movs	r2, #4
 8002754:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e020      	b.n	80027a4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 020e 	bic.w	r2, r2, #14
 8002770:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	2101      	movs	r1, #1
 800278c:	fa01 f202 	lsl.w	r2, r1, r2
 8002790:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
	...

080027b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d005      	beq.n	80027d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2204      	movs	r2, #4
 80027ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e051      	b.n	8002876 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 020e 	bic.w	r2, r2, #14
 80027e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a22      	ldr	r2, [pc, #136]	; (8002880 <HAL_DMA_Abort_IT+0xd0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d029      	beq.n	8002850 <HAL_DMA_Abort_IT+0xa0>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a20      	ldr	r2, [pc, #128]	; (8002884 <HAL_DMA_Abort_IT+0xd4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d022      	beq.n	800284c <HAL_DMA_Abort_IT+0x9c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <HAL_DMA_Abort_IT+0xd8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d01a      	beq.n	8002846 <HAL_DMA_Abort_IT+0x96>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1d      	ldr	r2, [pc, #116]	; (800288c <HAL_DMA_Abort_IT+0xdc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d012      	beq.n	8002840 <HAL_DMA_Abort_IT+0x90>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <HAL_DMA_Abort_IT+0xe0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00a      	beq.n	800283a <HAL_DMA_Abort_IT+0x8a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1a      	ldr	r2, [pc, #104]	; (8002894 <HAL_DMA_Abort_IT+0xe4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d102      	bne.n	8002834 <HAL_DMA_Abort_IT+0x84>
 800282e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002832:	e00e      	b.n	8002852 <HAL_DMA_Abort_IT+0xa2>
 8002834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002838:	e00b      	b.n	8002852 <HAL_DMA_Abort_IT+0xa2>
 800283a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800283e:	e008      	b.n	8002852 <HAL_DMA_Abort_IT+0xa2>
 8002840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002844:	e005      	b.n	8002852 <HAL_DMA_Abort_IT+0xa2>
 8002846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800284a:	e002      	b.n	8002852 <HAL_DMA_Abort_IT+0xa2>
 800284c:	2310      	movs	r3, #16
 800284e:	e000      	b.n	8002852 <HAL_DMA_Abort_IT+0xa2>
 8002850:	2301      	movs	r3, #1
 8002852:	4a11      	ldr	r2, [pc, #68]	; (8002898 <HAL_DMA_Abort_IT+0xe8>)
 8002854:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	4798      	blx	r3
    } 
  }
  return status;
 8002876:	7bfb      	ldrb	r3, [r7, #15]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40020008 	.word	0x40020008
 8002884:	4002001c 	.word	0x4002001c
 8002888:	40020030 	.word	0x40020030
 800288c:	40020044 	.word	0x40020044
 8002890:	40020058 	.word	0x40020058
 8002894:	4002006c 	.word	0x4002006c
 8002898:	40020000 	.word	0x40020000

0800289c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b8:	2204      	movs	r2, #4
 80028ba:	409a      	lsls	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d04f      	beq.n	8002964 <HAL_DMA_IRQHandler+0xc8>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d04a      	beq.n	8002964 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d107      	bne.n	80028ec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0204 	bic.w	r2, r2, #4
 80028ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a66      	ldr	r2, [pc, #408]	; (8002a8c <HAL_DMA_IRQHandler+0x1f0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d029      	beq.n	800294a <HAL_DMA_IRQHandler+0xae>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a65      	ldr	r2, [pc, #404]	; (8002a90 <HAL_DMA_IRQHandler+0x1f4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d022      	beq.n	8002946 <HAL_DMA_IRQHandler+0xaa>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a63      	ldr	r2, [pc, #396]	; (8002a94 <HAL_DMA_IRQHandler+0x1f8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01a      	beq.n	8002940 <HAL_DMA_IRQHandler+0xa4>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a62      	ldr	r2, [pc, #392]	; (8002a98 <HAL_DMA_IRQHandler+0x1fc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d012      	beq.n	800293a <HAL_DMA_IRQHandler+0x9e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a60      	ldr	r2, [pc, #384]	; (8002a9c <HAL_DMA_IRQHandler+0x200>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00a      	beq.n	8002934 <HAL_DMA_IRQHandler+0x98>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a5f      	ldr	r2, [pc, #380]	; (8002aa0 <HAL_DMA_IRQHandler+0x204>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d102      	bne.n	800292e <HAL_DMA_IRQHandler+0x92>
 8002928:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800292c:	e00e      	b.n	800294c <HAL_DMA_IRQHandler+0xb0>
 800292e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002932:	e00b      	b.n	800294c <HAL_DMA_IRQHandler+0xb0>
 8002934:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002938:	e008      	b.n	800294c <HAL_DMA_IRQHandler+0xb0>
 800293a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800293e:	e005      	b.n	800294c <HAL_DMA_IRQHandler+0xb0>
 8002940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002944:	e002      	b.n	800294c <HAL_DMA_IRQHandler+0xb0>
 8002946:	2340      	movs	r3, #64	; 0x40
 8002948:	e000      	b.n	800294c <HAL_DMA_IRQHandler+0xb0>
 800294a:	2304      	movs	r3, #4
 800294c:	4a55      	ldr	r2, [pc, #340]	; (8002aa4 <HAL_DMA_IRQHandler+0x208>)
 800294e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8094 	beq.w	8002a82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002962:	e08e      	b.n	8002a82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	2202      	movs	r2, #2
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d056      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x186>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d051      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10b      	bne.n	80029a4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 020a 	bic.w	r2, r2, #10
 800299a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a38      	ldr	r2, [pc, #224]	; (8002a8c <HAL_DMA_IRQHandler+0x1f0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d029      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x166>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a37      	ldr	r2, [pc, #220]	; (8002a90 <HAL_DMA_IRQHandler+0x1f4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d022      	beq.n	80029fe <HAL_DMA_IRQHandler+0x162>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a35      	ldr	r2, [pc, #212]	; (8002a94 <HAL_DMA_IRQHandler+0x1f8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d01a      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x15c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a34      	ldr	r2, [pc, #208]	; (8002a98 <HAL_DMA_IRQHandler+0x1fc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d012      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x156>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a32      	ldr	r2, [pc, #200]	; (8002a9c <HAL_DMA_IRQHandler+0x200>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00a      	beq.n	80029ec <HAL_DMA_IRQHandler+0x150>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a31      	ldr	r2, [pc, #196]	; (8002aa0 <HAL_DMA_IRQHandler+0x204>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d102      	bne.n	80029e6 <HAL_DMA_IRQHandler+0x14a>
 80029e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029e4:	e00e      	b.n	8002a04 <HAL_DMA_IRQHandler+0x168>
 80029e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ea:	e00b      	b.n	8002a04 <HAL_DMA_IRQHandler+0x168>
 80029ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f0:	e008      	b.n	8002a04 <HAL_DMA_IRQHandler+0x168>
 80029f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029f6:	e005      	b.n	8002a04 <HAL_DMA_IRQHandler+0x168>
 80029f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029fc:	e002      	b.n	8002a04 <HAL_DMA_IRQHandler+0x168>
 80029fe:	2320      	movs	r3, #32
 8002a00:	e000      	b.n	8002a04 <HAL_DMA_IRQHandler+0x168>
 8002a02:	2302      	movs	r3, #2
 8002a04:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <HAL_DMA_IRQHandler+0x208>)
 8002a06:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d034      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a20:	e02f      	b.n	8002a82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	2208      	movs	r2, #8
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d028      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x1e8>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d023      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 020e 	bic.w	r2, r2, #14
 8002a4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	2101      	movs	r1, #1
 8002a56:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d004      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
    }
  }
  return;
 8002a82:	bf00      	nop
 8002a84:	bf00      	nop
}
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40020008 	.word	0x40020008
 8002a90:	4002001c 	.word	0x4002001c
 8002a94:	40020030 	.word	0x40020030
 8002a98:	40020044 	.word	0x40020044
 8002a9c:	40020058 	.word	0x40020058
 8002aa0:	4002006c 	.word	0x4002006c
 8002aa4:	40020000 	.word	0x40020000

08002aa8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abe:	2101      	movs	r1, #1
 8002ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d108      	bne.n	8002ae8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ae6:	e007      	b.n	8002af8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	60da      	str	r2, [r3, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b08b      	sub	sp, #44	; 0x2c
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b12:	2300      	movs	r3, #0
 8002b14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b16:	e169      	b.n	8002dec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	f040 8158 	bne.w	8002de6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4a9a      	ldr	r2, [pc, #616]	; (8002da4 <HAL_GPIO_Init+0x2a0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d05e      	beq.n	8002bfe <HAL_GPIO_Init+0xfa>
 8002b40:	4a98      	ldr	r2, [pc, #608]	; (8002da4 <HAL_GPIO_Init+0x2a0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d875      	bhi.n	8002c32 <HAL_GPIO_Init+0x12e>
 8002b46:	4a98      	ldr	r2, [pc, #608]	; (8002da8 <HAL_GPIO_Init+0x2a4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d058      	beq.n	8002bfe <HAL_GPIO_Init+0xfa>
 8002b4c:	4a96      	ldr	r2, [pc, #600]	; (8002da8 <HAL_GPIO_Init+0x2a4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d86f      	bhi.n	8002c32 <HAL_GPIO_Init+0x12e>
 8002b52:	4a96      	ldr	r2, [pc, #600]	; (8002dac <HAL_GPIO_Init+0x2a8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d052      	beq.n	8002bfe <HAL_GPIO_Init+0xfa>
 8002b58:	4a94      	ldr	r2, [pc, #592]	; (8002dac <HAL_GPIO_Init+0x2a8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d869      	bhi.n	8002c32 <HAL_GPIO_Init+0x12e>
 8002b5e:	4a94      	ldr	r2, [pc, #592]	; (8002db0 <HAL_GPIO_Init+0x2ac>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d04c      	beq.n	8002bfe <HAL_GPIO_Init+0xfa>
 8002b64:	4a92      	ldr	r2, [pc, #584]	; (8002db0 <HAL_GPIO_Init+0x2ac>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d863      	bhi.n	8002c32 <HAL_GPIO_Init+0x12e>
 8002b6a:	4a92      	ldr	r2, [pc, #584]	; (8002db4 <HAL_GPIO_Init+0x2b0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d046      	beq.n	8002bfe <HAL_GPIO_Init+0xfa>
 8002b70:	4a90      	ldr	r2, [pc, #576]	; (8002db4 <HAL_GPIO_Init+0x2b0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d85d      	bhi.n	8002c32 <HAL_GPIO_Init+0x12e>
 8002b76:	2b12      	cmp	r3, #18
 8002b78:	d82a      	bhi.n	8002bd0 <HAL_GPIO_Init+0xcc>
 8002b7a:	2b12      	cmp	r3, #18
 8002b7c:	d859      	bhi.n	8002c32 <HAL_GPIO_Init+0x12e>
 8002b7e:	a201      	add	r2, pc, #4	; (adr r2, 8002b84 <HAL_GPIO_Init+0x80>)
 8002b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b84:	08002bff 	.word	0x08002bff
 8002b88:	08002bd9 	.word	0x08002bd9
 8002b8c:	08002beb 	.word	0x08002beb
 8002b90:	08002c2d 	.word	0x08002c2d
 8002b94:	08002c33 	.word	0x08002c33
 8002b98:	08002c33 	.word	0x08002c33
 8002b9c:	08002c33 	.word	0x08002c33
 8002ba0:	08002c33 	.word	0x08002c33
 8002ba4:	08002c33 	.word	0x08002c33
 8002ba8:	08002c33 	.word	0x08002c33
 8002bac:	08002c33 	.word	0x08002c33
 8002bb0:	08002c33 	.word	0x08002c33
 8002bb4:	08002c33 	.word	0x08002c33
 8002bb8:	08002c33 	.word	0x08002c33
 8002bbc:	08002c33 	.word	0x08002c33
 8002bc0:	08002c33 	.word	0x08002c33
 8002bc4:	08002c33 	.word	0x08002c33
 8002bc8:	08002be1 	.word	0x08002be1
 8002bcc:	08002bf5 	.word	0x08002bf5
 8002bd0:	4a79      	ldr	r2, [pc, #484]	; (8002db8 <HAL_GPIO_Init+0x2b4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bd6:	e02c      	b.n	8002c32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	623b      	str	r3, [r7, #32]
          break;
 8002bde:	e029      	b.n	8002c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	3304      	adds	r3, #4
 8002be6:	623b      	str	r3, [r7, #32]
          break;
 8002be8:	e024      	b.n	8002c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	3308      	adds	r3, #8
 8002bf0:	623b      	str	r3, [r7, #32]
          break;
 8002bf2:	e01f      	b.n	8002c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	330c      	adds	r3, #12
 8002bfa:	623b      	str	r3, [r7, #32]
          break;
 8002bfc:	e01a      	b.n	8002c34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c06:	2304      	movs	r3, #4
 8002c08:	623b      	str	r3, [r7, #32]
          break;
 8002c0a:	e013      	b.n	8002c34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d105      	bne.n	8002c20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c14:	2308      	movs	r3, #8
 8002c16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	611a      	str	r2, [r3, #16]
          break;
 8002c1e:	e009      	b.n	8002c34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c20:	2308      	movs	r3, #8
 8002c22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	615a      	str	r2, [r3, #20]
          break;
 8002c2a:	e003      	b.n	8002c34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	623b      	str	r3, [r7, #32]
          break;
 8002c30:	e000      	b.n	8002c34 <HAL_GPIO_Init+0x130>
          break;
 8002c32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2bff      	cmp	r3, #255	; 0xff
 8002c38:	d801      	bhi.n	8002c3e <HAL_GPIO_Init+0x13a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	e001      	b.n	8002c42 <HAL_GPIO_Init+0x13e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3304      	adds	r3, #4
 8002c42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2bff      	cmp	r3, #255	; 0xff
 8002c48:	d802      	bhi.n	8002c50 <HAL_GPIO_Init+0x14c>
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	e002      	b.n	8002c56 <HAL_GPIO_Init+0x152>
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	3b08      	subs	r3, #8
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	210f      	movs	r1, #15
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	401a      	ands	r2, r3
 8002c68:	6a39      	ldr	r1, [r7, #32]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	431a      	orrs	r2, r3
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80b1 	beq.w	8002de6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c84:	4b4d      	ldr	r3, [pc, #308]	; (8002dbc <HAL_GPIO_Init+0x2b8>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	4a4c      	ldr	r2, [pc, #304]	; (8002dbc <HAL_GPIO_Init+0x2b8>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6193      	str	r3, [r2, #24]
 8002c90:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <HAL_GPIO_Init+0x2b8>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c9c:	4a48      	ldr	r2, [pc, #288]	; (8002dc0 <HAL_GPIO_Init+0x2bc>)
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	220f      	movs	r2, #15
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a40      	ldr	r2, [pc, #256]	; (8002dc4 <HAL_GPIO_Init+0x2c0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d013      	beq.n	8002cf0 <HAL_GPIO_Init+0x1ec>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a3f      	ldr	r2, [pc, #252]	; (8002dc8 <HAL_GPIO_Init+0x2c4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00d      	beq.n	8002cec <HAL_GPIO_Init+0x1e8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a3e      	ldr	r2, [pc, #248]	; (8002dcc <HAL_GPIO_Init+0x2c8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d007      	beq.n	8002ce8 <HAL_GPIO_Init+0x1e4>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a3d      	ldr	r2, [pc, #244]	; (8002dd0 <HAL_GPIO_Init+0x2cc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d101      	bne.n	8002ce4 <HAL_GPIO_Init+0x1e0>
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e006      	b.n	8002cf2 <HAL_GPIO_Init+0x1ee>
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	e004      	b.n	8002cf2 <HAL_GPIO_Init+0x1ee>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e002      	b.n	8002cf2 <HAL_GPIO_Init+0x1ee>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_GPIO_Init+0x1ee>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf4:	f002 0203 	and.w	r2, r2, #3
 8002cf8:	0092      	lsls	r2, r2, #2
 8002cfa:	4093      	lsls	r3, r2
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d02:	492f      	ldr	r1, [pc, #188]	; (8002dc0 <HAL_GPIO_Init+0x2bc>)
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	3302      	adds	r3, #2
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d1c:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	492c      	ldr	r1, [pc, #176]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	600b      	str	r3, [r1, #0]
 8002d28:	e006      	b.n	8002d38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d2a:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	4928      	ldr	r1, [pc, #160]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d44:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	4922      	ldr	r1, [pc, #136]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	604b      	str	r3, [r1, #4]
 8002d50:	e006      	b.n	8002d60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d52:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	491e      	ldr	r1, [pc, #120]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d006      	beq.n	8002d7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	4918      	ldr	r1, [pc, #96]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	608b      	str	r3, [r1, #8]
 8002d78:	e006      	b.n	8002d88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	4914      	ldr	r1, [pc, #80]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d021      	beq.n	8002dd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	490e      	ldr	r1, [pc, #56]	; (8002dd4 <HAL_GPIO_Init+0x2d0>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60cb      	str	r3, [r1, #12]
 8002da0:	e021      	b.n	8002de6 <HAL_GPIO_Init+0x2e2>
 8002da2:	bf00      	nop
 8002da4:	10320000 	.word	0x10320000
 8002da8:	10310000 	.word	0x10310000
 8002dac:	10220000 	.word	0x10220000
 8002db0:	10210000 	.word	0x10210000
 8002db4:	10120000 	.word	0x10120000
 8002db8:	10110000 	.word	0x10110000
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40010000 	.word	0x40010000
 8002dc4:	40010800 	.word	0x40010800
 8002dc8:	40010c00 	.word	0x40010c00
 8002dcc:	40011000 	.word	0x40011000
 8002dd0:	40011400 	.word	0x40011400
 8002dd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	4909      	ldr	r1, [pc, #36]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	3301      	adds	r3, #1
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	fa22 f303 	lsr.w	r3, r2, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f47f ae8e 	bne.w	8002b18 <HAL_GPIO_Init+0x14>
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	372c      	adds	r7, #44	; 0x2c
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	40010400 	.word	0x40010400

08002e0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	887b      	ldrh	r3, [r7, #2]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
 8002e28:	e001      	b.n	8002e2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	807b      	strh	r3, [r7, #2]
 8002e46:	4613      	mov	r3, r2
 8002e48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e4a:	787b      	ldrb	r3, [r7, #1]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e50:	887a      	ldrh	r2, [r7, #2]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e56:	e003      	b.n	8002e60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	041a      	lsls	r2, r3, #16
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	611a      	str	r2, [r3, #16]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e82:	4a05      	ldr	r2, [pc, #20]	; (8002e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fd70 	bl	8001970 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40010400 	.word	0x40010400

08002e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e272      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 8087 	beq.w	8002fca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ebc:	4b92      	ldr	r3, [pc, #584]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 030c 	and.w	r3, r3, #12
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d00c      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ec8:	4b8f      	ldr	r3, [pc, #572]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d112      	bne.n	8002efa <HAL_RCC_OscConfig+0x5e>
 8002ed4:	4b8c      	ldr	r3, [pc, #560]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee0:	d10b      	bne.n	8002efa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee2:	4b89      	ldr	r3, [pc, #548]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d06c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x12c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d168      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e24c      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x76>
 8002f04:	4b80      	ldr	r3, [pc, #512]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a7f      	ldr	r2, [pc, #508]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	e02e      	b.n	8002f70 <HAL_RCC_OscConfig+0xd4>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x98>
 8002f1a:	4b7b      	ldr	r3, [pc, #492]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a7a      	ldr	r2, [pc, #488]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b78      	ldr	r3, [pc, #480]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a77      	ldr	r2, [pc, #476]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e01d      	b.n	8002f70 <HAL_RCC_OscConfig+0xd4>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0xbc>
 8002f3e:	4b72      	ldr	r3, [pc, #456]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a71      	ldr	r2, [pc, #452]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b6f      	ldr	r3, [pc, #444]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6e      	ldr	r2, [pc, #440]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e00b      	b.n	8002f70 <HAL_RCC_OscConfig+0xd4>
 8002f58:	4b6b      	ldr	r3, [pc, #428]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6a      	ldr	r2, [pc, #424]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b68      	ldr	r3, [pc, #416]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a67      	ldr	r2, [pc, #412]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7ff f9ea 	bl	8002350 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7ff f9e6 	bl	8002350 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e200      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b5d      	ldr	r3, [pc, #372]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0xe4>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7ff f9d6 	bl	8002350 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7ff f9d2 	bl	8002350 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e1ec      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fba:	4b53      	ldr	r3, [pc, #332]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x10c>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d063      	beq.n	800309e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fd6:	4b4c      	ldr	r3, [pc, #304]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fe2:	4b49      	ldr	r3, [pc, #292]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d11c      	bne.n	8003028 <HAL_RCC_OscConfig+0x18c>
 8002fee:	4b46      	ldr	r3, [pc, #280]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d116      	bne.n	8003028 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	4b43      	ldr	r3, [pc, #268]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_RCC_OscConfig+0x176>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d001      	beq.n	8003012 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e1c0      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003012:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4939      	ldr	r1, [pc, #228]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003026:	e03a      	b.n	800309e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003030:	4b36      	ldr	r3, [pc, #216]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7ff f98b 	bl	8002350 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303e:	f7ff f987 	bl	8002350 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e1a1      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003050:	4b2d      	ldr	r3, [pc, #180]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4927      	ldr	r1, [pc, #156]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]
 8003070:	e015      	b.n	800309e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003072:	4b26      	ldr	r3, [pc, #152]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7ff f96a 	bl	8002350 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003080:	f7ff f966 	bl	8002350 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e180      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003092:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d03a      	beq.n	8003120 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d019      	beq.n	80030e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b2:	4b17      	ldr	r3, [pc, #92]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b8:	f7ff f94a 	bl	8002350 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c0:	f7ff f946 	bl	8002350 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e160      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d2:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030de:	2001      	movs	r0, #1
 80030e0:	f000 fad8 	bl	8003694 <RCC_Delay>
 80030e4:	e01c      	b.n	8003120 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ec:	f7ff f930 	bl	8002350 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f2:	e00f      	b.n	8003114 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f4:	f7ff f92c 	bl	8002350 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d908      	bls.n	8003114 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e146      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
 800310c:	42420000 	.word	0x42420000
 8003110:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003114:	4b92      	ldr	r3, [pc, #584]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e9      	bne.n	80030f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80a6 	beq.w	800327a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003132:	4b8b      	ldr	r3, [pc, #556]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10d      	bne.n	800315a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	4b88      	ldr	r3, [pc, #544]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	4a87      	ldr	r2, [pc, #540]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003148:	61d3      	str	r3, [r2, #28]
 800314a:	4b85      	ldr	r3, [pc, #532]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003156:	2301      	movs	r3, #1
 8003158:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315a:	4b82      	ldr	r3, [pc, #520]	; (8003364 <HAL_RCC_OscConfig+0x4c8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d118      	bne.n	8003198 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003166:	4b7f      	ldr	r3, [pc, #508]	; (8003364 <HAL_RCC_OscConfig+0x4c8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a7e      	ldr	r2, [pc, #504]	; (8003364 <HAL_RCC_OscConfig+0x4c8>)
 800316c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003172:	f7ff f8ed 	bl	8002350 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317a:	f7ff f8e9 	bl	8002350 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b64      	cmp	r3, #100	; 0x64
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e103      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	4b75      	ldr	r3, [pc, #468]	; (8003364 <HAL_RCC_OscConfig+0x4c8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x312>
 80031a0:	4b6f      	ldr	r3, [pc, #444]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4a6e      	ldr	r2, [pc, #440]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6213      	str	r3, [r2, #32]
 80031ac:	e02d      	b.n	800320a <HAL_RCC_OscConfig+0x36e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x334>
 80031b6:	4b6a      	ldr	r3, [pc, #424]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4a69      	ldr	r2, [pc, #420]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6213      	str	r3, [r2, #32]
 80031c2:	4b67      	ldr	r3, [pc, #412]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a66      	ldr	r2, [pc, #408]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	6213      	str	r3, [r2, #32]
 80031ce:	e01c      	b.n	800320a <HAL_RCC_OscConfig+0x36e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d10c      	bne.n	80031f2 <HAL_RCC_OscConfig+0x356>
 80031d8:	4b61      	ldr	r3, [pc, #388]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4a60      	ldr	r2, [pc, #384]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031de:	f043 0304 	orr.w	r3, r3, #4
 80031e2:	6213      	str	r3, [r2, #32]
 80031e4:	4b5e      	ldr	r3, [pc, #376]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4a5d      	ldr	r2, [pc, #372]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6213      	str	r3, [r2, #32]
 80031f0:	e00b      	b.n	800320a <HAL_RCC_OscConfig+0x36e>
 80031f2:	4b5b      	ldr	r3, [pc, #364]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4a5a      	ldr	r2, [pc, #360]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	6213      	str	r3, [r2, #32]
 80031fe:	4b58      	ldr	r3, [pc, #352]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4a57      	ldr	r2, [pc, #348]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d015      	beq.n	800323e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7ff f89d 	bl	8002350 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7ff f899 	bl	8002350 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0b1      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	4b4b      	ldr	r3, [pc, #300]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ee      	beq.n	800321a <HAL_RCC_OscConfig+0x37e>
 800323c:	e014      	b.n	8003268 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7ff f887 	bl	8002350 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7ff f883 	bl	8002350 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e09b      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325c:	4b40      	ldr	r3, [pc, #256]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1ee      	bne.n	8003246 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326e:	4b3c      	ldr	r3, [pc, #240]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	4a3b      	ldr	r2, [pc, #236]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003278:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8087 	beq.w	8003392 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003284:	4b36      	ldr	r3, [pc, #216]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d061      	beq.n	8003354 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d146      	bne.n	8003326 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003298:	4b33      	ldr	r3, [pc, #204]	; (8003368 <HAL_RCC_OscConfig+0x4cc>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7ff f857 	bl	8002350 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a6:	f7ff f853 	bl	8002350 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e06d      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b8:	4b29      	ldr	r3, [pc, #164]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f0      	bne.n	80032a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d108      	bne.n	80032e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032ce:	4b24      	ldr	r3, [pc, #144]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4921      	ldr	r1, [pc, #132]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e0:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a19      	ldr	r1, [r3, #32]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	430b      	orrs	r3, r1
 80032f2:	491b      	ldr	r1, [pc, #108]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7ff f827 	bl	8002350 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003306:	f7ff f823 	bl	8002350 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e03d      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x46a>
 8003324:	e035      	b.n	8003392 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_RCC_OscConfig+0x4cc>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7ff f810 	bl	8002350 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003334:	f7ff f80c 	bl	8002350 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e026      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x498>
 8003352:	e01e      	b.n	8003392 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d107      	bne.n	800336c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e019      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
 8003360:	40021000 	.word	0x40021000
 8003364:	40007000 	.word	0x40007000
 8003368:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_OscConfig+0x500>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	429a      	cmp	r2, r3
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d001      	beq.n	8003392 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000

080033a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0d0      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033b4:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d910      	bls.n	80033e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b67      	ldr	r3, [pc, #412]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 0207 	bic.w	r2, r3, #7
 80033ca:	4965      	ldr	r1, [pc, #404]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b63      	ldr	r3, [pc, #396]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0b8      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033fc:	4b59      	ldr	r3, [pc, #356]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a58      	ldr	r2, [pc, #352]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003406:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003414:	4b53      	ldr	r3, [pc, #332]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4a52      	ldr	r2, [pc, #328]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800341e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003420:	4b50      	ldr	r3, [pc, #320]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	494d      	ldr	r1, [pc, #308]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d040      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b47      	ldr	r3, [pc, #284]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d115      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e07f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345e:	4b41      	ldr	r3, [pc, #260]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e073      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346e:	4b3d      	ldr	r3, [pc, #244]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e06b      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347e:	4b39      	ldr	r3, [pc, #228]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f023 0203 	bic.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4936      	ldr	r1, [pc, #216]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003490:	f7fe ff5e 	bl	8002350 <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	e00a      	b.n	80034ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003498:	f7fe ff5a 	bl	8002350 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e053      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	4b2d      	ldr	r3, [pc, #180]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 020c 	and.w	r2, r3, #12
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	429a      	cmp	r2, r3
 80034be:	d1eb      	bne.n	8003498 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c0:	4b27      	ldr	r3, [pc, #156]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d210      	bcs.n	80034f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 0207 	bic.w	r2, r3, #7
 80034d6:	4922      	ldr	r1, [pc, #136]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b20      	ldr	r3, [pc, #128]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e032      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4916      	ldr	r1, [pc, #88]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	4313      	orrs	r3, r2
 800350c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	490e      	ldr	r1, [pc, #56]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	4313      	orrs	r3, r2
 800352c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800352e:	f000 f821 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8003532:	4602      	mov	r2, r0
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	490a      	ldr	r1, [pc, #40]	; (8003568 <HAL_RCC_ClockConfig+0x1c8>)
 8003540:	5ccb      	ldrb	r3, [r1, r3]
 8003542:	fa22 f303 	lsr.w	r3, r2, r3
 8003546:	4a09      	ldr	r2, [pc, #36]	; (800356c <HAL_RCC_ClockConfig+0x1cc>)
 8003548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCC_ClockConfig+0x1d0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fe febc 	bl	80022cc <HAL_InitTick>

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40022000 	.word	0x40022000
 8003564:	40021000 	.word	0x40021000
 8003568:	08007860 	.word	0x08007860
 800356c:	20000090 	.word	0x20000090
 8003570:	20000094 	.word	0x20000094

08003574 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003574:	b490      	push	{r4, r7}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800357a:	4b29      	ldr	r3, [pc, #164]	; (8003620 <HAL_RCC_GetSysClockFreq+0xac>)
 800357c:	1d3c      	adds	r4, r7, #4
 800357e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003580:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003584:	f240 2301 	movw	r3, #513	; 0x201
 8003588:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	2300      	movs	r3, #0
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800359e:	4b21      	ldr	r3, [pc, #132]	; (8003624 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d002      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x40>
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0x46>
 80035b2:	e02b      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035b4:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035b6:	623b      	str	r3, [r7, #32]
      break;
 80035b8:	e02b      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	0c9b      	lsrs	r3, r3, #18
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3328      	adds	r3, #40	; 0x28
 80035c4:	443b      	add	r3, r7
 80035c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d012      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	0c5b      	lsrs	r3, r3, #17
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	3328      	adds	r3, #40	; 0x28
 80035e2:	443b      	add	r3, r7
 80035e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	4a0e      	ldr	r2, [pc, #56]	; (8003628 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035ee:	fb03 f202 	mul.w	r2, r3, r2
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	e004      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	4a0b      	ldr	r2, [pc, #44]	; (800362c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003600:	fb02 f303 	mul.w	r3, r2, r3
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	623b      	str	r3, [r7, #32]
      break;
 800360a:	e002      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_RCC_GetSysClockFreq+0xb4>)
 800360e:	623b      	str	r3, [r7, #32]
      break;
 8003610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003612:	6a3b      	ldr	r3, [r7, #32]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3728      	adds	r7, #40	; 0x28
 8003618:	46bd      	mov	sp, r7
 800361a:	bc90      	pop	{r4, r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	08007850 	.word	0x08007850
 8003624:	40021000 	.word	0x40021000
 8003628:	007a1200 	.word	0x007a1200
 800362c:	003d0900 	.word	0x003d0900

08003630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003634:	4b02      	ldr	r3, [pc, #8]	; (8003640 <HAL_RCC_GetHCLKFreq+0x10>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	20000090 	.word	0x20000090

08003644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003648:	f7ff fff2 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	0a1b      	lsrs	r3, r3, #8
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4903      	ldr	r1, [pc, #12]	; (8003668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40021000 	.word	0x40021000
 8003668:	08007870 	.word	0x08007870

0800366c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003670:	f7ff ffde 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	0adb      	lsrs	r3, r3, #11
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4903      	ldr	r1, [pc, #12]	; (8003690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	08007870 	.word	0x08007870

08003694 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <RCC_Delay+0x34>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <RCC_Delay+0x38>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0a5b      	lsrs	r3, r3, #9
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036b0:	bf00      	nop
  }
  while (Delay --);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1e5a      	subs	r2, r3, #1
 80036b6:	60fa      	str	r2, [r7, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f9      	bne.n	80036b0 <RCC_Delay+0x1c>
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	20000090 	.word	0x20000090
 80036cc:	10624dd3 	.word	0x10624dd3

080036d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e041      	b.n	8003766 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe fb1e 	bl	8001d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f000 f93c 	bl	800398c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b01      	cmp	r3, #1
 8003782:	d001      	beq.n	8003788 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e032      	b.n	80037ee <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a18      	ldr	r2, [pc, #96]	; (80037f8 <HAL_TIM_Base_Start+0x88>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00e      	beq.n	80037b8 <HAL_TIM_Base_Start+0x48>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a2:	d009      	beq.n	80037b8 <HAL_TIM_Base_Start+0x48>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a14      	ldr	r2, [pc, #80]	; (80037fc <HAL_TIM_Base_Start+0x8c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <HAL_TIM_Base_Start+0x48>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a13      	ldr	r2, [pc, #76]	; (8003800 <HAL_TIM_Base_Start+0x90>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d111      	bne.n	80037dc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b06      	cmp	r3, #6
 80037c8:	d010      	beq.n	80037ec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0201 	orr.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037da:	e007      	b.n	80037ec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800

08003804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_TIM_ConfigClockSource+0x18>
 8003818:	2302      	movs	r3, #2
 800381a:	e0b3      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x180>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800383a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003842:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003854:	d03e      	beq.n	80038d4 <HAL_TIM_ConfigClockSource+0xd0>
 8003856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385a:	f200 8087 	bhi.w	800396c <HAL_TIM_ConfigClockSource+0x168>
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003862:	f000 8085 	beq.w	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386a:	d87f      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x168>
 800386c:	2b70      	cmp	r3, #112	; 0x70
 800386e:	d01a      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0xa2>
 8003870:	2b70      	cmp	r3, #112	; 0x70
 8003872:	d87b      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x168>
 8003874:	2b60      	cmp	r3, #96	; 0x60
 8003876:	d050      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x116>
 8003878:	2b60      	cmp	r3, #96	; 0x60
 800387a:	d877      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x168>
 800387c:	2b50      	cmp	r3, #80	; 0x50
 800387e:	d03c      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0xf6>
 8003880:	2b50      	cmp	r3, #80	; 0x50
 8003882:	d873      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x168>
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d058      	beq.n	800393a <HAL_TIM_ConfigClockSource+0x136>
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d86f      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x168>
 800388c:	2b30      	cmp	r3, #48	; 0x30
 800388e:	d064      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x156>
 8003890:	2b30      	cmp	r3, #48	; 0x30
 8003892:	d86b      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x168>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d060      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x156>
 8003898:	2b20      	cmp	r3, #32
 800389a:	d867      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x168>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d05c      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x156>
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d05a      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80038a4:	e062      	b.n	800396c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6899      	ldr	r1, [r3, #8]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f000 f942 	bl	8003b3e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	609a      	str	r2, [r3, #8]
      break;
 80038d2:	e04e      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	6899      	ldr	r1, [r3, #8]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f000 f92b 	bl	8003b3e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f6:	609a      	str	r2, [r3, #8]
      break;
 80038f8:	e03b      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6859      	ldr	r1, [r3, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	461a      	mov	r2, r3
 8003908:	f000 f8a2 	bl	8003a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2150      	movs	r1, #80	; 0x50
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f8f9 	bl	8003b0a <TIM_ITRx_SetConfig>
      break;
 8003918:	e02b      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6859      	ldr	r1, [r3, #4]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	461a      	mov	r2, r3
 8003928:	f000 f8c0 	bl	8003aac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2160      	movs	r1, #96	; 0x60
 8003932:	4618      	mov	r0, r3
 8003934:	f000 f8e9 	bl	8003b0a <TIM_ITRx_SetConfig>
      break;
 8003938:	e01b      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6859      	ldr	r1, [r3, #4]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	461a      	mov	r2, r3
 8003948:	f000 f882 	bl	8003a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2140      	movs	r1, #64	; 0x40
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f8d9 	bl	8003b0a <TIM_ITRx_SetConfig>
      break;
 8003958:	e00b      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f000 f8d0 	bl	8003b0a <TIM_ITRx_SetConfig>
        break;
 800396a:	e002      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800396c:	bf00      	nop
 800396e:	e000      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003970:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a29      	ldr	r2, [pc, #164]	; (8003a44 <TIM_Base_SetConfig+0xb8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00b      	beq.n	80039bc <TIM_Base_SetConfig+0x30>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039aa:	d007      	beq.n	80039bc <TIM_Base_SetConfig+0x30>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a26      	ldr	r2, [pc, #152]	; (8003a48 <TIM_Base_SetConfig+0xbc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <TIM_Base_SetConfig+0x30>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a25      	ldr	r2, [pc, #148]	; (8003a4c <TIM_Base_SetConfig+0xc0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d108      	bne.n	80039ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a1c      	ldr	r2, [pc, #112]	; (8003a44 <TIM_Base_SetConfig+0xb8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00b      	beq.n	80039ee <TIM_Base_SetConfig+0x62>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d007      	beq.n	80039ee <TIM_Base_SetConfig+0x62>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a19      	ldr	r2, [pc, #100]	; (8003a48 <TIM_Base_SetConfig+0xbc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d003      	beq.n	80039ee <TIM_Base_SetConfig+0x62>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a18      	ldr	r2, [pc, #96]	; (8003a4c <TIM_Base_SetConfig+0xc0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d108      	bne.n	8003a00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a07      	ldr	r2, [pc, #28]	; (8003a44 <TIM_Base_SetConfig+0xb8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	615a      	str	r2, [r3, #20]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800

08003a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f023 0201 	bic.w	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f023 030a 	bic.w	r3, r3, #10
 8003a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f023 0210 	bic.w	r2, r3, #16
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ad6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	031b      	lsls	r3, r3, #12
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ae8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	621a      	str	r2, [r3, #32]
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr

08003b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f043 0307 	orr.w	r3, r3, #7
 8003b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	609a      	str	r2, [r3, #8]
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b087      	sub	sp, #28
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	021a      	lsls	r2, r3, #8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	609a      	str	r2, [r3, #8]
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bc80      	pop	{r7}
 8003b7a:	4770      	bx	lr

08003b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e046      	b.n	8003c22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be0:	d009      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a10      	ldr	r2, [pc, #64]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d10c      	bne.n	8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800

08003c38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e03f      	b.n	8003cca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fe f888 	bl	8001d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2224      	movs	r2, #36	; 0x24
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fd47 	bl	8004710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695a      	ldr	r2, [r3, #20]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d130      	bne.n	8003d4e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_UART_Transmit_IT+0x26>
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e029      	b.n	8003d50 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_UART_Transmit_IT+0x38>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e022      	b.n	8003d50 <HAL_UART_Transmit_IT+0x7e>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	88fa      	ldrh	r2, [r7, #6]
 8003d1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	88fa      	ldrh	r2, [r7, #6]
 8003d22:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2221      	movs	r2, #33	; 0x21
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d48:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e000      	b.n	8003d50 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
  }
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	4613      	mov	r3, r2
 8003d66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d11d      	bne.n	8003db0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_UART_Receive_IT+0x26>
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e016      	b.n	8003db2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Receive_IT+0x38>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e00f      	b.n	8003db2 <HAL_UART_Receive_IT+0x58>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	461a      	mov	r2, r3
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 faaf 	bl	800430a <UART_Start_Receive_IT>
 8003dac:	4603      	mov	r3, r0
 8003dae:	e000      	b.n	8003db2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003db0:	2302      	movs	r3, #2
  }
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d11d      	bne.n	8003e10 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_UART_Receive_DMA+0x26>
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e016      	b.n	8003e12 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_UART_Receive_DMA+0x38>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e00f      	b.n	8003e12 <HAL_UART_Receive_DMA+0x58>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003e00:	88fb      	ldrh	r3, [r7, #6]
 8003e02:	461a      	mov	r2, r3
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fab8 	bl	800437c <UART_Start_Receive_DMA>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	e000      	b.n	8003e12 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
  }
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	; 0x28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10d      	bne.n	8003e6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_UART_IRQHandler+0x52>
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fba8 	bl	80045bc <UART_Receive_IT>
      return;
 8003e6c:	e17b      	b.n	8004166 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 80b1 	beq.w	8003fd8 <HAL_UART_IRQHandler+0x1bc>
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_UART_IRQHandler+0x70>
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 80a6 	beq.w	8003fd8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_UART_IRQHandler+0x90>
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	f043 0201 	orr.w	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_UART_IRQHandler+0xb0>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	f043 0202 	orr.w	r2, r3, #2
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_UART_IRQHandler+0xd0>
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	f043 0204 	orr.w	r2, r3, #4
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00f      	beq.n	8003f16 <HAL_UART_IRQHandler+0xfa>
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d104      	bne.n	8003f0a <HAL_UART_IRQHandler+0xee>
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f043 0208 	orr.w	r2, r3, #8
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 811e 	beq.w	800415c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <HAL_UART_IRQHandler+0x11e>
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fb41 	bl	80045bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <HAL_UART_IRQHandler+0x146>
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d031      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fa83 	bl	800446e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d023      	beq.n	8003fbe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f84:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d013      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	4a76      	ldr	r2, [pc, #472]	; (800416c <HAL_UART_IRQHandler+0x350>)
 8003f94:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fe fc08 	bl	80027b0 <HAL_DMA_Abort_IT>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d016      	beq.n	8003fd4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	e00e      	b.n	8003fd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8e3 	bl	8004182 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fbc:	e00a      	b.n	8003fd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f8df 	bl	8004182 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc4:	e006      	b.n	8003fd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f8db 	bl	8004182 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fd2:	e0c3      	b.n	800415c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd4:	bf00      	nop
    return;
 8003fd6:	e0c1      	b.n	800415c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	f040 80a1 	bne.w	8004124 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 809b 	beq.w	8004124 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8095 	beq.w	8004124 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d04e      	beq.n	80040bc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004028:	8a3b      	ldrh	r3, [r7, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8098 	beq.w	8004160 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004034:	8a3a      	ldrh	r2, [r7, #16]
 8004036:	429a      	cmp	r2, r3
 8004038:	f080 8092 	bcs.w	8004160 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8a3a      	ldrh	r2, [r7, #16]
 8004040:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	2b20      	cmp	r3, #32
 800404a:	d02b      	beq.n	80040a4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800405a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695a      	ldr	r2, [r3, #20]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800407a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0210 	bic.w	r2, r2, #16
 8004098:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fb4b 	bl	800273a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	4619      	mov	r1, r3
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f86d 	bl	8004194 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040ba:	e051      	b.n	8004160 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d047      	beq.n	8004164 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80040d4:	8a7b      	ldrh	r3, [r7, #18]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d044      	beq.n	8004164 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040e8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0201 	bic.w	r2, r2, #1
 80040f8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0210 	bic.w	r2, r2, #16
 8004116:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004118:	8a7b      	ldrh	r3, [r7, #18]
 800411a:	4619      	mov	r1, r3
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f839 	bl	8004194 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004122:	e01f      	b.n	8004164 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_UART_IRQHandler+0x324>
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f9d8 	bl	80044ee <UART_Transmit_IT>
    return;
 800413e:	e012      	b.n	8004166 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00d      	beq.n	8004166 <HAL_UART_IRQHandler+0x34a>
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fa19 	bl	800458c <UART_EndTransmit_IT>
    return;
 800415a:	e004      	b.n	8004166 <HAL_UART_IRQHandler+0x34a>
    return;
 800415c:	bf00      	nop
 800415e:	e002      	b.n	8004166 <HAL_UART_IRQHandler+0x34a>
      return;
 8004160:	bf00      	nop
 8004162:	e000      	b.n	8004166 <HAL_UART_IRQHandler+0x34a>
      return;
 8004164:	bf00      	nop
  }
}
 8004166:	3728      	adds	r7, #40	; 0x28
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	080044c7 	.word	0x080044c7

08004170 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d12a      	bne.n	800421c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041da:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695a      	ldr	r2, [r3, #20]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041fa:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	2b01      	cmp	r3, #1
 800420a:	d107      	bne.n	800421c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0210 	bic.w	r2, r2, #16
 800421a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	2b01      	cmp	r3, #1
 8004222:	d106      	bne.n	8004232 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004228:	4619      	mov	r1, r3
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f7ff ffb2 	bl	8004194 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004230:	e002      	b.n	8004238 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7fc ffa4 	bl	8001180 <HAL_UART_RxCpltCallback>
}
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	2b01      	cmp	r3, #1
 8004254:	d108      	bne.n	8004268 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800425a:	085b      	lsrs	r3, r3, #1
 800425c:	b29b      	uxth	r3, r3
 800425e:	4619      	mov	r1, r3
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff ff97 	bl	8004194 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004266:	e002      	b.n	800426e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff ff81 	bl	8004170 <HAL_UART_RxHalfCpltCallback>
}
 800426e:	bf00      	nop
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004292:	2b00      	cmp	r3, #0
 8004294:	bf14      	ite	ne
 8004296:	2301      	movne	r3, #1
 8004298:	2300      	moveq	r3, #0
 800429a:	b2db      	uxtb	r3, r3
 800429c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b21      	cmp	r3, #33	; 0x21
 80042a8:	d108      	bne.n	80042bc <UART_DMAError+0x46>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2200      	movs	r2, #0
 80042b4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80042b6:	68b8      	ldr	r0, [r7, #8]
 80042b8:	f000 f8c4 	bl	8004444 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bf14      	ite	ne
 80042ca:	2301      	movne	r3, #1
 80042cc:	2300      	moveq	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b22      	cmp	r3, #34	; 0x22
 80042dc:	d108      	bne.n	80042f0 <UART_DMAError+0x7a>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2200      	movs	r2, #0
 80042e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042ea:	68b8      	ldr	r0, [r7, #8]
 80042ec:	f000 f8bf 	bl	800446e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	f043 0210 	orr.w	r2, r3, #16
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042fc:	68b8      	ldr	r0, [r7, #8]
 80042fe:	f7ff ff40 	bl	8004182 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800430a:	b480      	push	{r7}
 800430c:	b085      	sub	sp, #20
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	4613      	mov	r3, r2
 8004316:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	88fa      	ldrh	r2, [r7, #6]
 8004322:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	88fa      	ldrh	r2, [r7, #6]
 8004328:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2222      	movs	r2, #34	; 0x22
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800434e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0220 	orr.w	r2, r2, #32
 800436e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	4613      	mov	r3, r2
 8004388:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2222      	movs	r2, #34	; 0x22
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	4a23      	ldr	r2, [pc, #140]	; (8004438 <UART_Start_Receive_DMA+0xbc>)
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	4a22      	ldr	r2, [pc, #136]	; (800443c <UART_Start_Receive_DMA+0xc0>)
 80043b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	4a21      	ldr	r2, [pc, #132]	; (8004440 <UART_Start_Receive_DMA+0xc4>)
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	2200      	movs	r2, #0
 80043c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80043c4:	f107 0308 	add.w	r3, r7, #8
 80043c8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	f7fe f94e 	bl	800267c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80043e0:	2300      	movs	r3, #0
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800440c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0201 	orr.w	r2, r2, #1
 800441c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695a      	ldr	r2, [r3, #20]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800442c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	080041ab 	.word	0x080041ab
 800443c:	08004241 	.word	0x08004241
 8004440:	08004277 	.word	0x08004277

08004444 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800445a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr

0800446e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004484:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0201 	bic.w	r2, r2, #1
 8004494:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	2b01      	cmp	r3, #1
 800449c:	d107      	bne.n	80044ae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0210 	bic.w	r2, r2, #16
 80044ac:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff fe4e 	bl	8004182 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b085      	sub	sp, #20
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b21      	cmp	r3, #33	; 0x21
 8004500:	d13e      	bne.n	8004580 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450a:	d114      	bne.n	8004536 <UART_Transmit_IT+0x48>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d110      	bne.n	8004536 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004528:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	1c9a      	adds	r2, r3, #2
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	621a      	str	r2, [r3, #32]
 8004534:	e008      	b.n	8004548 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	1c59      	adds	r1, r3, #1
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6211      	str	r1, [r2, #32]
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29b      	uxth	r3, r3
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	4619      	mov	r1, r3
 8004556:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10f      	bne.n	800457c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800456a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800457a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	e000      	b.n	8004582 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7fc fddd 	bl	800116c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b22      	cmp	r3, #34	; 0x22
 80045ce:	f040 8099 	bne.w	8004704 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045da:	d117      	bne.n	800460c <UART_Receive_IT+0x50>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d113      	bne.n	800460c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ec:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	1c9a      	adds	r2, r3, #2
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	629a      	str	r2, [r3, #40]	; 0x28
 800460a:	e026      	b.n	800465a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004612:	2300      	movs	r3, #0
 8004614:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461e:	d007      	beq.n	8004630 <UART_Receive_IT+0x74>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <UART_Receive_IT+0x82>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d106      	bne.n	800463e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	b2da      	uxtb	r2, r3
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	e008      	b.n	8004650 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800464a:	b2da      	uxtb	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29b      	uxth	r3, r3
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	4619      	mov	r1, r3
 8004668:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800466a:	2b00      	cmp	r3, #0
 800466c:	d148      	bne.n	8004700 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0220 	bic.w	r2, r2, #32
 800467c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800468c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695a      	ldr	r2, [r3, #20]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d123      	bne.n	80046f6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0210 	bic.w	r2, r2, #16
 80046c2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	2b10      	cmp	r3, #16
 80046d0:	d10a      	bne.n	80046e8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046ec:	4619      	mov	r1, r3
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff fd50 	bl	8004194 <HAL_UARTEx_RxEventCallback>
 80046f4:	e002      	b.n	80046fc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc fd42 	bl	8001180 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e002      	b.n	8004706 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800474a:	f023 030c 	bic.w	r3, r3, #12
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	430b      	orrs	r3, r1
 8004756:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a2c      	ldr	r2, [pc, #176]	; (8004824 <UART_SetConfig+0x114>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d103      	bne.n	8004780 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fe ff78 	bl	800366c <HAL_RCC_GetPCLK2Freq>
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	e002      	b.n	8004786 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004780:	f7fe ff60 	bl	8003644 <HAL_RCC_GetPCLK1Freq>
 8004784:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009a      	lsls	r2, r3, #2
 8004790:	441a      	add	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	4a22      	ldr	r2, [pc, #136]	; (8004828 <UART_SetConfig+0x118>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	0119      	lsls	r1, r3, #4
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009a      	lsls	r2, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047bc:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <UART_SetConfig+0x118>)
 80047be:	fba3 0302 	umull	r0, r3, r3, r2
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	2064      	movs	r0, #100	; 0x64
 80047c6:	fb00 f303 	mul.w	r3, r0, r3
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	3332      	adds	r3, #50	; 0x32
 80047d0:	4a15      	ldr	r2, [pc, #84]	; (8004828 <UART_SetConfig+0x118>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047dc:	4419      	add	r1, r3
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	009a      	lsls	r2, r3, #2
 80047e8:	441a      	add	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <UART_SetConfig+0x118>)
 80047f6:	fba3 0302 	umull	r0, r3, r3, r2
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2064      	movs	r0, #100	; 0x64
 80047fe:	fb00 f303 	mul.w	r3, r0, r3
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	3332      	adds	r3, #50	; 0x32
 8004808:	4a07      	ldr	r2, [pc, #28]	; (8004828 <UART_SetConfig+0x118>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	f003 020f 	and.w	r2, r3, #15
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	440a      	add	r2, r1
 800481a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40013800 	.word	0x40013800
 8004828:	51eb851f 	.word	0x51eb851f

0800482c <__errno>:
 800482c:	4b01      	ldr	r3, [pc, #4]	; (8004834 <__errno+0x8>)
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	2000009c 	.word	0x2000009c

08004838 <__libc_init_array>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	2600      	movs	r6, #0
 800483c:	4d0c      	ldr	r5, [pc, #48]	; (8004870 <__libc_init_array+0x38>)
 800483e:	4c0d      	ldr	r4, [pc, #52]	; (8004874 <__libc_init_array+0x3c>)
 8004840:	1b64      	subs	r4, r4, r5
 8004842:	10a4      	asrs	r4, r4, #2
 8004844:	42a6      	cmp	r6, r4
 8004846:	d109      	bne.n	800485c <__libc_init_array+0x24>
 8004848:	f002 ff88 	bl	800775c <_init>
 800484c:	2600      	movs	r6, #0
 800484e:	4d0a      	ldr	r5, [pc, #40]	; (8004878 <__libc_init_array+0x40>)
 8004850:	4c0a      	ldr	r4, [pc, #40]	; (800487c <__libc_init_array+0x44>)
 8004852:	1b64      	subs	r4, r4, r5
 8004854:	10a4      	asrs	r4, r4, #2
 8004856:	42a6      	cmp	r6, r4
 8004858:	d105      	bne.n	8004866 <__libc_init_array+0x2e>
 800485a:	bd70      	pop	{r4, r5, r6, pc}
 800485c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004860:	4798      	blx	r3
 8004862:	3601      	adds	r6, #1
 8004864:	e7ee      	b.n	8004844 <__libc_init_array+0xc>
 8004866:	f855 3b04 	ldr.w	r3, [r5], #4
 800486a:	4798      	blx	r3
 800486c:	3601      	adds	r6, #1
 800486e:	e7f2      	b.n	8004856 <__libc_init_array+0x1e>
 8004870:	08007cb0 	.word	0x08007cb0
 8004874:	08007cb0 	.word	0x08007cb0
 8004878:	08007cb0 	.word	0x08007cb0
 800487c:	08007cb4 	.word	0x08007cb4

08004880 <memset>:
 8004880:	4603      	mov	r3, r0
 8004882:	4402      	add	r2, r0
 8004884:	4293      	cmp	r3, r2
 8004886:	d100      	bne.n	800488a <memset+0xa>
 8004888:	4770      	bx	lr
 800488a:	f803 1b01 	strb.w	r1, [r3], #1
 800488e:	e7f9      	b.n	8004884 <memset+0x4>

08004890 <__cvt>:
 8004890:	2b00      	cmp	r3, #0
 8004892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004896:	461f      	mov	r7, r3
 8004898:	bfbb      	ittet	lt
 800489a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800489e:	461f      	movlt	r7, r3
 80048a0:	2300      	movge	r3, #0
 80048a2:	232d      	movlt	r3, #45	; 0x2d
 80048a4:	b088      	sub	sp, #32
 80048a6:	4614      	mov	r4, r2
 80048a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80048ac:	7013      	strb	r3, [r2, #0]
 80048ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80048b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80048b4:	f023 0820 	bic.w	r8, r3, #32
 80048b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048bc:	d005      	beq.n	80048ca <__cvt+0x3a>
 80048be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048c2:	d100      	bne.n	80048c6 <__cvt+0x36>
 80048c4:	3501      	adds	r5, #1
 80048c6:	2302      	movs	r3, #2
 80048c8:	e000      	b.n	80048cc <__cvt+0x3c>
 80048ca:	2303      	movs	r3, #3
 80048cc:	aa07      	add	r2, sp, #28
 80048ce:	9204      	str	r2, [sp, #16]
 80048d0:	aa06      	add	r2, sp, #24
 80048d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048d6:	e9cd 3500 	strd	r3, r5, [sp]
 80048da:	4622      	mov	r2, r4
 80048dc:	463b      	mov	r3, r7
 80048de:	f000 fd8b 	bl	80053f8 <_dtoa_r>
 80048e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048e6:	4606      	mov	r6, r0
 80048e8:	d102      	bne.n	80048f0 <__cvt+0x60>
 80048ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048ec:	07db      	lsls	r3, r3, #31
 80048ee:	d522      	bpl.n	8004936 <__cvt+0xa6>
 80048f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048f4:	eb06 0905 	add.w	r9, r6, r5
 80048f8:	d110      	bne.n	800491c <__cvt+0x8c>
 80048fa:	7833      	ldrb	r3, [r6, #0]
 80048fc:	2b30      	cmp	r3, #48	; 0x30
 80048fe:	d10a      	bne.n	8004916 <__cvt+0x86>
 8004900:	2200      	movs	r2, #0
 8004902:	2300      	movs	r3, #0
 8004904:	4620      	mov	r0, r4
 8004906:	4639      	mov	r1, r7
 8004908:	f7fc f858 	bl	80009bc <__aeabi_dcmpeq>
 800490c:	b918      	cbnz	r0, 8004916 <__cvt+0x86>
 800490e:	f1c5 0501 	rsb	r5, r5, #1
 8004912:	f8ca 5000 	str.w	r5, [sl]
 8004916:	f8da 3000 	ldr.w	r3, [sl]
 800491a:	4499      	add	r9, r3
 800491c:	2200      	movs	r2, #0
 800491e:	2300      	movs	r3, #0
 8004920:	4620      	mov	r0, r4
 8004922:	4639      	mov	r1, r7
 8004924:	f7fc f84a 	bl	80009bc <__aeabi_dcmpeq>
 8004928:	b108      	cbz	r0, 800492e <__cvt+0x9e>
 800492a:	f8cd 901c 	str.w	r9, [sp, #28]
 800492e:	2230      	movs	r2, #48	; 0x30
 8004930:	9b07      	ldr	r3, [sp, #28]
 8004932:	454b      	cmp	r3, r9
 8004934:	d307      	bcc.n	8004946 <__cvt+0xb6>
 8004936:	4630      	mov	r0, r6
 8004938:	9b07      	ldr	r3, [sp, #28]
 800493a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800493c:	1b9b      	subs	r3, r3, r6
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	b008      	add	sp, #32
 8004942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004946:	1c59      	adds	r1, r3, #1
 8004948:	9107      	str	r1, [sp, #28]
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	e7f0      	b.n	8004930 <__cvt+0xa0>

0800494e <__exponent>:
 800494e:	4603      	mov	r3, r0
 8004950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004952:	2900      	cmp	r1, #0
 8004954:	f803 2b02 	strb.w	r2, [r3], #2
 8004958:	bfb6      	itet	lt
 800495a:	222d      	movlt	r2, #45	; 0x2d
 800495c:	222b      	movge	r2, #43	; 0x2b
 800495e:	4249      	neglt	r1, r1
 8004960:	2909      	cmp	r1, #9
 8004962:	7042      	strb	r2, [r0, #1]
 8004964:	dd2b      	ble.n	80049be <__exponent+0x70>
 8004966:	f10d 0407 	add.w	r4, sp, #7
 800496a:	46a4      	mov	ip, r4
 800496c:	270a      	movs	r7, #10
 800496e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004972:	460a      	mov	r2, r1
 8004974:	46a6      	mov	lr, r4
 8004976:	fb07 1516 	mls	r5, r7, r6, r1
 800497a:	2a63      	cmp	r2, #99	; 0x63
 800497c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004980:	4631      	mov	r1, r6
 8004982:	f104 34ff 	add.w	r4, r4, #4294967295
 8004986:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800498a:	dcf0      	bgt.n	800496e <__exponent+0x20>
 800498c:	3130      	adds	r1, #48	; 0x30
 800498e:	f1ae 0502 	sub.w	r5, lr, #2
 8004992:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004996:	4629      	mov	r1, r5
 8004998:	1c44      	adds	r4, r0, #1
 800499a:	4561      	cmp	r1, ip
 800499c:	d30a      	bcc.n	80049b4 <__exponent+0x66>
 800499e:	f10d 0209 	add.w	r2, sp, #9
 80049a2:	eba2 020e 	sub.w	r2, r2, lr
 80049a6:	4565      	cmp	r5, ip
 80049a8:	bf88      	it	hi
 80049aa:	2200      	movhi	r2, #0
 80049ac:	4413      	add	r3, r2
 80049ae:	1a18      	subs	r0, r3, r0
 80049b0:	b003      	add	sp, #12
 80049b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049b8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80049bc:	e7ed      	b.n	800499a <__exponent+0x4c>
 80049be:	2330      	movs	r3, #48	; 0x30
 80049c0:	3130      	adds	r1, #48	; 0x30
 80049c2:	7083      	strb	r3, [r0, #2]
 80049c4:	70c1      	strb	r1, [r0, #3]
 80049c6:	1d03      	adds	r3, r0, #4
 80049c8:	e7f1      	b.n	80049ae <__exponent+0x60>
	...

080049cc <_printf_float>:
 80049cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d0:	b091      	sub	sp, #68	; 0x44
 80049d2:	460c      	mov	r4, r1
 80049d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80049d8:	4616      	mov	r6, r2
 80049da:	461f      	mov	r7, r3
 80049dc:	4605      	mov	r5, r0
 80049de:	f001 fc01 	bl	80061e4 <_localeconv_r>
 80049e2:	6803      	ldr	r3, [r0, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	9309      	str	r3, [sp, #36]	; 0x24
 80049e8:	f7fb fbbc 	bl	8000164 <strlen>
 80049ec:	2300      	movs	r3, #0
 80049ee:	930e      	str	r3, [sp, #56]	; 0x38
 80049f0:	f8d8 3000 	ldr.w	r3, [r8]
 80049f4:	900a      	str	r0, [sp, #40]	; 0x28
 80049f6:	3307      	adds	r3, #7
 80049f8:	f023 0307 	bic.w	r3, r3, #7
 80049fc:	f103 0208 	add.w	r2, r3, #8
 8004a00:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a04:	f8d4 b000 	ldr.w	fp, [r4]
 8004a08:	f8c8 2000 	str.w	r2, [r8]
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a14:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004a18:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004a1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a22:	4640      	mov	r0, r8
 8004a24:	4b9c      	ldr	r3, [pc, #624]	; (8004c98 <_printf_float+0x2cc>)
 8004a26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a28:	f7fb fffa 	bl	8000a20 <__aeabi_dcmpun>
 8004a2c:	bb70      	cbnz	r0, 8004a8c <_printf_float+0xc0>
 8004a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a32:	4640      	mov	r0, r8
 8004a34:	4b98      	ldr	r3, [pc, #608]	; (8004c98 <_printf_float+0x2cc>)
 8004a36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a38:	f7fb ffd4 	bl	80009e4 <__aeabi_dcmple>
 8004a3c:	bb30      	cbnz	r0, 8004a8c <_printf_float+0xc0>
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2300      	movs	r3, #0
 8004a42:	4640      	mov	r0, r8
 8004a44:	4651      	mov	r1, sl
 8004a46:	f7fb ffc3 	bl	80009d0 <__aeabi_dcmplt>
 8004a4a:	b110      	cbz	r0, 8004a52 <_printf_float+0x86>
 8004a4c:	232d      	movs	r3, #45	; 0x2d
 8004a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a52:	4b92      	ldr	r3, [pc, #584]	; (8004c9c <_printf_float+0x2d0>)
 8004a54:	4892      	ldr	r0, [pc, #584]	; (8004ca0 <_printf_float+0x2d4>)
 8004a56:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004a5a:	bf94      	ite	ls
 8004a5c:	4698      	movls	r8, r3
 8004a5e:	4680      	movhi	r8, r0
 8004a60:	2303      	movs	r3, #3
 8004a62:	f04f 0a00 	mov.w	sl, #0
 8004a66:	6123      	str	r3, [r4, #16]
 8004a68:	f02b 0304 	bic.w	r3, fp, #4
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	4633      	mov	r3, r6
 8004a70:	4621      	mov	r1, r4
 8004a72:	4628      	mov	r0, r5
 8004a74:	9700      	str	r7, [sp, #0]
 8004a76:	aa0f      	add	r2, sp, #60	; 0x3c
 8004a78:	f000 f9d4 	bl	8004e24 <_printf_common>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	f040 8090 	bne.w	8004ba2 <_printf_float+0x1d6>
 8004a82:	f04f 30ff 	mov.w	r0, #4294967295
 8004a86:	b011      	add	sp, #68	; 0x44
 8004a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	4653      	mov	r3, sl
 8004a90:	4640      	mov	r0, r8
 8004a92:	4651      	mov	r1, sl
 8004a94:	f7fb ffc4 	bl	8000a20 <__aeabi_dcmpun>
 8004a98:	b148      	cbz	r0, 8004aae <_printf_float+0xe2>
 8004a9a:	f1ba 0f00 	cmp.w	sl, #0
 8004a9e:	bfb8      	it	lt
 8004aa0:	232d      	movlt	r3, #45	; 0x2d
 8004aa2:	4880      	ldr	r0, [pc, #512]	; (8004ca4 <_printf_float+0x2d8>)
 8004aa4:	bfb8      	it	lt
 8004aa6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004aaa:	4b7f      	ldr	r3, [pc, #508]	; (8004ca8 <_printf_float+0x2dc>)
 8004aac:	e7d3      	b.n	8004a56 <_printf_float+0x8a>
 8004aae:	6863      	ldr	r3, [r4, #4]
 8004ab0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	d142      	bne.n	8004b3e <_printf_float+0x172>
 8004ab8:	2306      	movs	r3, #6
 8004aba:	6063      	str	r3, [r4, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	9206      	str	r2, [sp, #24]
 8004ac0:	aa0e      	add	r2, sp, #56	; 0x38
 8004ac2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004ac6:	aa0d      	add	r2, sp, #52	; 0x34
 8004ac8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004acc:	9203      	str	r2, [sp, #12]
 8004ace:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004ad2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	6863      	ldr	r3, [r4, #4]
 8004ada:	4642      	mov	r2, r8
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	4628      	mov	r0, r5
 8004ae0:	4653      	mov	r3, sl
 8004ae2:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ae4:	f7ff fed4 	bl	8004890 <__cvt>
 8004ae8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004aea:	4680      	mov	r8, r0
 8004aec:	2947      	cmp	r1, #71	; 0x47
 8004aee:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004af0:	d108      	bne.n	8004b04 <_printf_float+0x138>
 8004af2:	1cc8      	adds	r0, r1, #3
 8004af4:	db02      	blt.n	8004afc <_printf_float+0x130>
 8004af6:	6863      	ldr	r3, [r4, #4]
 8004af8:	4299      	cmp	r1, r3
 8004afa:	dd40      	ble.n	8004b7e <_printf_float+0x1b2>
 8004afc:	f1a9 0902 	sub.w	r9, r9, #2
 8004b00:	fa5f f989 	uxtb.w	r9, r9
 8004b04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b08:	d81f      	bhi.n	8004b4a <_printf_float+0x17e>
 8004b0a:	464a      	mov	r2, r9
 8004b0c:	3901      	subs	r1, #1
 8004b0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b12:	910d      	str	r1, [sp, #52]	; 0x34
 8004b14:	f7ff ff1b 	bl	800494e <__exponent>
 8004b18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b1a:	4682      	mov	sl, r0
 8004b1c:	1813      	adds	r3, r2, r0
 8004b1e:	2a01      	cmp	r2, #1
 8004b20:	6123      	str	r3, [r4, #16]
 8004b22:	dc02      	bgt.n	8004b2a <_printf_float+0x15e>
 8004b24:	6822      	ldr	r2, [r4, #0]
 8004b26:	07d2      	lsls	r2, r2, #31
 8004b28:	d501      	bpl.n	8004b2e <_printf_float+0x162>
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	6123      	str	r3, [r4, #16]
 8004b2e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d09b      	beq.n	8004a6e <_printf_float+0xa2>
 8004b36:	232d      	movs	r3, #45	; 0x2d
 8004b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b3c:	e797      	b.n	8004a6e <_printf_float+0xa2>
 8004b3e:	2947      	cmp	r1, #71	; 0x47
 8004b40:	d1bc      	bne.n	8004abc <_printf_float+0xf0>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1ba      	bne.n	8004abc <_printf_float+0xf0>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e7b7      	b.n	8004aba <_printf_float+0xee>
 8004b4a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004b4e:	d118      	bne.n	8004b82 <_printf_float+0x1b6>
 8004b50:	2900      	cmp	r1, #0
 8004b52:	6863      	ldr	r3, [r4, #4]
 8004b54:	dd0b      	ble.n	8004b6e <_printf_float+0x1a2>
 8004b56:	6121      	str	r1, [r4, #16]
 8004b58:	b913      	cbnz	r3, 8004b60 <_printf_float+0x194>
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	07d0      	lsls	r0, r2, #31
 8004b5e:	d502      	bpl.n	8004b66 <_printf_float+0x19a>
 8004b60:	3301      	adds	r3, #1
 8004b62:	440b      	add	r3, r1
 8004b64:	6123      	str	r3, [r4, #16]
 8004b66:	f04f 0a00 	mov.w	sl, #0
 8004b6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b6c:	e7df      	b.n	8004b2e <_printf_float+0x162>
 8004b6e:	b913      	cbnz	r3, 8004b76 <_printf_float+0x1aa>
 8004b70:	6822      	ldr	r2, [r4, #0]
 8004b72:	07d2      	lsls	r2, r2, #31
 8004b74:	d501      	bpl.n	8004b7a <_printf_float+0x1ae>
 8004b76:	3302      	adds	r3, #2
 8004b78:	e7f4      	b.n	8004b64 <_printf_float+0x198>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e7f2      	b.n	8004b64 <_printf_float+0x198>
 8004b7e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b84:	4299      	cmp	r1, r3
 8004b86:	db05      	blt.n	8004b94 <_printf_float+0x1c8>
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	6121      	str	r1, [r4, #16]
 8004b8c:	07d8      	lsls	r0, r3, #31
 8004b8e:	d5ea      	bpl.n	8004b66 <_printf_float+0x19a>
 8004b90:	1c4b      	adds	r3, r1, #1
 8004b92:	e7e7      	b.n	8004b64 <_printf_float+0x198>
 8004b94:	2900      	cmp	r1, #0
 8004b96:	bfcc      	ite	gt
 8004b98:	2201      	movgt	r2, #1
 8004b9a:	f1c1 0202 	rsble	r2, r1, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	e7e0      	b.n	8004b64 <_printf_float+0x198>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	055a      	lsls	r2, r3, #21
 8004ba6:	d407      	bmi.n	8004bb8 <_printf_float+0x1ec>
 8004ba8:	6923      	ldr	r3, [r4, #16]
 8004baa:	4642      	mov	r2, r8
 8004bac:	4631      	mov	r1, r6
 8004bae:	4628      	mov	r0, r5
 8004bb0:	47b8      	blx	r7
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d12b      	bne.n	8004c0e <_printf_float+0x242>
 8004bb6:	e764      	b.n	8004a82 <_printf_float+0xb6>
 8004bb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004bbc:	f240 80dd 	bls.w	8004d7a <_printf_float+0x3ae>
 8004bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f7fb fef8 	bl	80009bc <__aeabi_dcmpeq>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d033      	beq.n	8004c38 <_printf_float+0x26c>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	4a35      	ldr	r2, [pc, #212]	; (8004cac <_printf_float+0x2e0>)
 8004bd8:	47b8      	blx	r7
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f43f af51 	beq.w	8004a82 <_printf_float+0xb6>
 8004be0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004be4:	429a      	cmp	r2, r3
 8004be6:	db02      	blt.n	8004bee <_printf_float+0x222>
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	07d8      	lsls	r0, r3, #31
 8004bec:	d50f      	bpl.n	8004c0e <_printf_float+0x242>
 8004bee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	47b8      	blx	r7
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	f43f af42 	beq.w	8004a82 <_printf_float+0xb6>
 8004bfe:	f04f 0800 	mov.w	r8, #0
 8004c02:	f104 091a 	add.w	r9, r4, #26
 8004c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	4543      	cmp	r3, r8
 8004c0c:	dc09      	bgt.n	8004c22 <_printf_float+0x256>
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	079b      	lsls	r3, r3, #30
 8004c12:	f100 8102 	bmi.w	8004e1a <_printf_float+0x44e>
 8004c16:	68e0      	ldr	r0, [r4, #12]
 8004c18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c1a:	4298      	cmp	r0, r3
 8004c1c:	bfb8      	it	lt
 8004c1e:	4618      	movlt	r0, r3
 8004c20:	e731      	b.n	8004a86 <_printf_float+0xba>
 8004c22:	2301      	movs	r3, #1
 8004c24:	464a      	mov	r2, r9
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	47b8      	blx	r7
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	f43f af28 	beq.w	8004a82 <_printf_float+0xb6>
 8004c32:	f108 0801 	add.w	r8, r8, #1
 8004c36:	e7e6      	b.n	8004c06 <_printf_float+0x23a>
 8004c38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	dc38      	bgt.n	8004cb0 <_printf_float+0x2e4>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4631      	mov	r1, r6
 8004c42:	4628      	mov	r0, r5
 8004c44:	4a19      	ldr	r2, [pc, #100]	; (8004cac <_printf_float+0x2e0>)
 8004c46:	47b8      	blx	r7
 8004c48:	3001      	adds	r0, #1
 8004c4a:	f43f af1a 	beq.w	8004a82 <_printf_float+0xb6>
 8004c4e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c52:	4313      	orrs	r3, r2
 8004c54:	d102      	bne.n	8004c5c <_printf_float+0x290>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	07d9      	lsls	r1, r3, #31
 8004c5a:	d5d8      	bpl.n	8004c0e <_printf_float+0x242>
 8004c5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c60:	4631      	mov	r1, r6
 8004c62:	4628      	mov	r0, r5
 8004c64:	47b8      	blx	r7
 8004c66:	3001      	adds	r0, #1
 8004c68:	f43f af0b 	beq.w	8004a82 <_printf_float+0xb6>
 8004c6c:	f04f 0900 	mov.w	r9, #0
 8004c70:	f104 0a1a 	add.w	sl, r4, #26
 8004c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c76:	425b      	negs	r3, r3
 8004c78:	454b      	cmp	r3, r9
 8004c7a:	dc01      	bgt.n	8004c80 <_printf_float+0x2b4>
 8004c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c7e:	e794      	b.n	8004baa <_printf_float+0x1de>
 8004c80:	2301      	movs	r3, #1
 8004c82:	4652      	mov	r2, sl
 8004c84:	4631      	mov	r1, r6
 8004c86:	4628      	mov	r0, r5
 8004c88:	47b8      	blx	r7
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	f43f aef9 	beq.w	8004a82 <_printf_float+0xb6>
 8004c90:	f109 0901 	add.w	r9, r9, #1
 8004c94:	e7ee      	b.n	8004c74 <_printf_float+0x2a8>
 8004c96:	bf00      	nop
 8004c98:	7fefffff 	.word	0x7fefffff
 8004c9c:	0800787c 	.word	0x0800787c
 8004ca0:	08007880 	.word	0x08007880
 8004ca4:	08007888 	.word	0x08007888
 8004ca8:	08007884 	.word	0x08007884
 8004cac:	0800788c 	.word	0x0800788c
 8004cb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	bfa8      	it	ge
 8004cb8:	461a      	movge	r2, r3
 8004cba:	2a00      	cmp	r2, #0
 8004cbc:	4691      	mov	r9, r2
 8004cbe:	dc37      	bgt.n	8004d30 <_printf_float+0x364>
 8004cc0:	f04f 0b00 	mov.w	fp, #0
 8004cc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cc8:	f104 021a 	add.w	r2, r4, #26
 8004ccc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004cd0:	ebaa 0309 	sub.w	r3, sl, r9
 8004cd4:	455b      	cmp	r3, fp
 8004cd6:	dc33      	bgt.n	8004d40 <_printf_float+0x374>
 8004cd8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	db3b      	blt.n	8004d58 <_printf_float+0x38c>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	07da      	lsls	r2, r3, #31
 8004ce4:	d438      	bmi.n	8004d58 <_printf_float+0x38c>
 8004ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ce8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cea:	eba3 020a 	sub.w	r2, r3, sl
 8004cee:	eba3 0901 	sub.w	r9, r3, r1
 8004cf2:	4591      	cmp	r9, r2
 8004cf4:	bfa8      	it	ge
 8004cf6:	4691      	movge	r9, r2
 8004cf8:	f1b9 0f00 	cmp.w	r9, #0
 8004cfc:	dc34      	bgt.n	8004d68 <_printf_float+0x39c>
 8004cfe:	f04f 0800 	mov.w	r8, #0
 8004d02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d06:	f104 0a1a 	add.w	sl, r4, #26
 8004d0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	eba3 0309 	sub.w	r3, r3, r9
 8004d14:	4543      	cmp	r3, r8
 8004d16:	f77f af7a 	ble.w	8004c0e <_printf_float+0x242>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4652      	mov	r2, sl
 8004d1e:	4631      	mov	r1, r6
 8004d20:	4628      	mov	r0, r5
 8004d22:	47b8      	blx	r7
 8004d24:	3001      	adds	r0, #1
 8004d26:	f43f aeac 	beq.w	8004a82 <_printf_float+0xb6>
 8004d2a:	f108 0801 	add.w	r8, r8, #1
 8004d2e:	e7ec      	b.n	8004d0a <_printf_float+0x33e>
 8004d30:	4613      	mov	r3, r2
 8004d32:	4631      	mov	r1, r6
 8004d34:	4642      	mov	r2, r8
 8004d36:	4628      	mov	r0, r5
 8004d38:	47b8      	blx	r7
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	d1c0      	bne.n	8004cc0 <_printf_float+0x2f4>
 8004d3e:	e6a0      	b.n	8004a82 <_printf_float+0xb6>
 8004d40:	2301      	movs	r3, #1
 8004d42:	4631      	mov	r1, r6
 8004d44:	4628      	mov	r0, r5
 8004d46:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d48:	47b8      	blx	r7
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	f43f ae99 	beq.w	8004a82 <_printf_float+0xb6>
 8004d50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d52:	f10b 0b01 	add.w	fp, fp, #1
 8004d56:	e7b9      	b.n	8004ccc <_printf_float+0x300>
 8004d58:	4631      	mov	r1, r6
 8004d5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d5e:	4628      	mov	r0, r5
 8004d60:	47b8      	blx	r7
 8004d62:	3001      	adds	r0, #1
 8004d64:	d1bf      	bne.n	8004ce6 <_printf_float+0x31a>
 8004d66:	e68c      	b.n	8004a82 <_printf_float+0xb6>
 8004d68:	464b      	mov	r3, r9
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	eb08 020a 	add.w	r2, r8, sl
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	d1c2      	bne.n	8004cfe <_printf_float+0x332>
 8004d78:	e683      	b.n	8004a82 <_printf_float+0xb6>
 8004d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d7c:	2a01      	cmp	r2, #1
 8004d7e:	dc01      	bgt.n	8004d84 <_printf_float+0x3b8>
 8004d80:	07db      	lsls	r3, r3, #31
 8004d82:	d537      	bpl.n	8004df4 <_printf_float+0x428>
 8004d84:	2301      	movs	r3, #1
 8004d86:	4642      	mov	r2, r8
 8004d88:	4631      	mov	r1, r6
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	47b8      	blx	r7
 8004d8e:	3001      	adds	r0, #1
 8004d90:	f43f ae77 	beq.w	8004a82 <_printf_float+0xb6>
 8004d94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d98:	4631      	mov	r1, r6
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	47b8      	blx	r7
 8004d9e:	3001      	adds	r0, #1
 8004da0:	f43f ae6f 	beq.w	8004a82 <_printf_float+0xb6>
 8004da4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004da8:	2200      	movs	r2, #0
 8004daa:	2300      	movs	r3, #0
 8004dac:	f7fb fe06 	bl	80009bc <__aeabi_dcmpeq>
 8004db0:	b9d8      	cbnz	r0, 8004dea <_printf_float+0x41e>
 8004db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004db4:	f108 0201 	add.w	r2, r8, #1
 8004db8:	3b01      	subs	r3, #1
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	47b8      	blx	r7
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d10e      	bne.n	8004de2 <_printf_float+0x416>
 8004dc4:	e65d      	b.n	8004a82 <_printf_float+0xb6>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	464a      	mov	r2, r9
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f ae56 	beq.w	8004a82 <_printf_float+0xb6>
 8004dd6:	f108 0801 	add.w	r8, r8, #1
 8004dda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	4543      	cmp	r3, r8
 8004de0:	dcf1      	bgt.n	8004dc6 <_printf_float+0x3fa>
 8004de2:	4653      	mov	r3, sl
 8004de4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004de8:	e6e0      	b.n	8004bac <_printf_float+0x1e0>
 8004dea:	f04f 0800 	mov.w	r8, #0
 8004dee:	f104 091a 	add.w	r9, r4, #26
 8004df2:	e7f2      	b.n	8004dda <_printf_float+0x40e>
 8004df4:	2301      	movs	r3, #1
 8004df6:	4642      	mov	r2, r8
 8004df8:	e7df      	b.n	8004dba <_printf_float+0x3ee>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	464a      	mov	r2, r9
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f ae3c 	beq.w	8004a82 <_printf_float+0xb6>
 8004e0a:	f108 0801 	add.w	r8, r8, #1
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e12:	1a5b      	subs	r3, r3, r1
 8004e14:	4543      	cmp	r3, r8
 8004e16:	dcf0      	bgt.n	8004dfa <_printf_float+0x42e>
 8004e18:	e6fd      	b.n	8004c16 <_printf_float+0x24a>
 8004e1a:	f04f 0800 	mov.w	r8, #0
 8004e1e:	f104 0919 	add.w	r9, r4, #25
 8004e22:	e7f4      	b.n	8004e0e <_printf_float+0x442>

08004e24 <_printf_common>:
 8004e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e28:	4616      	mov	r6, r2
 8004e2a:	4699      	mov	r9, r3
 8004e2c:	688a      	ldr	r2, [r1, #8]
 8004e2e:	690b      	ldr	r3, [r1, #16]
 8004e30:	4607      	mov	r7, r0
 8004e32:	4293      	cmp	r3, r2
 8004e34:	bfb8      	it	lt
 8004e36:	4613      	movlt	r3, r2
 8004e38:	6033      	str	r3, [r6, #0]
 8004e3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e3e:	460c      	mov	r4, r1
 8004e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e44:	b10a      	cbz	r2, 8004e4a <_printf_common+0x26>
 8004e46:	3301      	adds	r3, #1
 8004e48:	6033      	str	r3, [r6, #0]
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	0699      	lsls	r1, r3, #26
 8004e4e:	bf42      	ittt	mi
 8004e50:	6833      	ldrmi	r3, [r6, #0]
 8004e52:	3302      	addmi	r3, #2
 8004e54:	6033      	strmi	r3, [r6, #0]
 8004e56:	6825      	ldr	r5, [r4, #0]
 8004e58:	f015 0506 	ands.w	r5, r5, #6
 8004e5c:	d106      	bne.n	8004e6c <_printf_common+0x48>
 8004e5e:	f104 0a19 	add.w	sl, r4, #25
 8004e62:	68e3      	ldr	r3, [r4, #12]
 8004e64:	6832      	ldr	r2, [r6, #0]
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	42ab      	cmp	r3, r5
 8004e6a:	dc28      	bgt.n	8004ebe <_printf_common+0x9a>
 8004e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e70:	1e13      	subs	r3, r2, #0
 8004e72:	6822      	ldr	r2, [r4, #0]
 8004e74:	bf18      	it	ne
 8004e76:	2301      	movne	r3, #1
 8004e78:	0692      	lsls	r2, r2, #26
 8004e7a:	d42d      	bmi.n	8004ed8 <_printf_common+0xb4>
 8004e7c:	4649      	mov	r1, r9
 8004e7e:	4638      	mov	r0, r7
 8004e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e84:	47c0      	blx	r8
 8004e86:	3001      	adds	r0, #1
 8004e88:	d020      	beq.n	8004ecc <_printf_common+0xa8>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	68e5      	ldr	r5, [r4, #12]
 8004e8e:	f003 0306 	and.w	r3, r3, #6
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	bf18      	it	ne
 8004e96:	2500      	movne	r5, #0
 8004e98:	6832      	ldr	r2, [r6, #0]
 8004e9a:	f04f 0600 	mov.w	r6, #0
 8004e9e:	68a3      	ldr	r3, [r4, #8]
 8004ea0:	bf08      	it	eq
 8004ea2:	1aad      	subeq	r5, r5, r2
 8004ea4:	6922      	ldr	r2, [r4, #16]
 8004ea6:	bf08      	it	eq
 8004ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004eac:	4293      	cmp	r3, r2
 8004eae:	bfc4      	itt	gt
 8004eb0:	1a9b      	subgt	r3, r3, r2
 8004eb2:	18ed      	addgt	r5, r5, r3
 8004eb4:	341a      	adds	r4, #26
 8004eb6:	42b5      	cmp	r5, r6
 8004eb8:	d11a      	bne.n	8004ef0 <_printf_common+0xcc>
 8004eba:	2000      	movs	r0, #0
 8004ebc:	e008      	b.n	8004ed0 <_printf_common+0xac>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	4652      	mov	r2, sl
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	47c0      	blx	r8
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d103      	bne.n	8004ed4 <_printf_common+0xb0>
 8004ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed4:	3501      	adds	r5, #1
 8004ed6:	e7c4      	b.n	8004e62 <_printf_common+0x3e>
 8004ed8:	2030      	movs	r0, #48	; 0x30
 8004eda:	18e1      	adds	r1, r4, r3
 8004edc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ee6:	4422      	add	r2, r4
 8004ee8:	3302      	adds	r3, #2
 8004eea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eee:	e7c5      	b.n	8004e7c <_printf_common+0x58>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	4622      	mov	r2, r4
 8004ef4:	4649      	mov	r1, r9
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	47c0      	blx	r8
 8004efa:	3001      	adds	r0, #1
 8004efc:	d0e6      	beq.n	8004ecc <_printf_common+0xa8>
 8004efe:	3601      	adds	r6, #1
 8004f00:	e7d9      	b.n	8004eb6 <_printf_common+0x92>
	...

08004f04 <_printf_i>:
 8004f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f08:	7e0f      	ldrb	r7, [r1, #24]
 8004f0a:	4691      	mov	r9, r2
 8004f0c:	2f78      	cmp	r7, #120	; 0x78
 8004f0e:	4680      	mov	r8, r0
 8004f10:	460c      	mov	r4, r1
 8004f12:	469a      	mov	sl, r3
 8004f14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f1a:	d807      	bhi.n	8004f2c <_printf_i+0x28>
 8004f1c:	2f62      	cmp	r7, #98	; 0x62
 8004f1e:	d80a      	bhi.n	8004f36 <_printf_i+0x32>
 8004f20:	2f00      	cmp	r7, #0
 8004f22:	f000 80d9 	beq.w	80050d8 <_printf_i+0x1d4>
 8004f26:	2f58      	cmp	r7, #88	; 0x58
 8004f28:	f000 80a4 	beq.w	8005074 <_printf_i+0x170>
 8004f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f34:	e03a      	b.n	8004fac <_printf_i+0xa8>
 8004f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f3a:	2b15      	cmp	r3, #21
 8004f3c:	d8f6      	bhi.n	8004f2c <_printf_i+0x28>
 8004f3e:	a101      	add	r1, pc, #4	; (adr r1, 8004f44 <_printf_i+0x40>)
 8004f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f44:	08004f9d 	.word	0x08004f9d
 8004f48:	08004fb1 	.word	0x08004fb1
 8004f4c:	08004f2d 	.word	0x08004f2d
 8004f50:	08004f2d 	.word	0x08004f2d
 8004f54:	08004f2d 	.word	0x08004f2d
 8004f58:	08004f2d 	.word	0x08004f2d
 8004f5c:	08004fb1 	.word	0x08004fb1
 8004f60:	08004f2d 	.word	0x08004f2d
 8004f64:	08004f2d 	.word	0x08004f2d
 8004f68:	08004f2d 	.word	0x08004f2d
 8004f6c:	08004f2d 	.word	0x08004f2d
 8004f70:	080050bf 	.word	0x080050bf
 8004f74:	08004fe1 	.word	0x08004fe1
 8004f78:	080050a1 	.word	0x080050a1
 8004f7c:	08004f2d 	.word	0x08004f2d
 8004f80:	08004f2d 	.word	0x08004f2d
 8004f84:	080050e1 	.word	0x080050e1
 8004f88:	08004f2d 	.word	0x08004f2d
 8004f8c:	08004fe1 	.word	0x08004fe1
 8004f90:	08004f2d 	.word	0x08004f2d
 8004f94:	08004f2d 	.word	0x08004f2d
 8004f98:	080050a9 	.word	0x080050a9
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	1d1a      	adds	r2, r3, #4
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	602a      	str	r2, [r5, #0]
 8004fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0a4      	b.n	80050fa <_printf_i+0x1f6>
 8004fb0:	6820      	ldr	r0, [r4, #0]
 8004fb2:	6829      	ldr	r1, [r5, #0]
 8004fb4:	0606      	lsls	r6, r0, #24
 8004fb6:	f101 0304 	add.w	r3, r1, #4
 8004fba:	d50a      	bpl.n	8004fd2 <_printf_i+0xce>
 8004fbc:	680e      	ldr	r6, [r1, #0]
 8004fbe:	602b      	str	r3, [r5, #0]
 8004fc0:	2e00      	cmp	r6, #0
 8004fc2:	da03      	bge.n	8004fcc <_printf_i+0xc8>
 8004fc4:	232d      	movs	r3, #45	; 0x2d
 8004fc6:	4276      	negs	r6, r6
 8004fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fcc:	230a      	movs	r3, #10
 8004fce:	485e      	ldr	r0, [pc, #376]	; (8005148 <_printf_i+0x244>)
 8004fd0:	e019      	b.n	8005006 <_printf_i+0x102>
 8004fd2:	680e      	ldr	r6, [r1, #0]
 8004fd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fd8:	602b      	str	r3, [r5, #0]
 8004fda:	bf18      	it	ne
 8004fdc:	b236      	sxthne	r6, r6
 8004fde:	e7ef      	b.n	8004fc0 <_printf_i+0xbc>
 8004fe0:	682b      	ldr	r3, [r5, #0]
 8004fe2:	6820      	ldr	r0, [r4, #0]
 8004fe4:	1d19      	adds	r1, r3, #4
 8004fe6:	6029      	str	r1, [r5, #0]
 8004fe8:	0601      	lsls	r1, r0, #24
 8004fea:	d501      	bpl.n	8004ff0 <_printf_i+0xec>
 8004fec:	681e      	ldr	r6, [r3, #0]
 8004fee:	e002      	b.n	8004ff6 <_printf_i+0xf2>
 8004ff0:	0646      	lsls	r6, r0, #25
 8004ff2:	d5fb      	bpl.n	8004fec <_printf_i+0xe8>
 8004ff4:	881e      	ldrh	r6, [r3, #0]
 8004ff6:	2f6f      	cmp	r7, #111	; 0x6f
 8004ff8:	bf0c      	ite	eq
 8004ffa:	2308      	moveq	r3, #8
 8004ffc:	230a      	movne	r3, #10
 8004ffe:	4852      	ldr	r0, [pc, #328]	; (8005148 <_printf_i+0x244>)
 8005000:	2100      	movs	r1, #0
 8005002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005006:	6865      	ldr	r5, [r4, #4]
 8005008:	2d00      	cmp	r5, #0
 800500a:	bfa8      	it	ge
 800500c:	6821      	ldrge	r1, [r4, #0]
 800500e:	60a5      	str	r5, [r4, #8]
 8005010:	bfa4      	itt	ge
 8005012:	f021 0104 	bicge.w	r1, r1, #4
 8005016:	6021      	strge	r1, [r4, #0]
 8005018:	b90e      	cbnz	r6, 800501e <_printf_i+0x11a>
 800501a:	2d00      	cmp	r5, #0
 800501c:	d04d      	beq.n	80050ba <_printf_i+0x1b6>
 800501e:	4615      	mov	r5, r2
 8005020:	fbb6 f1f3 	udiv	r1, r6, r3
 8005024:	fb03 6711 	mls	r7, r3, r1, r6
 8005028:	5dc7      	ldrb	r7, [r0, r7]
 800502a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800502e:	4637      	mov	r7, r6
 8005030:	42bb      	cmp	r3, r7
 8005032:	460e      	mov	r6, r1
 8005034:	d9f4      	bls.n	8005020 <_printf_i+0x11c>
 8005036:	2b08      	cmp	r3, #8
 8005038:	d10b      	bne.n	8005052 <_printf_i+0x14e>
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	07de      	lsls	r6, r3, #31
 800503e:	d508      	bpl.n	8005052 <_printf_i+0x14e>
 8005040:	6923      	ldr	r3, [r4, #16]
 8005042:	6861      	ldr	r1, [r4, #4]
 8005044:	4299      	cmp	r1, r3
 8005046:	bfde      	ittt	le
 8005048:	2330      	movle	r3, #48	; 0x30
 800504a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800504e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005052:	1b52      	subs	r2, r2, r5
 8005054:	6122      	str	r2, [r4, #16]
 8005056:	464b      	mov	r3, r9
 8005058:	4621      	mov	r1, r4
 800505a:	4640      	mov	r0, r8
 800505c:	f8cd a000 	str.w	sl, [sp]
 8005060:	aa03      	add	r2, sp, #12
 8005062:	f7ff fedf 	bl	8004e24 <_printf_common>
 8005066:	3001      	adds	r0, #1
 8005068:	d14c      	bne.n	8005104 <_printf_i+0x200>
 800506a:	f04f 30ff 	mov.w	r0, #4294967295
 800506e:	b004      	add	sp, #16
 8005070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005074:	4834      	ldr	r0, [pc, #208]	; (8005148 <_printf_i+0x244>)
 8005076:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800507a:	6829      	ldr	r1, [r5, #0]
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005082:	6029      	str	r1, [r5, #0]
 8005084:	061d      	lsls	r5, r3, #24
 8005086:	d514      	bpl.n	80050b2 <_printf_i+0x1ae>
 8005088:	07df      	lsls	r7, r3, #31
 800508a:	bf44      	itt	mi
 800508c:	f043 0320 	orrmi.w	r3, r3, #32
 8005090:	6023      	strmi	r3, [r4, #0]
 8005092:	b91e      	cbnz	r6, 800509c <_printf_i+0x198>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	f023 0320 	bic.w	r3, r3, #32
 800509a:	6023      	str	r3, [r4, #0]
 800509c:	2310      	movs	r3, #16
 800509e:	e7af      	b.n	8005000 <_printf_i+0xfc>
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	f043 0320 	orr.w	r3, r3, #32
 80050a6:	6023      	str	r3, [r4, #0]
 80050a8:	2378      	movs	r3, #120	; 0x78
 80050aa:	4828      	ldr	r0, [pc, #160]	; (800514c <_printf_i+0x248>)
 80050ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050b0:	e7e3      	b.n	800507a <_printf_i+0x176>
 80050b2:	0659      	lsls	r1, r3, #25
 80050b4:	bf48      	it	mi
 80050b6:	b2b6      	uxthmi	r6, r6
 80050b8:	e7e6      	b.n	8005088 <_printf_i+0x184>
 80050ba:	4615      	mov	r5, r2
 80050bc:	e7bb      	b.n	8005036 <_printf_i+0x132>
 80050be:	682b      	ldr	r3, [r5, #0]
 80050c0:	6826      	ldr	r6, [r4, #0]
 80050c2:	1d18      	adds	r0, r3, #4
 80050c4:	6961      	ldr	r1, [r4, #20]
 80050c6:	6028      	str	r0, [r5, #0]
 80050c8:	0635      	lsls	r5, r6, #24
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	d501      	bpl.n	80050d2 <_printf_i+0x1ce>
 80050ce:	6019      	str	r1, [r3, #0]
 80050d0:	e002      	b.n	80050d8 <_printf_i+0x1d4>
 80050d2:	0670      	lsls	r0, r6, #25
 80050d4:	d5fb      	bpl.n	80050ce <_printf_i+0x1ca>
 80050d6:	8019      	strh	r1, [r3, #0]
 80050d8:	2300      	movs	r3, #0
 80050da:	4615      	mov	r5, r2
 80050dc:	6123      	str	r3, [r4, #16]
 80050de:	e7ba      	b.n	8005056 <_printf_i+0x152>
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	2100      	movs	r1, #0
 80050e4:	1d1a      	adds	r2, r3, #4
 80050e6:	602a      	str	r2, [r5, #0]
 80050e8:	681d      	ldr	r5, [r3, #0]
 80050ea:	6862      	ldr	r2, [r4, #4]
 80050ec:	4628      	mov	r0, r5
 80050ee:	f001 f889 	bl	8006204 <memchr>
 80050f2:	b108      	cbz	r0, 80050f8 <_printf_i+0x1f4>
 80050f4:	1b40      	subs	r0, r0, r5
 80050f6:	6060      	str	r0, [r4, #4]
 80050f8:	6863      	ldr	r3, [r4, #4]
 80050fa:	6123      	str	r3, [r4, #16]
 80050fc:	2300      	movs	r3, #0
 80050fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005102:	e7a8      	b.n	8005056 <_printf_i+0x152>
 8005104:	462a      	mov	r2, r5
 8005106:	4649      	mov	r1, r9
 8005108:	4640      	mov	r0, r8
 800510a:	6923      	ldr	r3, [r4, #16]
 800510c:	47d0      	blx	sl
 800510e:	3001      	adds	r0, #1
 8005110:	d0ab      	beq.n	800506a <_printf_i+0x166>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	079b      	lsls	r3, r3, #30
 8005116:	d413      	bmi.n	8005140 <_printf_i+0x23c>
 8005118:	68e0      	ldr	r0, [r4, #12]
 800511a:	9b03      	ldr	r3, [sp, #12]
 800511c:	4298      	cmp	r0, r3
 800511e:	bfb8      	it	lt
 8005120:	4618      	movlt	r0, r3
 8005122:	e7a4      	b.n	800506e <_printf_i+0x16a>
 8005124:	2301      	movs	r3, #1
 8005126:	4632      	mov	r2, r6
 8005128:	4649      	mov	r1, r9
 800512a:	4640      	mov	r0, r8
 800512c:	47d0      	blx	sl
 800512e:	3001      	adds	r0, #1
 8005130:	d09b      	beq.n	800506a <_printf_i+0x166>
 8005132:	3501      	adds	r5, #1
 8005134:	68e3      	ldr	r3, [r4, #12]
 8005136:	9903      	ldr	r1, [sp, #12]
 8005138:	1a5b      	subs	r3, r3, r1
 800513a:	42ab      	cmp	r3, r5
 800513c:	dcf2      	bgt.n	8005124 <_printf_i+0x220>
 800513e:	e7eb      	b.n	8005118 <_printf_i+0x214>
 8005140:	2500      	movs	r5, #0
 8005142:	f104 0619 	add.w	r6, r4, #25
 8005146:	e7f5      	b.n	8005134 <_printf_i+0x230>
 8005148:	0800788e 	.word	0x0800788e
 800514c:	0800789f 	.word	0x0800789f

08005150 <iprintf>:
 8005150:	b40f      	push	{r0, r1, r2, r3}
 8005152:	4b0a      	ldr	r3, [pc, #40]	; (800517c <iprintf+0x2c>)
 8005154:	b513      	push	{r0, r1, r4, lr}
 8005156:	681c      	ldr	r4, [r3, #0]
 8005158:	b124      	cbz	r4, 8005164 <iprintf+0x14>
 800515a:	69a3      	ldr	r3, [r4, #24]
 800515c:	b913      	cbnz	r3, 8005164 <iprintf+0x14>
 800515e:	4620      	mov	r0, r4
 8005160:	f000 ff90 	bl	8006084 <__sinit>
 8005164:	ab05      	add	r3, sp, #20
 8005166:	4620      	mov	r0, r4
 8005168:	9a04      	ldr	r2, [sp, #16]
 800516a:	68a1      	ldr	r1, [r4, #8]
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	f001 fe5b 	bl	8006e28 <_vfiprintf_r>
 8005172:	b002      	add	sp, #8
 8005174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005178:	b004      	add	sp, #16
 800517a:	4770      	bx	lr
 800517c:	2000009c 	.word	0x2000009c

08005180 <siprintf>:
 8005180:	b40e      	push	{r1, r2, r3}
 8005182:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005186:	b500      	push	{lr}
 8005188:	b09c      	sub	sp, #112	; 0x70
 800518a:	ab1d      	add	r3, sp, #116	; 0x74
 800518c:	9002      	str	r0, [sp, #8]
 800518e:	9006      	str	r0, [sp, #24]
 8005190:	9107      	str	r1, [sp, #28]
 8005192:	9104      	str	r1, [sp, #16]
 8005194:	4808      	ldr	r0, [pc, #32]	; (80051b8 <siprintf+0x38>)
 8005196:	4909      	ldr	r1, [pc, #36]	; (80051bc <siprintf+0x3c>)
 8005198:	f853 2b04 	ldr.w	r2, [r3], #4
 800519c:	9105      	str	r1, [sp, #20]
 800519e:	6800      	ldr	r0, [r0, #0]
 80051a0:	a902      	add	r1, sp, #8
 80051a2:	9301      	str	r3, [sp, #4]
 80051a4:	f001 fd18 	bl	8006bd8 <_svfiprintf_r>
 80051a8:	2200      	movs	r2, #0
 80051aa:	9b02      	ldr	r3, [sp, #8]
 80051ac:	701a      	strb	r2, [r3, #0]
 80051ae:	b01c      	add	sp, #112	; 0x70
 80051b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051b4:	b003      	add	sp, #12
 80051b6:	4770      	bx	lr
 80051b8:	2000009c 	.word	0x2000009c
 80051bc:	ffff0208 	.word	0xffff0208

080051c0 <strncmp>:
 80051c0:	4603      	mov	r3, r0
 80051c2:	b510      	push	{r4, lr}
 80051c4:	b172      	cbz	r2, 80051e4 <strncmp+0x24>
 80051c6:	3901      	subs	r1, #1
 80051c8:	1884      	adds	r4, r0, r2
 80051ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80051ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80051d2:	4290      	cmp	r0, r2
 80051d4:	d101      	bne.n	80051da <strncmp+0x1a>
 80051d6:	42a3      	cmp	r3, r4
 80051d8:	d101      	bne.n	80051de <strncmp+0x1e>
 80051da:	1a80      	subs	r0, r0, r2
 80051dc:	bd10      	pop	{r4, pc}
 80051de:	2800      	cmp	r0, #0
 80051e0:	d1f3      	bne.n	80051ca <strncmp+0xa>
 80051e2:	e7fa      	b.n	80051da <strncmp+0x1a>
 80051e4:	4610      	mov	r0, r2
 80051e6:	e7f9      	b.n	80051dc <strncmp+0x1c>

080051e8 <strtok>:
 80051e8:	4b16      	ldr	r3, [pc, #88]	; (8005244 <strtok+0x5c>)
 80051ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ee:	681f      	ldr	r7, [r3, #0]
 80051f0:	4605      	mov	r5, r0
 80051f2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80051f4:	460e      	mov	r6, r1
 80051f6:	b9ec      	cbnz	r4, 8005234 <strtok+0x4c>
 80051f8:	2050      	movs	r0, #80	; 0x50
 80051fa:	f000 fffb 	bl	80061f4 <malloc>
 80051fe:	4602      	mov	r2, r0
 8005200:	65b8      	str	r0, [r7, #88]	; 0x58
 8005202:	b920      	cbnz	r0, 800520e <strtok+0x26>
 8005204:	2157      	movs	r1, #87	; 0x57
 8005206:	4b10      	ldr	r3, [pc, #64]	; (8005248 <strtok+0x60>)
 8005208:	4810      	ldr	r0, [pc, #64]	; (800524c <strtok+0x64>)
 800520a:	f000 f849 	bl	80052a0 <__assert_func>
 800520e:	e9c0 4400 	strd	r4, r4, [r0]
 8005212:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005216:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800521a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800521e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005222:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005226:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800522a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800522e:	6184      	str	r4, [r0, #24]
 8005230:	7704      	strb	r4, [r0, #28]
 8005232:	6244      	str	r4, [r0, #36]	; 0x24
 8005234:	4631      	mov	r1, r6
 8005236:	4628      	mov	r0, r5
 8005238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800523a:	2301      	movs	r3, #1
 800523c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005240:	f000 b806 	b.w	8005250 <__strtok_r>
 8005244:	2000009c 	.word	0x2000009c
 8005248:	080078b0 	.word	0x080078b0
 800524c:	080078c7 	.word	0x080078c7

08005250 <__strtok_r>:
 8005250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005252:	b908      	cbnz	r0, 8005258 <__strtok_r+0x8>
 8005254:	6810      	ldr	r0, [r2, #0]
 8005256:	b188      	cbz	r0, 800527c <__strtok_r+0x2c>
 8005258:	4604      	mov	r4, r0
 800525a:	460f      	mov	r7, r1
 800525c:	4620      	mov	r0, r4
 800525e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005262:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005266:	b91e      	cbnz	r6, 8005270 <__strtok_r+0x20>
 8005268:	b965      	cbnz	r5, 8005284 <__strtok_r+0x34>
 800526a:	4628      	mov	r0, r5
 800526c:	6015      	str	r5, [r2, #0]
 800526e:	e005      	b.n	800527c <__strtok_r+0x2c>
 8005270:	42b5      	cmp	r5, r6
 8005272:	d1f6      	bne.n	8005262 <__strtok_r+0x12>
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f0      	bne.n	800525a <__strtok_r+0xa>
 8005278:	6014      	str	r4, [r2, #0]
 800527a:	7003      	strb	r3, [r0, #0]
 800527c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800527e:	461c      	mov	r4, r3
 8005280:	e00c      	b.n	800529c <__strtok_r+0x4c>
 8005282:	b915      	cbnz	r5, 800528a <__strtok_r+0x3a>
 8005284:	460e      	mov	r6, r1
 8005286:	f814 3b01 	ldrb.w	r3, [r4], #1
 800528a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800528e:	42ab      	cmp	r3, r5
 8005290:	d1f7      	bne.n	8005282 <__strtok_r+0x32>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f3      	beq.n	800527e <__strtok_r+0x2e>
 8005296:	2300      	movs	r3, #0
 8005298:	f804 3c01 	strb.w	r3, [r4, #-1]
 800529c:	6014      	str	r4, [r2, #0]
 800529e:	e7ed      	b.n	800527c <__strtok_r+0x2c>

080052a0 <__assert_func>:
 80052a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052a2:	4614      	mov	r4, r2
 80052a4:	461a      	mov	r2, r3
 80052a6:	4b09      	ldr	r3, [pc, #36]	; (80052cc <__assert_func+0x2c>)
 80052a8:	4605      	mov	r5, r0
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68d8      	ldr	r0, [r3, #12]
 80052ae:	b14c      	cbz	r4, 80052c4 <__assert_func+0x24>
 80052b0:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <__assert_func+0x30>)
 80052b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80052b6:	9100      	str	r1, [sp, #0]
 80052b8:	462b      	mov	r3, r5
 80052ba:	4906      	ldr	r1, [pc, #24]	; (80052d4 <__assert_func+0x34>)
 80052bc:	f000 ff60 	bl	8006180 <fiprintf>
 80052c0:	f002 f808 	bl	80072d4 <abort>
 80052c4:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <__assert_func+0x38>)
 80052c6:	461c      	mov	r4, r3
 80052c8:	e7f3      	b.n	80052b2 <__assert_func+0x12>
 80052ca:	bf00      	nop
 80052cc:	2000009c 	.word	0x2000009c
 80052d0:	08007924 	.word	0x08007924
 80052d4:	08007931 	.word	0x08007931
 80052d8:	0800795f 	.word	0x0800795f

080052dc <quorem>:
 80052dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e0:	6903      	ldr	r3, [r0, #16]
 80052e2:	690c      	ldr	r4, [r1, #16]
 80052e4:	4607      	mov	r7, r0
 80052e6:	42a3      	cmp	r3, r4
 80052e8:	f2c0 8082 	blt.w	80053f0 <quorem+0x114>
 80052ec:	3c01      	subs	r4, #1
 80052ee:	f100 0514 	add.w	r5, r0, #20
 80052f2:	f101 0814 	add.w	r8, r1, #20
 80052f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052fa:	9301      	str	r3, [sp, #4]
 80052fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005300:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005304:	3301      	adds	r3, #1
 8005306:	429a      	cmp	r2, r3
 8005308:	fbb2 f6f3 	udiv	r6, r2, r3
 800530c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005310:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005314:	d331      	bcc.n	800537a <quorem+0x9e>
 8005316:	f04f 0e00 	mov.w	lr, #0
 800531a:	4640      	mov	r0, r8
 800531c:	46ac      	mov	ip, r5
 800531e:	46f2      	mov	sl, lr
 8005320:	f850 2b04 	ldr.w	r2, [r0], #4
 8005324:	b293      	uxth	r3, r2
 8005326:	fb06 e303 	mla	r3, r6, r3, lr
 800532a:	0c12      	lsrs	r2, r2, #16
 800532c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005330:	b29b      	uxth	r3, r3
 8005332:	fb06 e202 	mla	r2, r6, r2, lr
 8005336:	ebaa 0303 	sub.w	r3, sl, r3
 800533a:	f8dc a000 	ldr.w	sl, [ip]
 800533e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005342:	fa1f fa8a 	uxth.w	sl, sl
 8005346:	4453      	add	r3, sl
 8005348:	f8dc a000 	ldr.w	sl, [ip]
 800534c:	b292      	uxth	r2, r2
 800534e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005352:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005356:	b29b      	uxth	r3, r3
 8005358:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800535c:	4581      	cmp	r9, r0
 800535e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005362:	f84c 3b04 	str.w	r3, [ip], #4
 8005366:	d2db      	bcs.n	8005320 <quorem+0x44>
 8005368:	f855 300b 	ldr.w	r3, [r5, fp]
 800536c:	b92b      	cbnz	r3, 800537a <quorem+0x9e>
 800536e:	9b01      	ldr	r3, [sp, #4]
 8005370:	3b04      	subs	r3, #4
 8005372:	429d      	cmp	r5, r3
 8005374:	461a      	mov	r2, r3
 8005376:	d32f      	bcc.n	80053d8 <quorem+0xfc>
 8005378:	613c      	str	r4, [r7, #16]
 800537a:	4638      	mov	r0, r7
 800537c:	f001 f9dc 	bl	8006738 <__mcmp>
 8005380:	2800      	cmp	r0, #0
 8005382:	db25      	blt.n	80053d0 <quorem+0xf4>
 8005384:	4628      	mov	r0, r5
 8005386:	f04f 0c00 	mov.w	ip, #0
 800538a:	3601      	adds	r6, #1
 800538c:	f858 1b04 	ldr.w	r1, [r8], #4
 8005390:	f8d0 e000 	ldr.w	lr, [r0]
 8005394:	b28b      	uxth	r3, r1
 8005396:	ebac 0303 	sub.w	r3, ip, r3
 800539a:	fa1f f28e 	uxth.w	r2, lr
 800539e:	4413      	add	r3, r2
 80053a0:	0c0a      	lsrs	r2, r1, #16
 80053a2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053b0:	45c1      	cmp	r9, r8
 80053b2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053b6:	f840 3b04 	str.w	r3, [r0], #4
 80053ba:	d2e7      	bcs.n	800538c <quorem+0xb0>
 80053bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053c4:	b922      	cbnz	r2, 80053d0 <quorem+0xf4>
 80053c6:	3b04      	subs	r3, #4
 80053c8:	429d      	cmp	r5, r3
 80053ca:	461a      	mov	r2, r3
 80053cc:	d30a      	bcc.n	80053e4 <quorem+0x108>
 80053ce:	613c      	str	r4, [r7, #16]
 80053d0:	4630      	mov	r0, r6
 80053d2:	b003      	add	sp, #12
 80053d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	3b04      	subs	r3, #4
 80053dc:	2a00      	cmp	r2, #0
 80053de:	d1cb      	bne.n	8005378 <quorem+0x9c>
 80053e0:	3c01      	subs	r4, #1
 80053e2:	e7c6      	b.n	8005372 <quorem+0x96>
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	3b04      	subs	r3, #4
 80053e8:	2a00      	cmp	r2, #0
 80053ea:	d1f0      	bne.n	80053ce <quorem+0xf2>
 80053ec:	3c01      	subs	r4, #1
 80053ee:	e7eb      	b.n	80053c8 <quorem+0xec>
 80053f0:	2000      	movs	r0, #0
 80053f2:	e7ee      	b.n	80053d2 <quorem+0xf6>
 80053f4:	0000      	movs	r0, r0
	...

080053f8 <_dtoa_r>:
 80053f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fc:	4616      	mov	r6, r2
 80053fe:	461f      	mov	r7, r3
 8005400:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005402:	b099      	sub	sp, #100	; 0x64
 8005404:	4605      	mov	r5, r0
 8005406:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800540a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800540e:	b974      	cbnz	r4, 800542e <_dtoa_r+0x36>
 8005410:	2010      	movs	r0, #16
 8005412:	f000 feef 	bl	80061f4 <malloc>
 8005416:	4602      	mov	r2, r0
 8005418:	6268      	str	r0, [r5, #36]	; 0x24
 800541a:	b920      	cbnz	r0, 8005426 <_dtoa_r+0x2e>
 800541c:	21ea      	movs	r1, #234	; 0xea
 800541e:	4ba8      	ldr	r3, [pc, #672]	; (80056c0 <_dtoa_r+0x2c8>)
 8005420:	48a8      	ldr	r0, [pc, #672]	; (80056c4 <_dtoa_r+0x2cc>)
 8005422:	f7ff ff3d 	bl	80052a0 <__assert_func>
 8005426:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800542a:	6004      	str	r4, [r0, #0]
 800542c:	60c4      	str	r4, [r0, #12]
 800542e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005430:	6819      	ldr	r1, [r3, #0]
 8005432:	b151      	cbz	r1, 800544a <_dtoa_r+0x52>
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	2301      	movs	r3, #1
 8005438:	4093      	lsls	r3, r2
 800543a:	604a      	str	r2, [r1, #4]
 800543c:	608b      	str	r3, [r1, #8]
 800543e:	4628      	mov	r0, r5
 8005440:	f000 ff3c 	bl	80062bc <_Bfree>
 8005444:	2200      	movs	r2, #0
 8005446:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	1e3b      	subs	r3, r7, #0
 800544c:	bfaf      	iteee	ge
 800544e:	2300      	movge	r3, #0
 8005450:	2201      	movlt	r2, #1
 8005452:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005456:	9305      	strlt	r3, [sp, #20]
 8005458:	bfa8      	it	ge
 800545a:	f8c8 3000 	strge.w	r3, [r8]
 800545e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005462:	4b99      	ldr	r3, [pc, #612]	; (80056c8 <_dtoa_r+0x2d0>)
 8005464:	bfb8      	it	lt
 8005466:	f8c8 2000 	strlt.w	r2, [r8]
 800546a:	ea33 0309 	bics.w	r3, r3, r9
 800546e:	d119      	bne.n	80054a4 <_dtoa_r+0xac>
 8005470:	f242 730f 	movw	r3, #9999	; 0x270f
 8005474:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800547c:	4333      	orrs	r3, r6
 800547e:	f000 857f 	beq.w	8005f80 <_dtoa_r+0xb88>
 8005482:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005484:	b953      	cbnz	r3, 800549c <_dtoa_r+0xa4>
 8005486:	4b91      	ldr	r3, [pc, #580]	; (80056cc <_dtoa_r+0x2d4>)
 8005488:	e022      	b.n	80054d0 <_dtoa_r+0xd8>
 800548a:	4b91      	ldr	r3, [pc, #580]	; (80056d0 <_dtoa_r+0x2d8>)
 800548c:	9303      	str	r3, [sp, #12]
 800548e:	3308      	adds	r3, #8
 8005490:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	9803      	ldr	r0, [sp, #12]
 8005496:	b019      	add	sp, #100	; 0x64
 8005498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549c:	4b8b      	ldr	r3, [pc, #556]	; (80056cc <_dtoa_r+0x2d4>)
 800549e:	9303      	str	r3, [sp, #12]
 80054a0:	3303      	adds	r3, #3
 80054a2:	e7f5      	b.n	8005490 <_dtoa_r+0x98>
 80054a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80054a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80054ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054b0:	2200      	movs	r2, #0
 80054b2:	2300      	movs	r3, #0
 80054b4:	f7fb fa82 	bl	80009bc <__aeabi_dcmpeq>
 80054b8:	4680      	mov	r8, r0
 80054ba:	b158      	cbz	r0, 80054d4 <_dtoa_r+0xdc>
 80054bc:	2301      	movs	r3, #1
 80054be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8558 	beq.w	8005f7a <_dtoa_r+0xb82>
 80054ca:	4882      	ldr	r0, [pc, #520]	; (80056d4 <_dtoa_r+0x2dc>)
 80054cc:	6018      	str	r0, [r3, #0]
 80054ce:	1e43      	subs	r3, r0, #1
 80054d0:	9303      	str	r3, [sp, #12]
 80054d2:	e7df      	b.n	8005494 <_dtoa_r+0x9c>
 80054d4:	ab16      	add	r3, sp, #88	; 0x58
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	ab17      	add	r3, sp, #92	; 0x5c
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	4628      	mov	r0, r5
 80054de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80054e2:	f001 f9d1 	bl	8006888 <__d2b>
 80054e6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80054ea:	4683      	mov	fp, r0
 80054ec:	2c00      	cmp	r4, #0
 80054ee:	d07f      	beq.n	80055f0 <_dtoa_r+0x1f8>
 80054f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054f6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80054fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054fe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005502:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005506:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800550a:	2200      	movs	r2, #0
 800550c:	4b72      	ldr	r3, [pc, #456]	; (80056d8 <_dtoa_r+0x2e0>)
 800550e:	f7fa fe35 	bl	800017c <__aeabi_dsub>
 8005512:	a365      	add	r3, pc, #404	; (adr r3, 80056a8 <_dtoa_r+0x2b0>)
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f7fa ffe8 	bl	80004ec <__aeabi_dmul>
 800551c:	a364      	add	r3, pc, #400	; (adr r3, 80056b0 <_dtoa_r+0x2b8>)
 800551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005522:	f7fa fe2d 	bl	8000180 <__adddf3>
 8005526:	4606      	mov	r6, r0
 8005528:	4620      	mov	r0, r4
 800552a:	460f      	mov	r7, r1
 800552c:	f7fa ff74 	bl	8000418 <__aeabi_i2d>
 8005530:	a361      	add	r3, pc, #388	; (adr r3, 80056b8 <_dtoa_r+0x2c0>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f7fa ffd9 	bl	80004ec <__aeabi_dmul>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4630      	mov	r0, r6
 8005540:	4639      	mov	r1, r7
 8005542:	f7fa fe1d 	bl	8000180 <__adddf3>
 8005546:	4606      	mov	r6, r0
 8005548:	460f      	mov	r7, r1
 800554a:	f7fb fa7f 	bl	8000a4c <__aeabi_d2iz>
 800554e:	2200      	movs	r2, #0
 8005550:	4682      	mov	sl, r0
 8005552:	2300      	movs	r3, #0
 8005554:	4630      	mov	r0, r6
 8005556:	4639      	mov	r1, r7
 8005558:	f7fb fa3a 	bl	80009d0 <__aeabi_dcmplt>
 800555c:	b148      	cbz	r0, 8005572 <_dtoa_r+0x17a>
 800555e:	4650      	mov	r0, sl
 8005560:	f7fa ff5a 	bl	8000418 <__aeabi_i2d>
 8005564:	4632      	mov	r2, r6
 8005566:	463b      	mov	r3, r7
 8005568:	f7fb fa28 	bl	80009bc <__aeabi_dcmpeq>
 800556c:	b908      	cbnz	r0, 8005572 <_dtoa_r+0x17a>
 800556e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005572:	f1ba 0f16 	cmp.w	sl, #22
 8005576:	d858      	bhi.n	800562a <_dtoa_r+0x232>
 8005578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800557c:	4b57      	ldr	r3, [pc, #348]	; (80056dc <_dtoa_r+0x2e4>)
 800557e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f7fb fa23 	bl	80009d0 <__aeabi_dcmplt>
 800558a:	2800      	cmp	r0, #0
 800558c:	d04f      	beq.n	800562e <_dtoa_r+0x236>
 800558e:	2300      	movs	r3, #0
 8005590:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005594:	930f      	str	r3, [sp, #60]	; 0x3c
 8005596:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005598:	1b1c      	subs	r4, r3, r4
 800559a:	1e63      	subs	r3, r4, #1
 800559c:	9309      	str	r3, [sp, #36]	; 0x24
 800559e:	bf49      	itett	mi
 80055a0:	f1c4 0301 	rsbmi	r3, r4, #1
 80055a4:	2300      	movpl	r3, #0
 80055a6:	9306      	strmi	r3, [sp, #24]
 80055a8:	2300      	movmi	r3, #0
 80055aa:	bf54      	ite	pl
 80055ac:	9306      	strpl	r3, [sp, #24]
 80055ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 80055b0:	f1ba 0f00 	cmp.w	sl, #0
 80055b4:	db3d      	blt.n	8005632 <_dtoa_r+0x23a>
 80055b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80055bc:	4453      	add	r3, sl
 80055be:	9309      	str	r3, [sp, #36]	; 0x24
 80055c0:	2300      	movs	r3, #0
 80055c2:	930a      	str	r3, [sp, #40]	; 0x28
 80055c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055c6:	2b09      	cmp	r3, #9
 80055c8:	f200 808c 	bhi.w	80056e4 <_dtoa_r+0x2ec>
 80055cc:	2b05      	cmp	r3, #5
 80055ce:	bfc4      	itt	gt
 80055d0:	3b04      	subgt	r3, #4
 80055d2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80055d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055d6:	bfc8      	it	gt
 80055d8:	2400      	movgt	r4, #0
 80055da:	f1a3 0302 	sub.w	r3, r3, #2
 80055de:	bfd8      	it	le
 80055e0:	2401      	movle	r4, #1
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	f200 808a 	bhi.w	80056fc <_dtoa_r+0x304>
 80055e8:	e8df f003 	tbb	[pc, r3]
 80055ec:	5b4d4f2d 	.word	0x5b4d4f2d
 80055f0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80055f4:	441c      	add	r4, r3
 80055f6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	bfc3      	ittte	gt
 80055fe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005602:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005606:	fa09 f303 	lslgt.w	r3, r9, r3
 800560a:	f1c3 0320 	rsble	r3, r3, #32
 800560e:	bfc6      	itte	gt
 8005610:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005614:	4318      	orrgt	r0, r3
 8005616:	fa06 f003 	lslle.w	r0, r6, r3
 800561a:	f7fa feed 	bl	80003f8 <__aeabi_ui2d>
 800561e:	2301      	movs	r3, #1
 8005620:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005624:	3c01      	subs	r4, #1
 8005626:	9313      	str	r3, [sp, #76]	; 0x4c
 8005628:	e76f      	b.n	800550a <_dtoa_r+0x112>
 800562a:	2301      	movs	r3, #1
 800562c:	e7b2      	b.n	8005594 <_dtoa_r+0x19c>
 800562e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005630:	e7b1      	b.n	8005596 <_dtoa_r+0x19e>
 8005632:	9b06      	ldr	r3, [sp, #24]
 8005634:	eba3 030a 	sub.w	r3, r3, sl
 8005638:	9306      	str	r3, [sp, #24]
 800563a:	f1ca 0300 	rsb	r3, sl, #0
 800563e:	930a      	str	r3, [sp, #40]	; 0x28
 8005640:	2300      	movs	r3, #0
 8005642:	930e      	str	r3, [sp, #56]	; 0x38
 8005644:	e7be      	b.n	80055c4 <_dtoa_r+0x1cc>
 8005646:	2300      	movs	r3, #0
 8005648:	930b      	str	r3, [sp, #44]	; 0x2c
 800564a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800564c:	2b00      	cmp	r3, #0
 800564e:	dc58      	bgt.n	8005702 <_dtoa_r+0x30a>
 8005650:	f04f 0901 	mov.w	r9, #1
 8005654:	464b      	mov	r3, r9
 8005656:	f8cd 9020 	str.w	r9, [sp, #32]
 800565a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800565e:	2200      	movs	r2, #0
 8005660:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005662:	6042      	str	r2, [r0, #4]
 8005664:	2204      	movs	r2, #4
 8005666:	f102 0614 	add.w	r6, r2, #20
 800566a:	429e      	cmp	r6, r3
 800566c:	6841      	ldr	r1, [r0, #4]
 800566e:	d94e      	bls.n	800570e <_dtoa_r+0x316>
 8005670:	4628      	mov	r0, r5
 8005672:	f000 fde3 	bl	800623c <_Balloc>
 8005676:	9003      	str	r0, [sp, #12]
 8005678:	2800      	cmp	r0, #0
 800567a:	d14c      	bne.n	8005716 <_dtoa_r+0x31e>
 800567c:	4602      	mov	r2, r0
 800567e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005682:	4b17      	ldr	r3, [pc, #92]	; (80056e0 <_dtoa_r+0x2e8>)
 8005684:	e6cc      	b.n	8005420 <_dtoa_r+0x28>
 8005686:	2301      	movs	r3, #1
 8005688:	e7de      	b.n	8005648 <_dtoa_r+0x250>
 800568a:	2300      	movs	r3, #0
 800568c:	930b      	str	r3, [sp, #44]	; 0x2c
 800568e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005690:	eb0a 0903 	add.w	r9, sl, r3
 8005694:	f109 0301 	add.w	r3, r9, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	9308      	str	r3, [sp, #32]
 800569c:	bfb8      	it	lt
 800569e:	2301      	movlt	r3, #1
 80056a0:	e7dd      	b.n	800565e <_dtoa_r+0x266>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e7f2      	b.n	800568c <_dtoa_r+0x294>
 80056a6:	bf00      	nop
 80056a8:	636f4361 	.word	0x636f4361
 80056ac:	3fd287a7 	.word	0x3fd287a7
 80056b0:	8b60c8b3 	.word	0x8b60c8b3
 80056b4:	3fc68a28 	.word	0x3fc68a28
 80056b8:	509f79fb 	.word	0x509f79fb
 80056bc:	3fd34413 	.word	0x3fd34413
 80056c0:	080078b0 	.word	0x080078b0
 80056c4:	0800796d 	.word	0x0800796d
 80056c8:	7ff00000 	.word	0x7ff00000
 80056cc:	08007969 	.word	0x08007969
 80056d0:	08007960 	.word	0x08007960
 80056d4:	0800788d 	.word	0x0800788d
 80056d8:	3ff80000 	.word	0x3ff80000
 80056dc:	08007ac0 	.word	0x08007ac0
 80056e0:	080079c8 	.word	0x080079c8
 80056e4:	2401      	movs	r4, #1
 80056e6:	2300      	movs	r3, #0
 80056e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80056ea:	9322      	str	r3, [sp, #136]	; 0x88
 80056ec:	f04f 39ff 	mov.w	r9, #4294967295
 80056f0:	2200      	movs	r2, #0
 80056f2:	2312      	movs	r3, #18
 80056f4:	f8cd 9020 	str.w	r9, [sp, #32]
 80056f8:	9223      	str	r2, [sp, #140]	; 0x8c
 80056fa:	e7b0      	b.n	800565e <_dtoa_r+0x266>
 80056fc:	2301      	movs	r3, #1
 80056fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005700:	e7f4      	b.n	80056ec <_dtoa_r+0x2f4>
 8005702:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005706:	464b      	mov	r3, r9
 8005708:	f8cd 9020 	str.w	r9, [sp, #32]
 800570c:	e7a7      	b.n	800565e <_dtoa_r+0x266>
 800570e:	3101      	adds	r1, #1
 8005710:	6041      	str	r1, [r0, #4]
 8005712:	0052      	lsls	r2, r2, #1
 8005714:	e7a7      	b.n	8005666 <_dtoa_r+0x26e>
 8005716:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005718:	9a03      	ldr	r2, [sp, #12]
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	9b08      	ldr	r3, [sp, #32]
 800571e:	2b0e      	cmp	r3, #14
 8005720:	f200 80a8 	bhi.w	8005874 <_dtoa_r+0x47c>
 8005724:	2c00      	cmp	r4, #0
 8005726:	f000 80a5 	beq.w	8005874 <_dtoa_r+0x47c>
 800572a:	f1ba 0f00 	cmp.w	sl, #0
 800572e:	dd34      	ble.n	800579a <_dtoa_r+0x3a2>
 8005730:	4a9a      	ldr	r2, [pc, #616]	; (800599c <_dtoa_r+0x5a4>)
 8005732:	f00a 030f 	and.w	r3, sl, #15
 8005736:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800573a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800573e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005742:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005746:	ea4f 142a 	mov.w	r4, sl, asr #4
 800574a:	d016      	beq.n	800577a <_dtoa_r+0x382>
 800574c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005750:	4b93      	ldr	r3, [pc, #588]	; (80059a0 <_dtoa_r+0x5a8>)
 8005752:	2703      	movs	r7, #3
 8005754:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005758:	f7fa fff2 	bl	8000740 <__aeabi_ddiv>
 800575c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005760:	f004 040f 	and.w	r4, r4, #15
 8005764:	4e8e      	ldr	r6, [pc, #568]	; (80059a0 <_dtoa_r+0x5a8>)
 8005766:	b954      	cbnz	r4, 800577e <_dtoa_r+0x386>
 8005768:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800576c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005770:	f7fa ffe6 	bl	8000740 <__aeabi_ddiv>
 8005774:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005778:	e029      	b.n	80057ce <_dtoa_r+0x3d6>
 800577a:	2702      	movs	r7, #2
 800577c:	e7f2      	b.n	8005764 <_dtoa_r+0x36c>
 800577e:	07e1      	lsls	r1, r4, #31
 8005780:	d508      	bpl.n	8005794 <_dtoa_r+0x39c>
 8005782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005786:	e9d6 2300 	ldrd	r2, r3, [r6]
 800578a:	f7fa feaf 	bl	80004ec <__aeabi_dmul>
 800578e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005792:	3701      	adds	r7, #1
 8005794:	1064      	asrs	r4, r4, #1
 8005796:	3608      	adds	r6, #8
 8005798:	e7e5      	b.n	8005766 <_dtoa_r+0x36e>
 800579a:	f000 80a5 	beq.w	80058e8 <_dtoa_r+0x4f0>
 800579e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057a2:	f1ca 0400 	rsb	r4, sl, #0
 80057a6:	4b7d      	ldr	r3, [pc, #500]	; (800599c <_dtoa_r+0x5a4>)
 80057a8:	f004 020f 	and.w	r2, r4, #15
 80057ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	f7fa fe9a 	bl	80004ec <__aeabi_dmul>
 80057b8:	2702      	movs	r7, #2
 80057ba:	2300      	movs	r3, #0
 80057bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057c0:	4e77      	ldr	r6, [pc, #476]	; (80059a0 <_dtoa_r+0x5a8>)
 80057c2:	1124      	asrs	r4, r4, #4
 80057c4:	2c00      	cmp	r4, #0
 80057c6:	f040 8084 	bne.w	80058d2 <_dtoa_r+0x4da>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1d2      	bne.n	8005774 <_dtoa_r+0x37c>
 80057ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 808b 	beq.w	80058ec <_dtoa_r+0x4f4>
 80057d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80057da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80057de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057e2:	2200      	movs	r2, #0
 80057e4:	4b6f      	ldr	r3, [pc, #444]	; (80059a4 <_dtoa_r+0x5ac>)
 80057e6:	f7fb f8f3 	bl	80009d0 <__aeabi_dcmplt>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d07e      	beq.n	80058ec <_dtoa_r+0x4f4>
 80057ee:	9b08      	ldr	r3, [sp, #32]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d07b      	beq.n	80058ec <_dtoa_r+0x4f4>
 80057f4:	f1b9 0f00 	cmp.w	r9, #0
 80057f8:	dd38      	ble.n	800586c <_dtoa_r+0x474>
 80057fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057fe:	2200      	movs	r2, #0
 8005800:	4b69      	ldr	r3, [pc, #420]	; (80059a8 <_dtoa_r+0x5b0>)
 8005802:	f7fa fe73 	bl	80004ec <__aeabi_dmul>
 8005806:	464c      	mov	r4, r9
 8005808:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800580c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005810:	3701      	adds	r7, #1
 8005812:	4638      	mov	r0, r7
 8005814:	f7fa fe00 	bl	8000418 <__aeabi_i2d>
 8005818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800581c:	f7fa fe66 	bl	80004ec <__aeabi_dmul>
 8005820:	2200      	movs	r2, #0
 8005822:	4b62      	ldr	r3, [pc, #392]	; (80059ac <_dtoa_r+0x5b4>)
 8005824:	f7fa fcac 	bl	8000180 <__adddf3>
 8005828:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800582c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005830:	9611      	str	r6, [sp, #68]	; 0x44
 8005832:	2c00      	cmp	r4, #0
 8005834:	d15d      	bne.n	80058f2 <_dtoa_r+0x4fa>
 8005836:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800583a:	2200      	movs	r2, #0
 800583c:	4b5c      	ldr	r3, [pc, #368]	; (80059b0 <_dtoa_r+0x5b8>)
 800583e:	f7fa fc9d 	bl	800017c <__aeabi_dsub>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800584a:	4633      	mov	r3, r6
 800584c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800584e:	f7fb f8dd 	bl	8000a0c <__aeabi_dcmpgt>
 8005852:	2800      	cmp	r0, #0
 8005854:	f040 829c 	bne.w	8005d90 <_dtoa_r+0x998>
 8005858:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800585c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800585e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005862:	f7fb f8b5 	bl	80009d0 <__aeabi_dcmplt>
 8005866:	2800      	cmp	r0, #0
 8005868:	f040 8290 	bne.w	8005d8c <_dtoa_r+0x994>
 800586c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005870:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005874:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005876:	2b00      	cmp	r3, #0
 8005878:	f2c0 8152 	blt.w	8005b20 <_dtoa_r+0x728>
 800587c:	f1ba 0f0e 	cmp.w	sl, #14
 8005880:	f300 814e 	bgt.w	8005b20 <_dtoa_r+0x728>
 8005884:	4b45      	ldr	r3, [pc, #276]	; (800599c <_dtoa_r+0x5a4>)
 8005886:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800588a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800588e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005892:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005894:	2b00      	cmp	r3, #0
 8005896:	f280 80db 	bge.w	8005a50 <_dtoa_r+0x658>
 800589a:	9b08      	ldr	r3, [sp, #32]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f300 80d7 	bgt.w	8005a50 <_dtoa_r+0x658>
 80058a2:	f040 8272 	bne.w	8005d8a <_dtoa_r+0x992>
 80058a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058aa:	2200      	movs	r2, #0
 80058ac:	4b40      	ldr	r3, [pc, #256]	; (80059b0 <_dtoa_r+0x5b8>)
 80058ae:	f7fa fe1d 	bl	80004ec <__aeabi_dmul>
 80058b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058b6:	f7fb f89f 	bl	80009f8 <__aeabi_dcmpge>
 80058ba:	9c08      	ldr	r4, [sp, #32]
 80058bc:	4626      	mov	r6, r4
 80058be:	2800      	cmp	r0, #0
 80058c0:	f040 8248 	bne.w	8005d54 <_dtoa_r+0x95c>
 80058c4:	2331      	movs	r3, #49	; 0x31
 80058c6:	9f03      	ldr	r7, [sp, #12]
 80058c8:	f10a 0a01 	add.w	sl, sl, #1
 80058cc:	f807 3b01 	strb.w	r3, [r7], #1
 80058d0:	e244      	b.n	8005d5c <_dtoa_r+0x964>
 80058d2:	07e2      	lsls	r2, r4, #31
 80058d4:	d505      	bpl.n	80058e2 <_dtoa_r+0x4ea>
 80058d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058da:	f7fa fe07 	bl	80004ec <__aeabi_dmul>
 80058de:	2301      	movs	r3, #1
 80058e0:	3701      	adds	r7, #1
 80058e2:	1064      	asrs	r4, r4, #1
 80058e4:	3608      	adds	r6, #8
 80058e6:	e76d      	b.n	80057c4 <_dtoa_r+0x3cc>
 80058e8:	2702      	movs	r7, #2
 80058ea:	e770      	b.n	80057ce <_dtoa_r+0x3d6>
 80058ec:	46d0      	mov	r8, sl
 80058ee:	9c08      	ldr	r4, [sp, #32]
 80058f0:	e78f      	b.n	8005812 <_dtoa_r+0x41a>
 80058f2:	9903      	ldr	r1, [sp, #12]
 80058f4:	4b29      	ldr	r3, [pc, #164]	; (800599c <_dtoa_r+0x5a4>)
 80058f6:	4421      	add	r1, r4
 80058f8:	9112      	str	r1, [sp, #72]	; 0x48
 80058fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005900:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005904:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005908:	2900      	cmp	r1, #0
 800590a:	d055      	beq.n	80059b8 <_dtoa_r+0x5c0>
 800590c:	2000      	movs	r0, #0
 800590e:	4929      	ldr	r1, [pc, #164]	; (80059b4 <_dtoa_r+0x5bc>)
 8005910:	f7fa ff16 	bl	8000740 <__aeabi_ddiv>
 8005914:	463b      	mov	r3, r7
 8005916:	4632      	mov	r2, r6
 8005918:	f7fa fc30 	bl	800017c <__aeabi_dsub>
 800591c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005920:	9f03      	ldr	r7, [sp, #12]
 8005922:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005926:	f7fb f891 	bl	8000a4c <__aeabi_d2iz>
 800592a:	4604      	mov	r4, r0
 800592c:	f7fa fd74 	bl	8000418 <__aeabi_i2d>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005938:	f7fa fc20 	bl	800017c <__aeabi_dsub>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	3430      	adds	r4, #48	; 0x30
 8005942:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005946:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800594a:	f807 4b01 	strb.w	r4, [r7], #1
 800594e:	f7fb f83f 	bl	80009d0 <__aeabi_dcmplt>
 8005952:	2800      	cmp	r0, #0
 8005954:	d174      	bne.n	8005a40 <_dtoa_r+0x648>
 8005956:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800595a:	2000      	movs	r0, #0
 800595c:	4911      	ldr	r1, [pc, #68]	; (80059a4 <_dtoa_r+0x5ac>)
 800595e:	f7fa fc0d 	bl	800017c <__aeabi_dsub>
 8005962:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005966:	f7fb f833 	bl	80009d0 <__aeabi_dcmplt>
 800596a:	2800      	cmp	r0, #0
 800596c:	f040 80b7 	bne.w	8005ade <_dtoa_r+0x6e6>
 8005970:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005972:	429f      	cmp	r7, r3
 8005974:	f43f af7a 	beq.w	800586c <_dtoa_r+0x474>
 8005978:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800597c:	2200      	movs	r2, #0
 800597e:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <_dtoa_r+0x5b0>)
 8005980:	f7fa fdb4 	bl	80004ec <__aeabi_dmul>
 8005984:	2200      	movs	r2, #0
 8005986:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800598a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800598e:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <_dtoa_r+0x5b0>)
 8005990:	f7fa fdac 	bl	80004ec <__aeabi_dmul>
 8005994:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005998:	e7c3      	b.n	8005922 <_dtoa_r+0x52a>
 800599a:	bf00      	nop
 800599c:	08007ac0 	.word	0x08007ac0
 80059a0:	08007a98 	.word	0x08007a98
 80059a4:	3ff00000 	.word	0x3ff00000
 80059a8:	40240000 	.word	0x40240000
 80059ac:	401c0000 	.word	0x401c0000
 80059b0:	40140000 	.word	0x40140000
 80059b4:	3fe00000 	.word	0x3fe00000
 80059b8:	4630      	mov	r0, r6
 80059ba:	4639      	mov	r1, r7
 80059bc:	f7fa fd96 	bl	80004ec <__aeabi_dmul>
 80059c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059c6:	9c03      	ldr	r4, [sp, #12]
 80059c8:	9314      	str	r3, [sp, #80]	; 0x50
 80059ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ce:	f7fb f83d 	bl	8000a4c <__aeabi_d2iz>
 80059d2:	9015      	str	r0, [sp, #84]	; 0x54
 80059d4:	f7fa fd20 	bl	8000418 <__aeabi_i2d>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059e0:	f7fa fbcc 	bl	800017c <__aeabi_dsub>
 80059e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059e6:	4606      	mov	r6, r0
 80059e8:	3330      	adds	r3, #48	; 0x30
 80059ea:	f804 3b01 	strb.w	r3, [r4], #1
 80059ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059f0:	460f      	mov	r7, r1
 80059f2:	429c      	cmp	r4, r3
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	d124      	bne.n	8005a44 <_dtoa_r+0x64c>
 80059fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059fe:	4bb0      	ldr	r3, [pc, #704]	; (8005cc0 <_dtoa_r+0x8c8>)
 8005a00:	f7fa fbbe 	bl	8000180 <__adddf3>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	f7fa fffe 	bl	8000a0c <__aeabi_dcmpgt>
 8005a10:	2800      	cmp	r0, #0
 8005a12:	d163      	bne.n	8005adc <_dtoa_r+0x6e4>
 8005a14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a18:	2000      	movs	r0, #0
 8005a1a:	49a9      	ldr	r1, [pc, #676]	; (8005cc0 <_dtoa_r+0x8c8>)
 8005a1c:	f7fa fbae 	bl	800017c <__aeabi_dsub>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4630      	mov	r0, r6
 8005a26:	4639      	mov	r1, r7
 8005a28:	f7fa ffd2 	bl	80009d0 <__aeabi_dcmplt>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	f43f af1d 	beq.w	800586c <_dtoa_r+0x474>
 8005a32:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005a34:	1e7b      	subs	r3, r7, #1
 8005a36:	9314      	str	r3, [sp, #80]	; 0x50
 8005a38:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005a3c:	2b30      	cmp	r3, #48	; 0x30
 8005a3e:	d0f8      	beq.n	8005a32 <_dtoa_r+0x63a>
 8005a40:	46c2      	mov	sl, r8
 8005a42:	e03b      	b.n	8005abc <_dtoa_r+0x6c4>
 8005a44:	4b9f      	ldr	r3, [pc, #636]	; (8005cc4 <_dtoa_r+0x8cc>)
 8005a46:	f7fa fd51 	bl	80004ec <__aeabi_dmul>
 8005a4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a4e:	e7bc      	b.n	80059ca <_dtoa_r+0x5d2>
 8005a50:	9f03      	ldr	r7, [sp, #12]
 8005a52:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005a56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	f7fa fe6f 	bl	8000740 <__aeabi_ddiv>
 8005a62:	f7fa fff3 	bl	8000a4c <__aeabi_d2iz>
 8005a66:	4604      	mov	r4, r0
 8005a68:	f7fa fcd6 	bl	8000418 <__aeabi_i2d>
 8005a6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a70:	f7fa fd3c 	bl	80004ec <__aeabi_dmul>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4640      	mov	r0, r8
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	f7fa fb7e 	bl	800017c <__aeabi_dsub>
 8005a80:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005a84:	f807 6b01 	strb.w	r6, [r7], #1
 8005a88:	9e03      	ldr	r6, [sp, #12]
 8005a8a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005a8e:	1bbe      	subs	r6, r7, r6
 8005a90:	45b4      	cmp	ip, r6
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	d136      	bne.n	8005b06 <_dtoa_r+0x70e>
 8005a98:	f7fa fb72 	bl	8000180 <__adddf3>
 8005a9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005aa0:	4680      	mov	r8, r0
 8005aa2:	4689      	mov	r9, r1
 8005aa4:	f7fa ffb2 	bl	8000a0c <__aeabi_dcmpgt>
 8005aa8:	bb58      	cbnz	r0, 8005b02 <_dtoa_r+0x70a>
 8005aaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005aae:	4640      	mov	r0, r8
 8005ab0:	4649      	mov	r1, r9
 8005ab2:	f7fa ff83 	bl	80009bc <__aeabi_dcmpeq>
 8005ab6:	b108      	cbz	r0, 8005abc <_dtoa_r+0x6c4>
 8005ab8:	07e1      	lsls	r1, r4, #31
 8005aba:	d422      	bmi.n	8005b02 <_dtoa_r+0x70a>
 8005abc:	4628      	mov	r0, r5
 8005abe:	4659      	mov	r1, fp
 8005ac0:	f000 fbfc 	bl	80062bc <_Bfree>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	703b      	strb	r3, [r7, #0]
 8005ac8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005aca:	f10a 0001 	add.w	r0, sl, #1
 8005ace:	6018      	str	r0, [r3, #0]
 8005ad0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f43f acde 	beq.w	8005494 <_dtoa_r+0x9c>
 8005ad8:	601f      	str	r7, [r3, #0]
 8005ada:	e4db      	b.n	8005494 <_dtoa_r+0x9c>
 8005adc:	4627      	mov	r7, r4
 8005ade:	463b      	mov	r3, r7
 8005ae0:	461f      	mov	r7, r3
 8005ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ae6:	2a39      	cmp	r2, #57	; 0x39
 8005ae8:	d107      	bne.n	8005afa <_dtoa_r+0x702>
 8005aea:	9a03      	ldr	r2, [sp, #12]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d1f7      	bne.n	8005ae0 <_dtoa_r+0x6e8>
 8005af0:	2230      	movs	r2, #48	; 0x30
 8005af2:	9903      	ldr	r1, [sp, #12]
 8005af4:	f108 0801 	add.w	r8, r8, #1
 8005af8:	700a      	strb	r2, [r1, #0]
 8005afa:	781a      	ldrb	r2, [r3, #0]
 8005afc:	3201      	adds	r2, #1
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	e79e      	b.n	8005a40 <_dtoa_r+0x648>
 8005b02:	46d0      	mov	r8, sl
 8005b04:	e7eb      	b.n	8005ade <_dtoa_r+0x6e6>
 8005b06:	2200      	movs	r2, #0
 8005b08:	4b6e      	ldr	r3, [pc, #440]	; (8005cc4 <_dtoa_r+0x8cc>)
 8005b0a:	f7fa fcef 	bl	80004ec <__aeabi_dmul>
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2300      	movs	r3, #0
 8005b12:	4680      	mov	r8, r0
 8005b14:	4689      	mov	r9, r1
 8005b16:	f7fa ff51 	bl	80009bc <__aeabi_dcmpeq>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d09b      	beq.n	8005a56 <_dtoa_r+0x65e>
 8005b1e:	e7cd      	b.n	8005abc <_dtoa_r+0x6c4>
 8005b20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b22:	2a00      	cmp	r2, #0
 8005b24:	f000 80d0 	beq.w	8005cc8 <_dtoa_r+0x8d0>
 8005b28:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005b2a:	2a01      	cmp	r2, #1
 8005b2c:	f300 80ae 	bgt.w	8005c8c <_dtoa_r+0x894>
 8005b30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b32:	2a00      	cmp	r2, #0
 8005b34:	f000 80a6 	beq.w	8005c84 <_dtoa_r+0x88c>
 8005b38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b3e:	9f06      	ldr	r7, [sp, #24]
 8005b40:	9a06      	ldr	r2, [sp, #24]
 8005b42:	2101      	movs	r1, #1
 8005b44:	441a      	add	r2, r3
 8005b46:	9206      	str	r2, [sp, #24]
 8005b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	441a      	add	r2, r3
 8005b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8005b50:	f000 fc6a 	bl	8006428 <__i2b>
 8005b54:	4606      	mov	r6, r0
 8005b56:	2f00      	cmp	r7, #0
 8005b58:	dd0c      	ble.n	8005b74 <_dtoa_r+0x77c>
 8005b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	dd09      	ble.n	8005b74 <_dtoa_r+0x77c>
 8005b60:	42bb      	cmp	r3, r7
 8005b62:	bfa8      	it	ge
 8005b64:	463b      	movge	r3, r7
 8005b66:	9a06      	ldr	r2, [sp, #24]
 8005b68:	1aff      	subs	r7, r7, r3
 8005b6a:	1ad2      	subs	r2, r2, r3
 8005b6c:	9206      	str	r2, [sp, #24]
 8005b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	9309      	str	r3, [sp, #36]	; 0x24
 8005b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b76:	b1f3      	cbz	r3, 8005bb6 <_dtoa_r+0x7be>
 8005b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 80a8 	beq.w	8005cd0 <_dtoa_r+0x8d8>
 8005b80:	2c00      	cmp	r4, #0
 8005b82:	dd10      	ble.n	8005ba6 <_dtoa_r+0x7ae>
 8005b84:	4631      	mov	r1, r6
 8005b86:	4622      	mov	r2, r4
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f000 fd0b 	bl	80065a4 <__pow5mult>
 8005b8e:	465a      	mov	r2, fp
 8005b90:	4601      	mov	r1, r0
 8005b92:	4606      	mov	r6, r0
 8005b94:	4628      	mov	r0, r5
 8005b96:	f000 fc5d 	bl	8006454 <__multiply>
 8005b9a:	4680      	mov	r8, r0
 8005b9c:	4659      	mov	r1, fp
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 fb8c 	bl	80062bc <_Bfree>
 8005ba4:	46c3      	mov	fp, r8
 8005ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba8:	1b1a      	subs	r2, r3, r4
 8005baa:	d004      	beq.n	8005bb6 <_dtoa_r+0x7be>
 8005bac:	4659      	mov	r1, fp
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 fcf8 	bl	80065a4 <__pow5mult>
 8005bb4:	4683      	mov	fp, r0
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	4628      	mov	r0, r5
 8005bba:	f000 fc35 	bl	8006428 <__i2b>
 8005bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f340 8086 	ble.w	8005cd4 <_dtoa_r+0x8dc>
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4601      	mov	r1, r0
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 fce9 	bl	80065a4 <__pow5mult>
 8005bd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	dd7f      	ble.n	8005cda <_dtoa_r+0x8e2>
 8005bda:	f04f 0800 	mov.w	r8, #0
 8005bde:	6923      	ldr	r3, [r4, #16]
 8005be0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005be4:	6918      	ldr	r0, [r3, #16]
 8005be6:	f000 fbd1 	bl	800638c <__hi0bits>
 8005bea:	f1c0 0020 	rsb	r0, r0, #32
 8005bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf0:	4418      	add	r0, r3
 8005bf2:	f010 001f 	ands.w	r0, r0, #31
 8005bf6:	f000 8092 	beq.w	8005d1e <_dtoa_r+0x926>
 8005bfa:	f1c0 0320 	rsb	r3, r0, #32
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	f340 808a 	ble.w	8005d18 <_dtoa_r+0x920>
 8005c04:	f1c0 001c 	rsb	r0, r0, #28
 8005c08:	9b06      	ldr	r3, [sp, #24]
 8005c0a:	4407      	add	r7, r0
 8005c0c:	4403      	add	r3, r0
 8005c0e:	9306      	str	r3, [sp, #24]
 8005c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c12:	4403      	add	r3, r0
 8005c14:	9309      	str	r3, [sp, #36]	; 0x24
 8005c16:	9b06      	ldr	r3, [sp, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	dd05      	ble.n	8005c28 <_dtoa_r+0x830>
 8005c1c:	4659      	mov	r1, fp
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4628      	mov	r0, r5
 8005c22:	f000 fd19 	bl	8006658 <__lshift>
 8005c26:	4683      	mov	fp, r0
 8005c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dd05      	ble.n	8005c3a <_dtoa_r+0x842>
 8005c2e:	4621      	mov	r1, r4
 8005c30:	461a      	mov	r2, r3
 8005c32:	4628      	mov	r0, r5
 8005c34:	f000 fd10 	bl	8006658 <__lshift>
 8005c38:	4604      	mov	r4, r0
 8005c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d070      	beq.n	8005d22 <_dtoa_r+0x92a>
 8005c40:	4621      	mov	r1, r4
 8005c42:	4658      	mov	r0, fp
 8005c44:	f000 fd78 	bl	8006738 <__mcmp>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	da6a      	bge.n	8005d22 <_dtoa_r+0x92a>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4659      	mov	r1, fp
 8005c50:	220a      	movs	r2, #10
 8005c52:	4628      	mov	r0, r5
 8005c54:	f000 fb54 	bl	8006300 <__multadd>
 8005c58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c5a:	4683      	mov	fp, r0
 8005c5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8194 	beq.w	8005f8e <_dtoa_r+0xb96>
 8005c66:	4631      	mov	r1, r6
 8005c68:	2300      	movs	r3, #0
 8005c6a:	220a      	movs	r2, #10
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f000 fb47 	bl	8006300 <__multadd>
 8005c72:	f1b9 0f00 	cmp.w	r9, #0
 8005c76:	4606      	mov	r6, r0
 8005c78:	f300 8093 	bgt.w	8005da2 <_dtoa_r+0x9aa>
 8005c7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	dc57      	bgt.n	8005d32 <_dtoa_r+0x93a>
 8005c82:	e08e      	b.n	8005da2 <_dtoa_r+0x9aa>
 8005c84:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c8a:	e757      	b.n	8005b3c <_dtoa_r+0x744>
 8005c8c:	9b08      	ldr	r3, [sp, #32]
 8005c8e:	1e5c      	subs	r4, r3, #1
 8005c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c92:	42a3      	cmp	r3, r4
 8005c94:	bfb7      	itett	lt
 8005c96:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005c98:	1b1c      	subge	r4, r3, r4
 8005c9a:	1ae2      	sublt	r2, r4, r3
 8005c9c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005c9e:	bfbe      	ittt	lt
 8005ca0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005ca2:	189b      	addlt	r3, r3, r2
 8005ca4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005ca6:	9b08      	ldr	r3, [sp, #32]
 8005ca8:	bfb8      	it	lt
 8005caa:	2400      	movlt	r4, #0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	bfbb      	ittet	lt
 8005cb0:	9b06      	ldrlt	r3, [sp, #24]
 8005cb2:	9a08      	ldrlt	r2, [sp, #32]
 8005cb4:	9f06      	ldrge	r7, [sp, #24]
 8005cb6:	1a9f      	sublt	r7, r3, r2
 8005cb8:	bfac      	ite	ge
 8005cba:	9b08      	ldrge	r3, [sp, #32]
 8005cbc:	2300      	movlt	r3, #0
 8005cbe:	e73f      	b.n	8005b40 <_dtoa_r+0x748>
 8005cc0:	3fe00000 	.word	0x3fe00000
 8005cc4:	40240000 	.word	0x40240000
 8005cc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005cca:	9f06      	ldr	r7, [sp, #24]
 8005ccc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005cce:	e742      	b.n	8005b56 <_dtoa_r+0x75e>
 8005cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cd2:	e76b      	b.n	8005bac <_dtoa_r+0x7b4>
 8005cd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	dc19      	bgt.n	8005d0e <_dtoa_r+0x916>
 8005cda:	9b04      	ldr	r3, [sp, #16]
 8005cdc:	b9bb      	cbnz	r3, 8005d0e <_dtoa_r+0x916>
 8005cde:	9b05      	ldr	r3, [sp, #20]
 8005ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ce4:	b99b      	cbnz	r3, 8005d0e <_dtoa_r+0x916>
 8005ce6:	9b05      	ldr	r3, [sp, #20]
 8005ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cec:	0d1b      	lsrs	r3, r3, #20
 8005cee:	051b      	lsls	r3, r3, #20
 8005cf0:	b183      	cbz	r3, 8005d14 <_dtoa_r+0x91c>
 8005cf2:	f04f 0801 	mov.w	r8, #1
 8005cf6:	9b06      	ldr	r3, [sp, #24]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	9306      	str	r3, [sp, #24]
 8005cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfe:	3301      	adds	r3, #1
 8005d00:	9309      	str	r3, [sp, #36]	; 0x24
 8005d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f47f af6a 	bne.w	8005bde <_dtoa_r+0x7e6>
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	e76f      	b.n	8005bee <_dtoa_r+0x7f6>
 8005d0e:	f04f 0800 	mov.w	r8, #0
 8005d12:	e7f6      	b.n	8005d02 <_dtoa_r+0x90a>
 8005d14:	4698      	mov	r8, r3
 8005d16:	e7f4      	b.n	8005d02 <_dtoa_r+0x90a>
 8005d18:	f43f af7d 	beq.w	8005c16 <_dtoa_r+0x81e>
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	301c      	adds	r0, #28
 8005d20:	e772      	b.n	8005c08 <_dtoa_r+0x810>
 8005d22:	9b08      	ldr	r3, [sp, #32]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	dc36      	bgt.n	8005d96 <_dtoa_r+0x99e>
 8005d28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	dd33      	ble.n	8005d96 <_dtoa_r+0x99e>
 8005d2e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d32:	f1b9 0f00 	cmp.w	r9, #0
 8005d36:	d10d      	bne.n	8005d54 <_dtoa_r+0x95c>
 8005d38:	4621      	mov	r1, r4
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	2205      	movs	r2, #5
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f000 fade 	bl	8006300 <__multadd>
 8005d44:	4601      	mov	r1, r0
 8005d46:	4604      	mov	r4, r0
 8005d48:	4658      	mov	r0, fp
 8005d4a:	f000 fcf5 	bl	8006738 <__mcmp>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	f73f adb8 	bgt.w	80058c4 <_dtoa_r+0x4cc>
 8005d54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d56:	9f03      	ldr	r7, [sp, #12]
 8005d58:	ea6f 0a03 	mvn.w	sl, r3
 8005d5c:	f04f 0800 	mov.w	r8, #0
 8005d60:	4621      	mov	r1, r4
 8005d62:	4628      	mov	r0, r5
 8005d64:	f000 faaa 	bl	80062bc <_Bfree>
 8005d68:	2e00      	cmp	r6, #0
 8005d6a:	f43f aea7 	beq.w	8005abc <_dtoa_r+0x6c4>
 8005d6e:	f1b8 0f00 	cmp.w	r8, #0
 8005d72:	d005      	beq.n	8005d80 <_dtoa_r+0x988>
 8005d74:	45b0      	cmp	r8, r6
 8005d76:	d003      	beq.n	8005d80 <_dtoa_r+0x988>
 8005d78:	4641      	mov	r1, r8
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f000 fa9e 	bl	80062bc <_Bfree>
 8005d80:	4631      	mov	r1, r6
 8005d82:	4628      	mov	r0, r5
 8005d84:	f000 fa9a 	bl	80062bc <_Bfree>
 8005d88:	e698      	b.n	8005abc <_dtoa_r+0x6c4>
 8005d8a:	2400      	movs	r4, #0
 8005d8c:	4626      	mov	r6, r4
 8005d8e:	e7e1      	b.n	8005d54 <_dtoa_r+0x95c>
 8005d90:	46c2      	mov	sl, r8
 8005d92:	4626      	mov	r6, r4
 8005d94:	e596      	b.n	80058c4 <_dtoa_r+0x4cc>
 8005d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80fd 	beq.w	8005f9c <_dtoa_r+0xba4>
 8005da2:	2f00      	cmp	r7, #0
 8005da4:	dd05      	ble.n	8005db2 <_dtoa_r+0x9ba>
 8005da6:	4631      	mov	r1, r6
 8005da8:	463a      	mov	r2, r7
 8005daa:	4628      	mov	r0, r5
 8005dac:	f000 fc54 	bl	8006658 <__lshift>
 8005db0:	4606      	mov	r6, r0
 8005db2:	f1b8 0f00 	cmp.w	r8, #0
 8005db6:	d05c      	beq.n	8005e72 <_dtoa_r+0xa7a>
 8005db8:	4628      	mov	r0, r5
 8005dba:	6871      	ldr	r1, [r6, #4]
 8005dbc:	f000 fa3e 	bl	800623c <_Balloc>
 8005dc0:	4607      	mov	r7, r0
 8005dc2:	b928      	cbnz	r0, 8005dd0 <_dtoa_r+0x9d8>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005dca:	4b7f      	ldr	r3, [pc, #508]	; (8005fc8 <_dtoa_r+0xbd0>)
 8005dcc:	f7ff bb28 	b.w	8005420 <_dtoa_r+0x28>
 8005dd0:	6932      	ldr	r2, [r6, #16]
 8005dd2:	f106 010c 	add.w	r1, r6, #12
 8005dd6:	3202      	adds	r2, #2
 8005dd8:	0092      	lsls	r2, r2, #2
 8005dda:	300c      	adds	r0, #12
 8005ddc:	f000 fa20 	bl	8006220 <memcpy>
 8005de0:	2201      	movs	r2, #1
 8005de2:	4639      	mov	r1, r7
 8005de4:	4628      	mov	r0, r5
 8005de6:	f000 fc37 	bl	8006658 <__lshift>
 8005dea:	46b0      	mov	r8, r6
 8005dec:	4606      	mov	r6, r0
 8005dee:	9b03      	ldr	r3, [sp, #12]
 8005df0:	3301      	adds	r3, #1
 8005df2:	9308      	str	r3, [sp, #32]
 8005df4:	9b03      	ldr	r3, [sp, #12]
 8005df6:	444b      	add	r3, r9
 8005df8:	930a      	str	r3, [sp, #40]	; 0x28
 8005dfa:	9b04      	ldr	r3, [sp, #16]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	9309      	str	r3, [sp, #36]	; 0x24
 8005e02:	9b08      	ldr	r3, [sp, #32]
 8005e04:	4621      	mov	r1, r4
 8005e06:	3b01      	subs	r3, #1
 8005e08:	4658      	mov	r0, fp
 8005e0a:	9304      	str	r3, [sp, #16]
 8005e0c:	f7ff fa66 	bl	80052dc <quorem>
 8005e10:	4603      	mov	r3, r0
 8005e12:	4641      	mov	r1, r8
 8005e14:	3330      	adds	r3, #48	; 0x30
 8005e16:	9006      	str	r0, [sp, #24]
 8005e18:	4658      	mov	r0, fp
 8005e1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e1c:	f000 fc8c 	bl	8006738 <__mcmp>
 8005e20:	4632      	mov	r2, r6
 8005e22:	4681      	mov	r9, r0
 8005e24:	4621      	mov	r1, r4
 8005e26:	4628      	mov	r0, r5
 8005e28:	f000 fca2 	bl	8006770 <__mdiff>
 8005e2c:	68c2      	ldr	r2, [r0, #12]
 8005e2e:	4607      	mov	r7, r0
 8005e30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e32:	bb02      	cbnz	r2, 8005e76 <_dtoa_r+0xa7e>
 8005e34:	4601      	mov	r1, r0
 8005e36:	4658      	mov	r0, fp
 8005e38:	f000 fc7e 	bl	8006738 <__mcmp>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e40:	4639      	mov	r1, r7
 8005e42:	4628      	mov	r0, r5
 8005e44:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005e48:	f000 fa38 	bl	80062bc <_Bfree>
 8005e4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e50:	9f08      	ldr	r7, [sp, #32]
 8005e52:	ea43 0102 	orr.w	r1, r3, r2
 8005e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e5c:	d10d      	bne.n	8005e7a <_dtoa_r+0xa82>
 8005e5e:	2b39      	cmp	r3, #57	; 0x39
 8005e60:	d029      	beq.n	8005eb6 <_dtoa_r+0xabe>
 8005e62:	f1b9 0f00 	cmp.w	r9, #0
 8005e66:	dd01      	ble.n	8005e6c <_dtoa_r+0xa74>
 8005e68:	9b06      	ldr	r3, [sp, #24]
 8005e6a:	3331      	adds	r3, #49	; 0x31
 8005e6c:	9a04      	ldr	r2, [sp, #16]
 8005e6e:	7013      	strb	r3, [r2, #0]
 8005e70:	e776      	b.n	8005d60 <_dtoa_r+0x968>
 8005e72:	4630      	mov	r0, r6
 8005e74:	e7b9      	b.n	8005dea <_dtoa_r+0x9f2>
 8005e76:	2201      	movs	r2, #1
 8005e78:	e7e2      	b.n	8005e40 <_dtoa_r+0xa48>
 8005e7a:	f1b9 0f00 	cmp.w	r9, #0
 8005e7e:	db06      	blt.n	8005e8e <_dtoa_r+0xa96>
 8005e80:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005e82:	ea41 0909 	orr.w	r9, r1, r9
 8005e86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e88:	ea59 0101 	orrs.w	r1, r9, r1
 8005e8c:	d120      	bne.n	8005ed0 <_dtoa_r+0xad8>
 8005e8e:	2a00      	cmp	r2, #0
 8005e90:	ddec      	ble.n	8005e6c <_dtoa_r+0xa74>
 8005e92:	4659      	mov	r1, fp
 8005e94:	2201      	movs	r2, #1
 8005e96:	4628      	mov	r0, r5
 8005e98:	9308      	str	r3, [sp, #32]
 8005e9a:	f000 fbdd 	bl	8006658 <__lshift>
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	4683      	mov	fp, r0
 8005ea2:	f000 fc49 	bl	8006738 <__mcmp>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	9b08      	ldr	r3, [sp, #32]
 8005eaa:	dc02      	bgt.n	8005eb2 <_dtoa_r+0xaba>
 8005eac:	d1de      	bne.n	8005e6c <_dtoa_r+0xa74>
 8005eae:	07da      	lsls	r2, r3, #31
 8005eb0:	d5dc      	bpl.n	8005e6c <_dtoa_r+0xa74>
 8005eb2:	2b39      	cmp	r3, #57	; 0x39
 8005eb4:	d1d8      	bne.n	8005e68 <_dtoa_r+0xa70>
 8005eb6:	2339      	movs	r3, #57	; 0x39
 8005eb8:	9a04      	ldr	r2, [sp, #16]
 8005eba:	7013      	strb	r3, [r2, #0]
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	461f      	mov	r7, r3
 8005ec0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	2a39      	cmp	r2, #57	; 0x39
 8005ec8:	d050      	beq.n	8005f6c <_dtoa_r+0xb74>
 8005eca:	3201      	adds	r2, #1
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	e747      	b.n	8005d60 <_dtoa_r+0x968>
 8005ed0:	2a00      	cmp	r2, #0
 8005ed2:	dd03      	ble.n	8005edc <_dtoa_r+0xae4>
 8005ed4:	2b39      	cmp	r3, #57	; 0x39
 8005ed6:	d0ee      	beq.n	8005eb6 <_dtoa_r+0xabe>
 8005ed8:	3301      	adds	r3, #1
 8005eda:	e7c7      	b.n	8005e6c <_dtoa_r+0xa74>
 8005edc:	9a08      	ldr	r2, [sp, #32]
 8005ede:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ee0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005ee4:	428a      	cmp	r2, r1
 8005ee6:	d02a      	beq.n	8005f3e <_dtoa_r+0xb46>
 8005ee8:	4659      	mov	r1, fp
 8005eea:	2300      	movs	r3, #0
 8005eec:	220a      	movs	r2, #10
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f000 fa06 	bl	8006300 <__multadd>
 8005ef4:	45b0      	cmp	r8, r6
 8005ef6:	4683      	mov	fp, r0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	f04f 020a 	mov.w	r2, #10
 8005f00:	4641      	mov	r1, r8
 8005f02:	4628      	mov	r0, r5
 8005f04:	d107      	bne.n	8005f16 <_dtoa_r+0xb1e>
 8005f06:	f000 f9fb 	bl	8006300 <__multadd>
 8005f0a:	4680      	mov	r8, r0
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	9b08      	ldr	r3, [sp, #32]
 8005f10:	3301      	adds	r3, #1
 8005f12:	9308      	str	r3, [sp, #32]
 8005f14:	e775      	b.n	8005e02 <_dtoa_r+0xa0a>
 8005f16:	f000 f9f3 	bl	8006300 <__multadd>
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4680      	mov	r8, r0
 8005f1e:	2300      	movs	r3, #0
 8005f20:	220a      	movs	r2, #10
 8005f22:	4628      	mov	r0, r5
 8005f24:	f000 f9ec 	bl	8006300 <__multadd>
 8005f28:	4606      	mov	r6, r0
 8005f2a:	e7f0      	b.n	8005f0e <_dtoa_r+0xb16>
 8005f2c:	f1b9 0f00 	cmp.w	r9, #0
 8005f30:	bfcc      	ite	gt
 8005f32:	464f      	movgt	r7, r9
 8005f34:	2701      	movle	r7, #1
 8005f36:	f04f 0800 	mov.w	r8, #0
 8005f3a:	9a03      	ldr	r2, [sp, #12]
 8005f3c:	4417      	add	r7, r2
 8005f3e:	4659      	mov	r1, fp
 8005f40:	2201      	movs	r2, #1
 8005f42:	4628      	mov	r0, r5
 8005f44:	9308      	str	r3, [sp, #32]
 8005f46:	f000 fb87 	bl	8006658 <__lshift>
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	4683      	mov	fp, r0
 8005f4e:	f000 fbf3 	bl	8006738 <__mcmp>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	dcb2      	bgt.n	8005ebc <_dtoa_r+0xac4>
 8005f56:	d102      	bne.n	8005f5e <_dtoa_r+0xb66>
 8005f58:	9b08      	ldr	r3, [sp, #32]
 8005f5a:	07db      	lsls	r3, r3, #31
 8005f5c:	d4ae      	bmi.n	8005ebc <_dtoa_r+0xac4>
 8005f5e:	463b      	mov	r3, r7
 8005f60:	461f      	mov	r7, r3
 8005f62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f66:	2a30      	cmp	r2, #48	; 0x30
 8005f68:	d0fa      	beq.n	8005f60 <_dtoa_r+0xb68>
 8005f6a:	e6f9      	b.n	8005d60 <_dtoa_r+0x968>
 8005f6c:	9a03      	ldr	r2, [sp, #12]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d1a5      	bne.n	8005ebe <_dtoa_r+0xac6>
 8005f72:	2331      	movs	r3, #49	; 0x31
 8005f74:	f10a 0a01 	add.w	sl, sl, #1
 8005f78:	e779      	b.n	8005e6e <_dtoa_r+0xa76>
 8005f7a:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <_dtoa_r+0xbd4>)
 8005f7c:	f7ff baa8 	b.w	80054d0 <_dtoa_r+0xd8>
 8005f80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f47f aa81 	bne.w	800548a <_dtoa_r+0x92>
 8005f88:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <_dtoa_r+0xbd8>)
 8005f8a:	f7ff baa1 	b.w	80054d0 <_dtoa_r+0xd8>
 8005f8e:	f1b9 0f00 	cmp.w	r9, #0
 8005f92:	dc03      	bgt.n	8005f9c <_dtoa_r+0xba4>
 8005f94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	f73f aecb 	bgt.w	8005d32 <_dtoa_r+0x93a>
 8005f9c:	9f03      	ldr	r7, [sp, #12]
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	4658      	mov	r0, fp
 8005fa2:	f7ff f99b 	bl	80052dc <quorem>
 8005fa6:	9a03      	ldr	r2, [sp, #12]
 8005fa8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005fac:	f807 3b01 	strb.w	r3, [r7], #1
 8005fb0:	1aba      	subs	r2, r7, r2
 8005fb2:	4591      	cmp	r9, r2
 8005fb4:	ddba      	ble.n	8005f2c <_dtoa_r+0xb34>
 8005fb6:	4659      	mov	r1, fp
 8005fb8:	2300      	movs	r3, #0
 8005fba:	220a      	movs	r2, #10
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f000 f99f 	bl	8006300 <__multadd>
 8005fc2:	4683      	mov	fp, r0
 8005fc4:	e7eb      	b.n	8005f9e <_dtoa_r+0xba6>
 8005fc6:	bf00      	nop
 8005fc8:	080079c8 	.word	0x080079c8
 8005fcc:	0800788c 	.word	0x0800788c
 8005fd0:	08007960 	.word	0x08007960

08005fd4 <std>:
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	b510      	push	{r4, lr}
 8005fd8:	4604      	mov	r4, r0
 8005fda:	e9c0 3300 	strd	r3, r3, [r0]
 8005fde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fe2:	6083      	str	r3, [r0, #8]
 8005fe4:	8181      	strh	r1, [r0, #12]
 8005fe6:	6643      	str	r3, [r0, #100]	; 0x64
 8005fe8:	81c2      	strh	r2, [r0, #14]
 8005fea:	6183      	str	r3, [r0, #24]
 8005fec:	4619      	mov	r1, r3
 8005fee:	2208      	movs	r2, #8
 8005ff0:	305c      	adds	r0, #92	; 0x5c
 8005ff2:	f7fe fc45 	bl	8004880 <memset>
 8005ff6:	4b05      	ldr	r3, [pc, #20]	; (800600c <std+0x38>)
 8005ff8:	6224      	str	r4, [r4, #32]
 8005ffa:	6263      	str	r3, [r4, #36]	; 0x24
 8005ffc:	4b04      	ldr	r3, [pc, #16]	; (8006010 <std+0x3c>)
 8005ffe:	62a3      	str	r3, [r4, #40]	; 0x28
 8006000:	4b04      	ldr	r3, [pc, #16]	; (8006014 <std+0x40>)
 8006002:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006004:	4b04      	ldr	r3, [pc, #16]	; (8006018 <std+0x44>)
 8006006:	6323      	str	r3, [r4, #48]	; 0x30
 8006008:	bd10      	pop	{r4, pc}
 800600a:	bf00      	nop
 800600c:	080070a9 	.word	0x080070a9
 8006010:	080070cb 	.word	0x080070cb
 8006014:	08007103 	.word	0x08007103
 8006018:	08007127 	.word	0x08007127

0800601c <_cleanup_r>:
 800601c:	4901      	ldr	r1, [pc, #4]	; (8006024 <_cleanup_r+0x8>)
 800601e:	f000 b8c1 	b.w	80061a4 <_fwalk_reent>
 8006022:	bf00      	nop
 8006024:	08007409 	.word	0x08007409

08006028 <__sfmoreglue>:
 8006028:	2268      	movs	r2, #104	; 0x68
 800602a:	b570      	push	{r4, r5, r6, lr}
 800602c:	1e4d      	subs	r5, r1, #1
 800602e:	4355      	muls	r5, r2
 8006030:	460e      	mov	r6, r1
 8006032:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006036:	f000 fcff 	bl	8006a38 <_malloc_r>
 800603a:	4604      	mov	r4, r0
 800603c:	b140      	cbz	r0, 8006050 <__sfmoreglue+0x28>
 800603e:	2100      	movs	r1, #0
 8006040:	e9c0 1600 	strd	r1, r6, [r0]
 8006044:	300c      	adds	r0, #12
 8006046:	60a0      	str	r0, [r4, #8]
 8006048:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800604c:	f7fe fc18 	bl	8004880 <memset>
 8006050:	4620      	mov	r0, r4
 8006052:	bd70      	pop	{r4, r5, r6, pc}

08006054 <__sfp_lock_acquire>:
 8006054:	4801      	ldr	r0, [pc, #4]	; (800605c <__sfp_lock_acquire+0x8>)
 8006056:	f000 b8ca 	b.w	80061ee <__retarget_lock_acquire_recursive>
 800605a:	bf00      	nop
 800605c:	200004cd 	.word	0x200004cd

08006060 <__sfp_lock_release>:
 8006060:	4801      	ldr	r0, [pc, #4]	; (8006068 <__sfp_lock_release+0x8>)
 8006062:	f000 b8c5 	b.w	80061f0 <__retarget_lock_release_recursive>
 8006066:	bf00      	nop
 8006068:	200004cd 	.word	0x200004cd

0800606c <__sinit_lock_acquire>:
 800606c:	4801      	ldr	r0, [pc, #4]	; (8006074 <__sinit_lock_acquire+0x8>)
 800606e:	f000 b8be 	b.w	80061ee <__retarget_lock_acquire_recursive>
 8006072:	bf00      	nop
 8006074:	200004ce 	.word	0x200004ce

08006078 <__sinit_lock_release>:
 8006078:	4801      	ldr	r0, [pc, #4]	; (8006080 <__sinit_lock_release+0x8>)
 800607a:	f000 b8b9 	b.w	80061f0 <__retarget_lock_release_recursive>
 800607e:	bf00      	nop
 8006080:	200004ce 	.word	0x200004ce

08006084 <__sinit>:
 8006084:	b510      	push	{r4, lr}
 8006086:	4604      	mov	r4, r0
 8006088:	f7ff fff0 	bl	800606c <__sinit_lock_acquire>
 800608c:	69a3      	ldr	r3, [r4, #24]
 800608e:	b11b      	cbz	r3, 8006098 <__sinit+0x14>
 8006090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006094:	f7ff bff0 	b.w	8006078 <__sinit_lock_release>
 8006098:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800609c:	6523      	str	r3, [r4, #80]	; 0x50
 800609e:	4b13      	ldr	r3, [pc, #76]	; (80060ec <__sinit+0x68>)
 80060a0:	4a13      	ldr	r2, [pc, #76]	; (80060f0 <__sinit+0x6c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	bf08      	it	eq
 80060aa:	2301      	moveq	r3, #1
 80060ac:	4620      	mov	r0, r4
 80060ae:	bf08      	it	eq
 80060b0:	61a3      	streq	r3, [r4, #24]
 80060b2:	f000 f81f 	bl	80060f4 <__sfp>
 80060b6:	6060      	str	r0, [r4, #4]
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 f81b 	bl	80060f4 <__sfp>
 80060be:	60a0      	str	r0, [r4, #8]
 80060c0:	4620      	mov	r0, r4
 80060c2:	f000 f817 	bl	80060f4 <__sfp>
 80060c6:	2200      	movs	r2, #0
 80060c8:	2104      	movs	r1, #4
 80060ca:	60e0      	str	r0, [r4, #12]
 80060cc:	6860      	ldr	r0, [r4, #4]
 80060ce:	f7ff ff81 	bl	8005fd4 <std>
 80060d2:	2201      	movs	r2, #1
 80060d4:	2109      	movs	r1, #9
 80060d6:	68a0      	ldr	r0, [r4, #8]
 80060d8:	f7ff ff7c 	bl	8005fd4 <std>
 80060dc:	2202      	movs	r2, #2
 80060de:	2112      	movs	r1, #18
 80060e0:	68e0      	ldr	r0, [r4, #12]
 80060e2:	f7ff ff77 	bl	8005fd4 <std>
 80060e6:	2301      	movs	r3, #1
 80060e8:	61a3      	str	r3, [r4, #24]
 80060ea:	e7d1      	b.n	8006090 <__sinit+0xc>
 80060ec:	08007878 	.word	0x08007878
 80060f0:	0800601d 	.word	0x0800601d

080060f4 <__sfp>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	4607      	mov	r7, r0
 80060f8:	f7ff ffac 	bl	8006054 <__sfp_lock_acquire>
 80060fc:	4b1e      	ldr	r3, [pc, #120]	; (8006178 <__sfp+0x84>)
 80060fe:	681e      	ldr	r6, [r3, #0]
 8006100:	69b3      	ldr	r3, [r6, #24]
 8006102:	b913      	cbnz	r3, 800610a <__sfp+0x16>
 8006104:	4630      	mov	r0, r6
 8006106:	f7ff ffbd 	bl	8006084 <__sinit>
 800610a:	3648      	adds	r6, #72	; 0x48
 800610c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006110:	3b01      	subs	r3, #1
 8006112:	d503      	bpl.n	800611c <__sfp+0x28>
 8006114:	6833      	ldr	r3, [r6, #0]
 8006116:	b30b      	cbz	r3, 800615c <__sfp+0x68>
 8006118:	6836      	ldr	r6, [r6, #0]
 800611a:	e7f7      	b.n	800610c <__sfp+0x18>
 800611c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006120:	b9d5      	cbnz	r5, 8006158 <__sfp+0x64>
 8006122:	4b16      	ldr	r3, [pc, #88]	; (800617c <__sfp+0x88>)
 8006124:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006128:	60e3      	str	r3, [r4, #12]
 800612a:	6665      	str	r5, [r4, #100]	; 0x64
 800612c:	f000 f85e 	bl	80061ec <__retarget_lock_init_recursive>
 8006130:	f7ff ff96 	bl	8006060 <__sfp_lock_release>
 8006134:	2208      	movs	r2, #8
 8006136:	4629      	mov	r1, r5
 8006138:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800613c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006140:	6025      	str	r5, [r4, #0]
 8006142:	61a5      	str	r5, [r4, #24]
 8006144:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006148:	f7fe fb9a 	bl	8004880 <memset>
 800614c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006150:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006154:	4620      	mov	r0, r4
 8006156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006158:	3468      	adds	r4, #104	; 0x68
 800615a:	e7d9      	b.n	8006110 <__sfp+0x1c>
 800615c:	2104      	movs	r1, #4
 800615e:	4638      	mov	r0, r7
 8006160:	f7ff ff62 	bl	8006028 <__sfmoreglue>
 8006164:	4604      	mov	r4, r0
 8006166:	6030      	str	r0, [r6, #0]
 8006168:	2800      	cmp	r0, #0
 800616a:	d1d5      	bne.n	8006118 <__sfp+0x24>
 800616c:	f7ff ff78 	bl	8006060 <__sfp_lock_release>
 8006170:	230c      	movs	r3, #12
 8006172:	603b      	str	r3, [r7, #0]
 8006174:	e7ee      	b.n	8006154 <__sfp+0x60>
 8006176:	bf00      	nop
 8006178:	08007878 	.word	0x08007878
 800617c:	ffff0001 	.word	0xffff0001

08006180 <fiprintf>:
 8006180:	b40e      	push	{r1, r2, r3}
 8006182:	b503      	push	{r0, r1, lr}
 8006184:	4601      	mov	r1, r0
 8006186:	ab03      	add	r3, sp, #12
 8006188:	4805      	ldr	r0, [pc, #20]	; (80061a0 <fiprintf+0x20>)
 800618a:	f853 2b04 	ldr.w	r2, [r3], #4
 800618e:	6800      	ldr	r0, [r0, #0]
 8006190:	9301      	str	r3, [sp, #4]
 8006192:	f000 fe49 	bl	8006e28 <_vfiprintf_r>
 8006196:	b002      	add	sp, #8
 8006198:	f85d eb04 	ldr.w	lr, [sp], #4
 800619c:	b003      	add	sp, #12
 800619e:	4770      	bx	lr
 80061a0:	2000009c 	.word	0x2000009c

080061a4 <_fwalk_reent>:
 80061a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061a8:	4606      	mov	r6, r0
 80061aa:	4688      	mov	r8, r1
 80061ac:	2700      	movs	r7, #0
 80061ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061b6:	f1b9 0901 	subs.w	r9, r9, #1
 80061ba:	d505      	bpl.n	80061c8 <_fwalk_reent+0x24>
 80061bc:	6824      	ldr	r4, [r4, #0]
 80061be:	2c00      	cmp	r4, #0
 80061c0:	d1f7      	bne.n	80061b2 <_fwalk_reent+0xe>
 80061c2:	4638      	mov	r0, r7
 80061c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061c8:	89ab      	ldrh	r3, [r5, #12]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d907      	bls.n	80061de <_fwalk_reent+0x3a>
 80061ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061d2:	3301      	adds	r3, #1
 80061d4:	d003      	beq.n	80061de <_fwalk_reent+0x3a>
 80061d6:	4629      	mov	r1, r5
 80061d8:	4630      	mov	r0, r6
 80061da:	47c0      	blx	r8
 80061dc:	4307      	orrs	r7, r0
 80061de:	3568      	adds	r5, #104	; 0x68
 80061e0:	e7e9      	b.n	80061b6 <_fwalk_reent+0x12>
	...

080061e4 <_localeconv_r>:
 80061e4:	4800      	ldr	r0, [pc, #0]	; (80061e8 <_localeconv_r+0x4>)
 80061e6:	4770      	bx	lr
 80061e8:	200001f0 	.word	0x200001f0

080061ec <__retarget_lock_init_recursive>:
 80061ec:	4770      	bx	lr

080061ee <__retarget_lock_acquire_recursive>:
 80061ee:	4770      	bx	lr

080061f0 <__retarget_lock_release_recursive>:
 80061f0:	4770      	bx	lr
	...

080061f4 <malloc>:
 80061f4:	4b02      	ldr	r3, [pc, #8]	; (8006200 <malloc+0xc>)
 80061f6:	4601      	mov	r1, r0
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	f000 bc1d 	b.w	8006a38 <_malloc_r>
 80061fe:	bf00      	nop
 8006200:	2000009c 	.word	0x2000009c

08006204 <memchr>:
 8006204:	4603      	mov	r3, r0
 8006206:	b510      	push	{r4, lr}
 8006208:	b2c9      	uxtb	r1, r1
 800620a:	4402      	add	r2, r0
 800620c:	4293      	cmp	r3, r2
 800620e:	4618      	mov	r0, r3
 8006210:	d101      	bne.n	8006216 <memchr+0x12>
 8006212:	2000      	movs	r0, #0
 8006214:	e003      	b.n	800621e <memchr+0x1a>
 8006216:	7804      	ldrb	r4, [r0, #0]
 8006218:	3301      	adds	r3, #1
 800621a:	428c      	cmp	r4, r1
 800621c:	d1f6      	bne.n	800620c <memchr+0x8>
 800621e:	bd10      	pop	{r4, pc}

08006220 <memcpy>:
 8006220:	440a      	add	r2, r1
 8006222:	4291      	cmp	r1, r2
 8006224:	f100 33ff 	add.w	r3, r0, #4294967295
 8006228:	d100      	bne.n	800622c <memcpy+0xc>
 800622a:	4770      	bx	lr
 800622c:	b510      	push	{r4, lr}
 800622e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006232:	4291      	cmp	r1, r2
 8006234:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006238:	d1f9      	bne.n	800622e <memcpy+0xe>
 800623a:	bd10      	pop	{r4, pc}

0800623c <_Balloc>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006240:	4604      	mov	r4, r0
 8006242:	460d      	mov	r5, r1
 8006244:	b976      	cbnz	r6, 8006264 <_Balloc+0x28>
 8006246:	2010      	movs	r0, #16
 8006248:	f7ff ffd4 	bl	80061f4 <malloc>
 800624c:	4602      	mov	r2, r0
 800624e:	6260      	str	r0, [r4, #36]	; 0x24
 8006250:	b920      	cbnz	r0, 800625c <_Balloc+0x20>
 8006252:	2166      	movs	r1, #102	; 0x66
 8006254:	4b17      	ldr	r3, [pc, #92]	; (80062b4 <_Balloc+0x78>)
 8006256:	4818      	ldr	r0, [pc, #96]	; (80062b8 <_Balloc+0x7c>)
 8006258:	f7ff f822 	bl	80052a0 <__assert_func>
 800625c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006260:	6006      	str	r6, [r0, #0]
 8006262:	60c6      	str	r6, [r0, #12]
 8006264:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006266:	68f3      	ldr	r3, [r6, #12]
 8006268:	b183      	cbz	r3, 800628c <_Balloc+0x50>
 800626a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006272:	b9b8      	cbnz	r0, 80062a4 <_Balloc+0x68>
 8006274:	2101      	movs	r1, #1
 8006276:	fa01 f605 	lsl.w	r6, r1, r5
 800627a:	1d72      	adds	r2, r6, #5
 800627c:	4620      	mov	r0, r4
 800627e:	0092      	lsls	r2, r2, #2
 8006280:	f000 fb5e 	bl	8006940 <_calloc_r>
 8006284:	b160      	cbz	r0, 80062a0 <_Balloc+0x64>
 8006286:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800628a:	e00e      	b.n	80062aa <_Balloc+0x6e>
 800628c:	2221      	movs	r2, #33	; 0x21
 800628e:	2104      	movs	r1, #4
 8006290:	4620      	mov	r0, r4
 8006292:	f000 fb55 	bl	8006940 <_calloc_r>
 8006296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006298:	60f0      	str	r0, [r6, #12]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e4      	bne.n	800626a <_Balloc+0x2e>
 80062a0:	2000      	movs	r0, #0
 80062a2:	bd70      	pop	{r4, r5, r6, pc}
 80062a4:	6802      	ldr	r2, [r0, #0]
 80062a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062aa:	2300      	movs	r3, #0
 80062ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062b0:	e7f7      	b.n	80062a2 <_Balloc+0x66>
 80062b2:	bf00      	nop
 80062b4:	080078b0 	.word	0x080078b0
 80062b8:	08007a3c 	.word	0x08007a3c

080062bc <_Bfree>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062c0:	4605      	mov	r5, r0
 80062c2:	460c      	mov	r4, r1
 80062c4:	b976      	cbnz	r6, 80062e4 <_Bfree+0x28>
 80062c6:	2010      	movs	r0, #16
 80062c8:	f7ff ff94 	bl	80061f4 <malloc>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6268      	str	r0, [r5, #36]	; 0x24
 80062d0:	b920      	cbnz	r0, 80062dc <_Bfree+0x20>
 80062d2:	218a      	movs	r1, #138	; 0x8a
 80062d4:	4b08      	ldr	r3, [pc, #32]	; (80062f8 <_Bfree+0x3c>)
 80062d6:	4809      	ldr	r0, [pc, #36]	; (80062fc <_Bfree+0x40>)
 80062d8:	f7fe ffe2 	bl	80052a0 <__assert_func>
 80062dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062e0:	6006      	str	r6, [r0, #0]
 80062e2:	60c6      	str	r6, [r0, #12]
 80062e4:	b13c      	cbz	r4, 80062f6 <_Bfree+0x3a>
 80062e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062e8:	6862      	ldr	r2, [r4, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062f0:	6021      	str	r1, [r4, #0]
 80062f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062f6:	bd70      	pop	{r4, r5, r6, pc}
 80062f8:	080078b0 	.word	0x080078b0
 80062fc:	08007a3c 	.word	0x08007a3c

08006300 <__multadd>:
 8006300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006304:	4607      	mov	r7, r0
 8006306:	460c      	mov	r4, r1
 8006308:	461e      	mov	r6, r3
 800630a:	2000      	movs	r0, #0
 800630c:	690d      	ldr	r5, [r1, #16]
 800630e:	f101 0c14 	add.w	ip, r1, #20
 8006312:	f8dc 3000 	ldr.w	r3, [ip]
 8006316:	3001      	adds	r0, #1
 8006318:	b299      	uxth	r1, r3
 800631a:	fb02 6101 	mla	r1, r2, r1, r6
 800631e:	0c1e      	lsrs	r6, r3, #16
 8006320:	0c0b      	lsrs	r3, r1, #16
 8006322:	fb02 3306 	mla	r3, r2, r6, r3
 8006326:	b289      	uxth	r1, r1
 8006328:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800632c:	4285      	cmp	r5, r0
 800632e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006332:	f84c 1b04 	str.w	r1, [ip], #4
 8006336:	dcec      	bgt.n	8006312 <__multadd+0x12>
 8006338:	b30e      	cbz	r6, 800637e <__multadd+0x7e>
 800633a:	68a3      	ldr	r3, [r4, #8]
 800633c:	42ab      	cmp	r3, r5
 800633e:	dc19      	bgt.n	8006374 <__multadd+0x74>
 8006340:	6861      	ldr	r1, [r4, #4]
 8006342:	4638      	mov	r0, r7
 8006344:	3101      	adds	r1, #1
 8006346:	f7ff ff79 	bl	800623c <_Balloc>
 800634a:	4680      	mov	r8, r0
 800634c:	b928      	cbnz	r0, 800635a <__multadd+0x5a>
 800634e:	4602      	mov	r2, r0
 8006350:	21b5      	movs	r1, #181	; 0xb5
 8006352:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <__multadd+0x84>)
 8006354:	480c      	ldr	r0, [pc, #48]	; (8006388 <__multadd+0x88>)
 8006356:	f7fe ffa3 	bl	80052a0 <__assert_func>
 800635a:	6922      	ldr	r2, [r4, #16]
 800635c:	f104 010c 	add.w	r1, r4, #12
 8006360:	3202      	adds	r2, #2
 8006362:	0092      	lsls	r2, r2, #2
 8006364:	300c      	adds	r0, #12
 8006366:	f7ff ff5b 	bl	8006220 <memcpy>
 800636a:	4621      	mov	r1, r4
 800636c:	4638      	mov	r0, r7
 800636e:	f7ff ffa5 	bl	80062bc <_Bfree>
 8006372:	4644      	mov	r4, r8
 8006374:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006378:	3501      	adds	r5, #1
 800637a:	615e      	str	r6, [r3, #20]
 800637c:	6125      	str	r5, [r4, #16]
 800637e:	4620      	mov	r0, r4
 8006380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006384:	080079c8 	.word	0x080079c8
 8006388:	08007a3c 	.word	0x08007a3c

0800638c <__hi0bits>:
 800638c:	0c02      	lsrs	r2, r0, #16
 800638e:	0412      	lsls	r2, r2, #16
 8006390:	4603      	mov	r3, r0
 8006392:	b9ca      	cbnz	r2, 80063c8 <__hi0bits+0x3c>
 8006394:	0403      	lsls	r3, r0, #16
 8006396:	2010      	movs	r0, #16
 8006398:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800639c:	bf04      	itt	eq
 800639e:	021b      	lsleq	r3, r3, #8
 80063a0:	3008      	addeq	r0, #8
 80063a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80063a6:	bf04      	itt	eq
 80063a8:	011b      	lsleq	r3, r3, #4
 80063aa:	3004      	addeq	r0, #4
 80063ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80063b0:	bf04      	itt	eq
 80063b2:	009b      	lsleq	r3, r3, #2
 80063b4:	3002      	addeq	r0, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	db05      	blt.n	80063c6 <__hi0bits+0x3a>
 80063ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80063be:	f100 0001 	add.w	r0, r0, #1
 80063c2:	bf08      	it	eq
 80063c4:	2020      	moveq	r0, #32
 80063c6:	4770      	bx	lr
 80063c8:	2000      	movs	r0, #0
 80063ca:	e7e5      	b.n	8006398 <__hi0bits+0xc>

080063cc <__lo0bits>:
 80063cc:	6803      	ldr	r3, [r0, #0]
 80063ce:	4602      	mov	r2, r0
 80063d0:	f013 0007 	ands.w	r0, r3, #7
 80063d4:	d00b      	beq.n	80063ee <__lo0bits+0x22>
 80063d6:	07d9      	lsls	r1, r3, #31
 80063d8:	d421      	bmi.n	800641e <__lo0bits+0x52>
 80063da:	0798      	lsls	r0, r3, #30
 80063dc:	bf49      	itett	mi
 80063de:	085b      	lsrmi	r3, r3, #1
 80063e0:	089b      	lsrpl	r3, r3, #2
 80063e2:	2001      	movmi	r0, #1
 80063e4:	6013      	strmi	r3, [r2, #0]
 80063e6:	bf5c      	itt	pl
 80063e8:	2002      	movpl	r0, #2
 80063ea:	6013      	strpl	r3, [r2, #0]
 80063ec:	4770      	bx	lr
 80063ee:	b299      	uxth	r1, r3
 80063f0:	b909      	cbnz	r1, 80063f6 <__lo0bits+0x2a>
 80063f2:	2010      	movs	r0, #16
 80063f4:	0c1b      	lsrs	r3, r3, #16
 80063f6:	b2d9      	uxtb	r1, r3
 80063f8:	b909      	cbnz	r1, 80063fe <__lo0bits+0x32>
 80063fa:	3008      	adds	r0, #8
 80063fc:	0a1b      	lsrs	r3, r3, #8
 80063fe:	0719      	lsls	r1, r3, #28
 8006400:	bf04      	itt	eq
 8006402:	091b      	lsreq	r3, r3, #4
 8006404:	3004      	addeq	r0, #4
 8006406:	0799      	lsls	r1, r3, #30
 8006408:	bf04      	itt	eq
 800640a:	089b      	lsreq	r3, r3, #2
 800640c:	3002      	addeq	r0, #2
 800640e:	07d9      	lsls	r1, r3, #31
 8006410:	d403      	bmi.n	800641a <__lo0bits+0x4e>
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	f100 0001 	add.w	r0, r0, #1
 8006418:	d003      	beq.n	8006422 <__lo0bits+0x56>
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	4770      	bx	lr
 800641e:	2000      	movs	r0, #0
 8006420:	4770      	bx	lr
 8006422:	2020      	movs	r0, #32
 8006424:	4770      	bx	lr
	...

08006428 <__i2b>:
 8006428:	b510      	push	{r4, lr}
 800642a:	460c      	mov	r4, r1
 800642c:	2101      	movs	r1, #1
 800642e:	f7ff ff05 	bl	800623c <_Balloc>
 8006432:	4602      	mov	r2, r0
 8006434:	b928      	cbnz	r0, 8006442 <__i2b+0x1a>
 8006436:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800643a:	4b04      	ldr	r3, [pc, #16]	; (800644c <__i2b+0x24>)
 800643c:	4804      	ldr	r0, [pc, #16]	; (8006450 <__i2b+0x28>)
 800643e:	f7fe ff2f 	bl	80052a0 <__assert_func>
 8006442:	2301      	movs	r3, #1
 8006444:	6144      	str	r4, [r0, #20]
 8006446:	6103      	str	r3, [r0, #16]
 8006448:	bd10      	pop	{r4, pc}
 800644a:	bf00      	nop
 800644c:	080079c8 	.word	0x080079c8
 8006450:	08007a3c 	.word	0x08007a3c

08006454 <__multiply>:
 8006454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006458:	4691      	mov	r9, r2
 800645a:	690a      	ldr	r2, [r1, #16]
 800645c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006460:	460c      	mov	r4, r1
 8006462:	429a      	cmp	r2, r3
 8006464:	bfbe      	ittt	lt
 8006466:	460b      	movlt	r3, r1
 8006468:	464c      	movlt	r4, r9
 800646a:	4699      	movlt	r9, r3
 800646c:	6927      	ldr	r7, [r4, #16]
 800646e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006472:	68a3      	ldr	r3, [r4, #8]
 8006474:	6861      	ldr	r1, [r4, #4]
 8006476:	eb07 060a 	add.w	r6, r7, sl
 800647a:	42b3      	cmp	r3, r6
 800647c:	b085      	sub	sp, #20
 800647e:	bfb8      	it	lt
 8006480:	3101      	addlt	r1, #1
 8006482:	f7ff fedb 	bl	800623c <_Balloc>
 8006486:	b930      	cbnz	r0, 8006496 <__multiply+0x42>
 8006488:	4602      	mov	r2, r0
 800648a:	f240 115d 	movw	r1, #349	; 0x15d
 800648e:	4b43      	ldr	r3, [pc, #268]	; (800659c <__multiply+0x148>)
 8006490:	4843      	ldr	r0, [pc, #268]	; (80065a0 <__multiply+0x14c>)
 8006492:	f7fe ff05 	bl	80052a0 <__assert_func>
 8006496:	f100 0514 	add.w	r5, r0, #20
 800649a:	462b      	mov	r3, r5
 800649c:	2200      	movs	r2, #0
 800649e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064a2:	4543      	cmp	r3, r8
 80064a4:	d321      	bcc.n	80064ea <__multiply+0x96>
 80064a6:	f104 0314 	add.w	r3, r4, #20
 80064aa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80064ae:	f109 0314 	add.w	r3, r9, #20
 80064b2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80064b6:	9202      	str	r2, [sp, #8]
 80064b8:	1b3a      	subs	r2, r7, r4
 80064ba:	3a15      	subs	r2, #21
 80064bc:	f022 0203 	bic.w	r2, r2, #3
 80064c0:	3204      	adds	r2, #4
 80064c2:	f104 0115 	add.w	r1, r4, #21
 80064c6:	428f      	cmp	r7, r1
 80064c8:	bf38      	it	cc
 80064ca:	2204      	movcc	r2, #4
 80064cc:	9201      	str	r2, [sp, #4]
 80064ce:	9a02      	ldr	r2, [sp, #8]
 80064d0:	9303      	str	r3, [sp, #12]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d80c      	bhi.n	80064f0 <__multiply+0x9c>
 80064d6:	2e00      	cmp	r6, #0
 80064d8:	dd03      	ble.n	80064e2 <__multiply+0x8e>
 80064da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d059      	beq.n	8006596 <__multiply+0x142>
 80064e2:	6106      	str	r6, [r0, #16]
 80064e4:	b005      	add	sp, #20
 80064e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ea:	f843 2b04 	str.w	r2, [r3], #4
 80064ee:	e7d8      	b.n	80064a2 <__multiply+0x4e>
 80064f0:	f8b3 a000 	ldrh.w	sl, [r3]
 80064f4:	f1ba 0f00 	cmp.w	sl, #0
 80064f8:	d023      	beq.n	8006542 <__multiply+0xee>
 80064fa:	46a9      	mov	r9, r5
 80064fc:	f04f 0c00 	mov.w	ip, #0
 8006500:	f104 0e14 	add.w	lr, r4, #20
 8006504:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006508:	f8d9 1000 	ldr.w	r1, [r9]
 800650c:	fa1f fb82 	uxth.w	fp, r2
 8006510:	b289      	uxth	r1, r1
 8006512:	fb0a 110b 	mla	r1, sl, fp, r1
 8006516:	4461      	add	r1, ip
 8006518:	f8d9 c000 	ldr.w	ip, [r9]
 800651c:	0c12      	lsrs	r2, r2, #16
 800651e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006522:	fb0a c202 	mla	r2, sl, r2, ip
 8006526:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800652a:	b289      	uxth	r1, r1
 800652c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006530:	4577      	cmp	r7, lr
 8006532:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006536:	f849 1b04 	str.w	r1, [r9], #4
 800653a:	d8e3      	bhi.n	8006504 <__multiply+0xb0>
 800653c:	9a01      	ldr	r2, [sp, #4]
 800653e:	f845 c002 	str.w	ip, [r5, r2]
 8006542:	9a03      	ldr	r2, [sp, #12]
 8006544:	3304      	adds	r3, #4
 8006546:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800654a:	f1b9 0f00 	cmp.w	r9, #0
 800654e:	d020      	beq.n	8006592 <__multiply+0x13e>
 8006550:	46ae      	mov	lr, r5
 8006552:	f04f 0a00 	mov.w	sl, #0
 8006556:	6829      	ldr	r1, [r5, #0]
 8006558:	f104 0c14 	add.w	ip, r4, #20
 800655c:	f8bc b000 	ldrh.w	fp, [ip]
 8006560:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006564:	b289      	uxth	r1, r1
 8006566:	fb09 220b 	mla	r2, r9, fp, r2
 800656a:	4492      	add	sl, r2
 800656c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006570:	f84e 1b04 	str.w	r1, [lr], #4
 8006574:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006578:	f8be 1000 	ldrh.w	r1, [lr]
 800657c:	0c12      	lsrs	r2, r2, #16
 800657e:	fb09 1102 	mla	r1, r9, r2, r1
 8006582:	4567      	cmp	r7, ip
 8006584:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006588:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800658c:	d8e6      	bhi.n	800655c <__multiply+0x108>
 800658e:	9a01      	ldr	r2, [sp, #4]
 8006590:	50a9      	str	r1, [r5, r2]
 8006592:	3504      	adds	r5, #4
 8006594:	e79b      	b.n	80064ce <__multiply+0x7a>
 8006596:	3e01      	subs	r6, #1
 8006598:	e79d      	b.n	80064d6 <__multiply+0x82>
 800659a:	bf00      	nop
 800659c:	080079c8 	.word	0x080079c8
 80065a0:	08007a3c 	.word	0x08007a3c

080065a4 <__pow5mult>:
 80065a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065a8:	4615      	mov	r5, r2
 80065aa:	f012 0203 	ands.w	r2, r2, #3
 80065ae:	4606      	mov	r6, r0
 80065b0:	460f      	mov	r7, r1
 80065b2:	d007      	beq.n	80065c4 <__pow5mult+0x20>
 80065b4:	4c25      	ldr	r4, [pc, #148]	; (800664c <__pow5mult+0xa8>)
 80065b6:	3a01      	subs	r2, #1
 80065b8:	2300      	movs	r3, #0
 80065ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065be:	f7ff fe9f 	bl	8006300 <__multadd>
 80065c2:	4607      	mov	r7, r0
 80065c4:	10ad      	asrs	r5, r5, #2
 80065c6:	d03d      	beq.n	8006644 <__pow5mult+0xa0>
 80065c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80065ca:	b97c      	cbnz	r4, 80065ec <__pow5mult+0x48>
 80065cc:	2010      	movs	r0, #16
 80065ce:	f7ff fe11 	bl	80061f4 <malloc>
 80065d2:	4602      	mov	r2, r0
 80065d4:	6270      	str	r0, [r6, #36]	; 0x24
 80065d6:	b928      	cbnz	r0, 80065e4 <__pow5mult+0x40>
 80065d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80065dc:	4b1c      	ldr	r3, [pc, #112]	; (8006650 <__pow5mult+0xac>)
 80065de:	481d      	ldr	r0, [pc, #116]	; (8006654 <__pow5mult+0xb0>)
 80065e0:	f7fe fe5e 	bl	80052a0 <__assert_func>
 80065e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065e8:	6004      	str	r4, [r0, #0]
 80065ea:	60c4      	str	r4, [r0, #12]
 80065ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80065f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065f4:	b94c      	cbnz	r4, 800660a <__pow5mult+0x66>
 80065f6:	f240 2171 	movw	r1, #625	; 0x271
 80065fa:	4630      	mov	r0, r6
 80065fc:	f7ff ff14 	bl	8006428 <__i2b>
 8006600:	2300      	movs	r3, #0
 8006602:	4604      	mov	r4, r0
 8006604:	f8c8 0008 	str.w	r0, [r8, #8]
 8006608:	6003      	str	r3, [r0, #0]
 800660a:	f04f 0900 	mov.w	r9, #0
 800660e:	07eb      	lsls	r3, r5, #31
 8006610:	d50a      	bpl.n	8006628 <__pow5mult+0x84>
 8006612:	4639      	mov	r1, r7
 8006614:	4622      	mov	r2, r4
 8006616:	4630      	mov	r0, r6
 8006618:	f7ff ff1c 	bl	8006454 <__multiply>
 800661c:	4680      	mov	r8, r0
 800661e:	4639      	mov	r1, r7
 8006620:	4630      	mov	r0, r6
 8006622:	f7ff fe4b 	bl	80062bc <_Bfree>
 8006626:	4647      	mov	r7, r8
 8006628:	106d      	asrs	r5, r5, #1
 800662a:	d00b      	beq.n	8006644 <__pow5mult+0xa0>
 800662c:	6820      	ldr	r0, [r4, #0]
 800662e:	b938      	cbnz	r0, 8006640 <__pow5mult+0x9c>
 8006630:	4622      	mov	r2, r4
 8006632:	4621      	mov	r1, r4
 8006634:	4630      	mov	r0, r6
 8006636:	f7ff ff0d 	bl	8006454 <__multiply>
 800663a:	6020      	str	r0, [r4, #0]
 800663c:	f8c0 9000 	str.w	r9, [r0]
 8006640:	4604      	mov	r4, r0
 8006642:	e7e4      	b.n	800660e <__pow5mult+0x6a>
 8006644:	4638      	mov	r0, r7
 8006646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800664a:	bf00      	nop
 800664c:	08007b88 	.word	0x08007b88
 8006650:	080078b0 	.word	0x080078b0
 8006654:	08007a3c 	.word	0x08007a3c

08006658 <__lshift>:
 8006658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800665c:	460c      	mov	r4, r1
 800665e:	4607      	mov	r7, r0
 8006660:	4691      	mov	r9, r2
 8006662:	6923      	ldr	r3, [r4, #16]
 8006664:	6849      	ldr	r1, [r1, #4]
 8006666:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800666a:	68a3      	ldr	r3, [r4, #8]
 800666c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006670:	f108 0601 	add.w	r6, r8, #1
 8006674:	42b3      	cmp	r3, r6
 8006676:	db0b      	blt.n	8006690 <__lshift+0x38>
 8006678:	4638      	mov	r0, r7
 800667a:	f7ff fddf 	bl	800623c <_Balloc>
 800667e:	4605      	mov	r5, r0
 8006680:	b948      	cbnz	r0, 8006696 <__lshift+0x3e>
 8006682:	4602      	mov	r2, r0
 8006684:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006688:	4b29      	ldr	r3, [pc, #164]	; (8006730 <__lshift+0xd8>)
 800668a:	482a      	ldr	r0, [pc, #168]	; (8006734 <__lshift+0xdc>)
 800668c:	f7fe fe08 	bl	80052a0 <__assert_func>
 8006690:	3101      	adds	r1, #1
 8006692:	005b      	lsls	r3, r3, #1
 8006694:	e7ee      	b.n	8006674 <__lshift+0x1c>
 8006696:	2300      	movs	r3, #0
 8006698:	f100 0114 	add.w	r1, r0, #20
 800669c:	f100 0210 	add.w	r2, r0, #16
 80066a0:	4618      	mov	r0, r3
 80066a2:	4553      	cmp	r3, sl
 80066a4:	db37      	blt.n	8006716 <__lshift+0xbe>
 80066a6:	6920      	ldr	r0, [r4, #16]
 80066a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066ac:	f104 0314 	add.w	r3, r4, #20
 80066b0:	f019 091f 	ands.w	r9, r9, #31
 80066b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80066bc:	d02f      	beq.n	800671e <__lshift+0xc6>
 80066be:	468a      	mov	sl, r1
 80066c0:	f04f 0c00 	mov.w	ip, #0
 80066c4:	f1c9 0e20 	rsb	lr, r9, #32
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	fa02 f209 	lsl.w	r2, r2, r9
 80066ce:	ea42 020c 	orr.w	r2, r2, ip
 80066d2:	f84a 2b04 	str.w	r2, [sl], #4
 80066d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066da:	4298      	cmp	r0, r3
 80066dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80066e0:	d8f2      	bhi.n	80066c8 <__lshift+0x70>
 80066e2:	1b03      	subs	r3, r0, r4
 80066e4:	3b15      	subs	r3, #21
 80066e6:	f023 0303 	bic.w	r3, r3, #3
 80066ea:	3304      	adds	r3, #4
 80066ec:	f104 0215 	add.w	r2, r4, #21
 80066f0:	4290      	cmp	r0, r2
 80066f2:	bf38      	it	cc
 80066f4:	2304      	movcc	r3, #4
 80066f6:	f841 c003 	str.w	ip, [r1, r3]
 80066fa:	f1bc 0f00 	cmp.w	ip, #0
 80066fe:	d001      	beq.n	8006704 <__lshift+0xac>
 8006700:	f108 0602 	add.w	r6, r8, #2
 8006704:	3e01      	subs	r6, #1
 8006706:	4638      	mov	r0, r7
 8006708:	4621      	mov	r1, r4
 800670a:	612e      	str	r6, [r5, #16]
 800670c:	f7ff fdd6 	bl	80062bc <_Bfree>
 8006710:	4628      	mov	r0, r5
 8006712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006716:	f842 0f04 	str.w	r0, [r2, #4]!
 800671a:	3301      	adds	r3, #1
 800671c:	e7c1      	b.n	80066a2 <__lshift+0x4a>
 800671e:	3904      	subs	r1, #4
 8006720:	f853 2b04 	ldr.w	r2, [r3], #4
 8006724:	4298      	cmp	r0, r3
 8006726:	f841 2f04 	str.w	r2, [r1, #4]!
 800672a:	d8f9      	bhi.n	8006720 <__lshift+0xc8>
 800672c:	e7ea      	b.n	8006704 <__lshift+0xac>
 800672e:	bf00      	nop
 8006730:	080079c8 	.word	0x080079c8
 8006734:	08007a3c 	.word	0x08007a3c

08006738 <__mcmp>:
 8006738:	4603      	mov	r3, r0
 800673a:	690a      	ldr	r2, [r1, #16]
 800673c:	6900      	ldr	r0, [r0, #16]
 800673e:	b530      	push	{r4, r5, lr}
 8006740:	1a80      	subs	r0, r0, r2
 8006742:	d10d      	bne.n	8006760 <__mcmp+0x28>
 8006744:	3314      	adds	r3, #20
 8006746:	3114      	adds	r1, #20
 8006748:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800674c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006750:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006754:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006758:	4295      	cmp	r5, r2
 800675a:	d002      	beq.n	8006762 <__mcmp+0x2a>
 800675c:	d304      	bcc.n	8006768 <__mcmp+0x30>
 800675e:	2001      	movs	r0, #1
 8006760:	bd30      	pop	{r4, r5, pc}
 8006762:	42a3      	cmp	r3, r4
 8006764:	d3f4      	bcc.n	8006750 <__mcmp+0x18>
 8006766:	e7fb      	b.n	8006760 <__mcmp+0x28>
 8006768:	f04f 30ff 	mov.w	r0, #4294967295
 800676c:	e7f8      	b.n	8006760 <__mcmp+0x28>
	...

08006770 <__mdiff>:
 8006770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	460d      	mov	r5, r1
 8006776:	4607      	mov	r7, r0
 8006778:	4611      	mov	r1, r2
 800677a:	4628      	mov	r0, r5
 800677c:	4614      	mov	r4, r2
 800677e:	f7ff ffdb 	bl	8006738 <__mcmp>
 8006782:	1e06      	subs	r6, r0, #0
 8006784:	d111      	bne.n	80067aa <__mdiff+0x3a>
 8006786:	4631      	mov	r1, r6
 8006788:	4638      	mov	r0, r7
 800678a:	f7ff fd57 	bl	800623c <_Balloc>
 800678e:	4602      	mov	r2, r0
 8006790:	b928      	cbnz	r0, 800679e <__mdiff+0x2e>
 8006792:	f240 2132 	movw	r1, #562	; 0x232
 8006796:	4b3a      	ldr	r3, [pc, #232]	; (8006880 <__mdiff+0x110>)
 8006798:	483a      	ldr	r0, [pc, #232]	; (8006884 <__mdiff+0x114>)
 800679a:	f7fe fd81 	bl	80052a0 <__assert_func>
 800679e:	2301      	movs	r3, #1
 80067a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80067a4:	4610      	mov	r0, r2
 80067a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067aa:	bfa4      	itt	ge
 80067ac:	4623      	movge	r3, r4
 80067ae:	462c      	movge	r4, r5
 80067b0:	4638      	mov	r0, r7
 80067b2:	6861      	ldr	r1, [r4, #4]
 80067b4:	bfa6      	itte	ge
 80067b6:	461d      	movge	r5, r3
 80067b8:	2600      	movge	r6, #0
 80067ba:	2601      	movlt	r6, #1
 80067bc:	f7ff fd3e 	bl	800623c <_Balloc>
 80067c0:	4602      	mov	r2, r0
 80067c2:	b918      	cbnz	r0, 80067cc <__mdiff+0x5c>
 80067c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80067c8:	4b2d      	ldr	r3, [pc, #180]	; (8006880 <__mdiff+0x110>)
 80067ca:	e7e5      	b.n	8006798 <__mdiff+0x28>
 80067cc:	f102 0814 	add.w	r8, r2, #20
 80067d0:	46c2      	mov	sl, r8
 80067d2:	f04f 0c00 	mov.w	ip, #0
 80067d6:	6927      	ldr	r7, [r4, #16]
 80067d8:	60c6      	str	r6, [r0, #12]
 80067da:	692e      	ldr	r6, [r5, #16]
 80067dc:	f104 0014 	add.w	r0, r4, #20
 80067e0:	f105 0914 	add.w	r9, r5, #20
 80067e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80067e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80067ec:	3410      	adds	r4, #16
 80067ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80067f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80067f6:	fa1f f18b 	uxth.w	r1, fp
 80067fa:	448c      	add	ip, r1
 80067fc:	b299      	uxth	r1, r3
 80067fe:	0c1b      	lsrs	r3, r3, #16
 8006800:	ebac 0101 	sub.w	r1, ip, r1
 8006804:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006808:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800680c:	b289      	uxth	r1, r1
 800680e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006812:	454e      	cmp	r6, r9
 8006814:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006818:	f84a 3b04 	str.w	r3, [sl], #4
 800681c:	d8e7      	bhi.n	80067ee <__mdiff+0x7e>
 800681e:	1b73      	subs	r3, r6, r5
 8006820:	3b15      	subs	r3, #21
 8006822:	f023 0303 	bic.w	r3, r3, #3
 8006826:	3515      	adds	r5, #21
 8006828:	3304      	adds	r3, #4
 800682a:	42ae      	cmp	r6, r5
 800682c:	bf38      	it	cc
 800682e:	2304      	movcc	r3, #4
 8006830:	4418      	add	r0, r3
 8006832:	4443      	add	r3, r8
 8006834:	461e      	mov	r6, r3
 8006836:	4605      	mov	r5, r0
 8006838:	4575      	cmp	r5, lr
 800683a:	d30e      	bcc.n	800685a <__mdiff+0xea>
 800683c:	f10e 0103 	add.w	r1, lr, #3
 8006840:	1a09      	subs	r1, r1, r0
 8006842:	f021 0103 	bic.w	r1, r1, #3
 8006846:	3803      	subs	r0, #3
 8006848:	4586      	cmp	lr, r0
 800684a:	bf38      	it	cc
 800684c:	2100      	movcc	r1, #0
 800684e:	4419      	add	r1, r3
 8006850:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006854:	b18b      	cbz	r3, 800687a <__mdiff+0x10a>
 8006856:	6117      	str	r7, [r2, #16]
 8006858:	e7a4      	b.n	80067a4 <__mdiff+0x34>
 800685a:	f855 8b04 	ldr.w	r8, [r5], #4
 800685e:	fa1f f188 	uxth.w	r1, r8
 8006862:	4461      	add	r1, ip
 8006864:	140c      	asrs	r4, r1, #16
 8006866:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800686a:	b289      	uxth	r1, r1
 800686c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006870:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006874:	f846 1b04 	str.w	r1, [r6], #4
 8006878:	e7de      	b.n	8006838 <__mdiff+0xc8>
 800687a:	3f01      	subs	r7, #1
 800687c:	e7e8      	b.n	8006850 <__mdiff+0xe0>
 800687e:	bf00      	nop
 8006880:	080079c8 	.word	0x080079c8
 8006884:	08007a3c 	.word	0x08007a3c

08006888 <__d2b>:
 8006888:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800688c:	2101      	movs	r1, #1
 800688e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006892:	4690      	mov	r8, r2
 8006894:	461d      	mov	r5, r3
 8006896:	f7ff fcd1 	bl	800623c <_Balloc>
 800689a:	4604      	mov	r4, r0
 800689c:	b930      	cbnz	r0, 80068ac <__d2b+0x24>
 800689e:	4602      	mov	r2, r0
 80068a0:	f240 310a 	movw	r1, #778	; 0x30a
 80068a4:	4b24      	ldr	r3, [pc, #144]	; (8006938 <__d2b+0xb0>)
 80068a6:	4825      	ldr	r0, [pc, #148]	; (800693c <__d2b+0xb4>)
 80068a8:	f7fe fcfa 	bl	80052a0 <__assert_func>
 80068ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80068b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80068b4:	bb2d      	cbnz	r5, 8006902 <__d2b+0x7a>
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	f1b8 0300 	subs.w	r3, r8, #0
 80068bc:	d026      	beq.n	800690c <__d2b+0x84>
 80068be:	4668      	mov	r0, sp
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	f7ff fd83 	bl	80063cc <__lo0bits>
 80068c6:	9900      	ldr	r1, [sp, #0]
 80068c8:	b1f0      	cbz	r0, 8006908 <__d2b+0x80>
 80068ca:	9a01      	ldr	r2, [sp, #4]
 80068cc:	f1c0 0320 	rsb	r3, r0, #32
 80068d0:	fa02 f303 	lsl.w	r3, r2, r3
 80068d4:	430b      	orrs	r3, r1
 80068d6:	40c2      	lsrs	r2, r0
 80068d8:	6163      	str	r3, [r4, #20]
 80068da:	9201      	str	r2, [sp, #4]
 80068dc:	9b01      	ldr	r3, [sp, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	bf14      	ite	ne
 80068e2:	2102      	movne	r1, #2
 80068e4:	2101      	moveq	r1, #1
 80068e6:	61a3      	str	r3, [r4, #24]
 80068e8:	6121      	str	r1, [r4, #16]
 80068ea:	b1c5      	cbz	r5, 800691e <__d2b+0x96>
 80068ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80068f0:	4405      	add	r5, r0
 80068f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068f6:	603d      	str	r5, [r7, #0]
 80068f8:	6030      	str	r0, [r6, #0]
 80068fa:	4620      	mov	r0, r4
 80068fc:	b002      	add	sp, #8
 80068fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006906:	e7d6      	b.n	80068b6 <__d2b+0x2e>
 8006908:	6161      	str	r1, [r4, #20]
 800690a:	e7e7      	b.n	80068dc <__d2b+0x54>
 800690c:	a801      	add	r0, sp, #4
 800690e:	f7ff fd5d 	bl	80063cc <__lo0bits>
 8006912:	2101      	movs	r1, #1
 8006914:	9b01      	ldr	r3, [sp, #4]
 8006916:	6121      	str	r1, [r4, #16]
 8006918:	6163      	str	r3, [r4, #20]
 800691a:	3020      	adds	r0, #32
 800691c:	e7e5      	b.n	80068ea <__d2b+0x62>
 800691e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006922:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006926:	6038      	str	r0, [r7, #0]
 8006928:	6918      	ldr	r0, [r3, #16]
 800692a:	f7ff fd2f 	bl	800638c <__hi0bits>
 800692e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006932:	6031      	str	r1, [r6, #0]
 8006934:	e7e1      	b.n	80068fa <__d2b+0x72>
 8006936:	bf00      	nop
 8006938:	080079c8 	.word	0x080079c8
 800693c:	08007a3c 	.word	0x08007a3c

08006940 <_calloc_r>:
 8006940:	b570      	push	{r4, r5, r6, lr}
 8006942:	fba1 5402 	umull	r5, r4, r1, r2
 8006946:	b934      	cbnz	r4, 8006956 <_calloc_r+0x16>
 8006948:	4629      	mov	r1, r5
 800694a:	f000 f875 	bl	8006a38 <_malloc_r>
 800694e:	4606      	mov	r6, r0
 8006950:	b928      	cbnz	r0, 800695e <_calloc_r+0x1e>
 8006952:	4630      	mov	r0, r6
 8006954:	bd70      	pop	{r4, r5, r6, pc}
 8006956:	220c      	movs	r2, #12
 8006958:	2600      	movs	r6, #0
 800695a:	6002      	str	r2, [r0, #0]
 800695c:	e7f9      	b.n	8006952 <_calloc_r+0x12>
 800695e:	462a      	mov	r2, r5
 8006960:	4621      	mov	r1, r4
 8006962:	f7fd ff8d 	bl	8004880 <memset>
 8006966:	e7f4      	b.n	8006952 <_calloc_r+0x12>

08006968 <_free_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4605      	mov	r5, r0
 800696c:	2900      	cmp	r1, #0
 800696e:	d040      	beq.n	80069f2 <_free_r+0x8a>
 8006970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006974:	1f0c      	subs	r4, r1, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	bfb8      	it	lt
 800697a:	18e4      	addlt	r4, r4, r3
 800697c:	f000 fe24 	bl	80075c8 <__malloc_lock>
 8006980:	4a1c      	ldr	r2, [pc, #112]	; (80069f4 <_free_r+0x8c>)
 8006982:	6813      	ldr	r3, [r2, #0]
 8006984:	b933      	cbnz	r3, 8006994 <_free_r+0x2c>
 8006986:	6063      	str	r3, [r4, #4]
 8006988:	6014      	str	r4, [r2, #0]
 800698a:	4628      	mov	r0, r5
 800698c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006990:	f000 be20 	b.w	80075d4 <__malloc_unlock>
 8006994:	42a3      	cmp	r3, r4
 8006996:	d908      	bls.n	80069aa <_free_r+0x42>
 8006998:	6820      	ldr	r0, [r4, #0]
 800699a:	1821      	adds	r1, r4, r0
 800699c:	428b      	cmp	r3, r1
 800699e:	bf01      	itttt	eq
 80069a0:	6819      	ldreq	r1, [r3, #0]
 80069a2:	685b      	ldreq	r3, [r3, #4]
 80069a4:	1809      	addeq	r1, r1, r0
 80069a6:	6021      	streq	r1, [r4, #0]
 80069a8:	e7ed      	b.n	8006986 <_free_r+0x1e>
 80069aa:	461a      	mov	r2, r3
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	b10b      	cbz	r3, 80069b4 <_free_r+0x4c>
 80069b0:	42a3      	cmp	r3, r4
 80069b2:	d9fa      	bls.n	80069aa <_free_r+0x42>
 80069b4:	6811      	ldr	r1, [r2, #0]
 80069b6:	1850      	adds	r0, r2, r1
 80069b8:	42a0      	cmp	r0, r4
 80069ba:	d10b      	bne.n	80069d4 <_free_r+0x6c>
 80069bc:	6820      	ldr	r0, [r4, #0]
 80069be:	4401      	add	r1, r0
 80069c0:	1850      	adds	r0, r2, r1
 80069c2:	4283      	cmp	r3, r0
 80069c4:	6011      	str	r1, [r2, #0]
 80069c6:	d1e0      	bne.n	800698a <_free_r+0x22>
 80069c8:	6818      	ldr	r0, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	4401      	add	r1, r0
 80069ce:	6011      	str	r1, [r2, #0]
 80069d0:	6053      	str	r3, [r2, #4]
 80069d2:	e7da      	b.n	800698a <_free_r+0x22>
 80069d4:	d902      	bls.n	80069dc <_free_r+0x74>
 80069d6:	230c      	movs	r3, #12
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	e7d6      	b.n	800698a <_free_r+0x22>
 80069dc:	6820      	ldr	r0, [r4, #0]
 80069de:	1821      	adds	r1, r4, r0
 80069e0:	428b      	cmp	r3, r1
 80069e2:	bf01      	itttt	eq
 80069e4:	6819      	ldreq	r1, [r3, #0]
 80069e6:	685b      	ldreq	r3, [r3, #4]
 80069e8:	1809      	addeq	r1, r1, r0
 80069ea:	6021      	streq	r1, [r4, #0]
 80069ec:	6063      	str	r3, [r4, #4]
 80069ee:	6054      	str	r4, [r2, #4]
 80069f0:	e7cb      	b.n	800698a <_free_r+0x22>
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	200004d0 	.word	0x200004d0

080069f8 <sbrk_aligned>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	4e0e      	ldr	r6, [pc, #56]	; (8006a34 <sbrk_aligned+0x3c>)
 80069fc:	460c      	mov	r4, r1
 80069fe:	6831      	ldr	r1, [r6, #0]
 8006a00:	4605      	mov	r5, r0
 8006a02:	b911      	cbnz	r1, 8006a0a <sbrk_aligned+0x12>
 8006a04:	f000 fb40 	bl	8007088 <_sbrk_r>
 8006a08:	6030      	str	r0, [r6, #0]
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f000 fb3b 	bl	8007088 <_sbrk_r>
 8006a12:	1c43      	adds	r3, r0, #1
 8006a14:	d00a      	beq.n	8006a2c <sbrk_aligned+0x34>
 8006a16:	1cc4      	adds	r4, r0, #3
 8006a18:	f024 0403 	bic.w	r4, r4, #3
 8006a1c:	42a0      	cmp	r0, r4
 8006a1e:	d007      	beq.n	8006a30 <sbrk_aligned+0x38>
 8006a20:	1a21      	subs	r1, r4, r0
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 fb30 	bl	8007088 <_sbrk_r>
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d101      	bne.n	8006a30 <sbrk_aligned+0x38>
 8006a2c:	f04f 34ff 	mov.w	r4, #4294967295
 8006a30:	4620      	mov	r0, r4
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
 8006a34:	200004d4 	.word	0x200004d4

08006a38 <_malloc_r>:
 8006a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3c:	1ccd      	adds	r5, r1, #3
 8006a3e:	f025 0503 	bic.w	r5, r5, #3
 8006a42:	3508      	adds	r5, #8
 8006a44:	2d0c      	cmp	r5, #12
 8006a46:	bf38      	it	cc
 8006a48:	250c      	movcc	r5, #12
 8006a4a:	2d00      	cmp	r5, #0
 8006a4c:	4607      	mov	r7, r0
 8006a4e:	db01      	blt.n	8006a54 <_malloc_r+0x1c>
 8006a50:	42a9      	cmp	r1, r5
 8006a52:	d905      	bls.n	8006a60 <_malloc_r+0x28>
 8006a54:	230c      	movs	r3, #12
 8006a56:	2600      	movs	r6, #0
 8006a58:	603b      	str	r3, [r7, #0]
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a60:	4e2e      	ldr	r6, [pc, #184]	; (8006b1c <_malloc_r+0xe4>)
 8006a62:	f000 fdb1 	bl	80075c8 <__malloc_lock>
 8006a66:	6833      	ldr	r3, [r6, #0]
 8006a68:	461c      	mov	r4, r3
 8006a6a:	bb34      	cbnz	r4, 8006aba <_malloc_r+0x82>
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	4638      	mov	r0, r7
 8006a70:	f7ff ffc2 	bl	80069f8 <sbrk_aligned>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	4604      	mov	r4, r0
 8006a78:	d14d      	bne.n	8006b16 <_malloc_r+0xde>
 8006a7a:	6834      	ldr	r4, [r6, #0]
 8006a7c:	4626      	mov	r6, r4
 8006a7e:	2e00      	cmp	r6, #0
 8006a80:	d140      	bne.n	8006b04 <_malloc_r+0xcc>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	4631      	mov	r1, r6
 8006a86:	4638      	mov	r0, r7
 8006a88:	eb04 0803 	add.w	r8, r4, r3
 8006a8c:	f000 fafc 	bl	8007088 <_sbrk_r>
 8006a90:	4580      	cmp	r8, r0
 8006a92:	d13a      	bne.n	8006b0a <_malloc_r+0xd2>
 8006a94:	6821      	ldr	r1, [r4, #0]
 8006a96:	3503      	adds	r5, #3
 8006a98:	1a6d      	subs	r5, r5, r1
 8006a9a:	f025 0503 	bic.w	r5, r5, #3
 8006a9e:	3508      	adds	r5, #8
 8006aa0:	2d0c      	cmp	r5, #12
 8006aa2:	bf38      	it	cc
 8006aa4:	250c      	movcc	r5, #12
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	f7ff ffa5 	bl	80069f8 <sbrk_aligned>
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d02b      	beq.n	8006b0a <_malloc_r+0xd2>
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	442b      	add	r3, r5
 8006ab6:	6023      	str	r3, [r4, #0]
 8006ab8:	e00e      	b.n	8006ad8 <_malloc_r+0xa0>
 8006aba:	6822      	ldr	r2, [r4, #0]
 8006abc:	1b52      	subs	r2, r2, r5
 8006abe:	d41e      	bmi.n	8006afe <_malloc_r+0xc6>
 8006ac0:	2a0b      	cmp	r2, #11
 8006ac2:	d916      	bls.n	8006af2 <_malloc_r+0xba>
 8006ac4:	1961      	adds	r1, r4, r5
 8006ac6:	42a3      	cmp	r3, r4
 8006ac8:	6025      	str	r5, [r4, #0]
 8006aca:	bf18      	it	ne
 8006acc:	6059      	strne	r1, [r3, #4]
 8006ace:	6863      	ldr	r3, [r4, #4]
 8006ad0:	bf08      	it	eq
 8006ad2:	6031      	streq	r1, [r6, #0]
 8006ad4:	5162      	str	r2, [r4, r5]
 8006ad6:	604b      	str	r3, [r1, #4]
 8006ad8:	4638      	mov	r0, r7
 8006ada:	f104 060b 	add.w	r6, r4, #11
 8006ade:	f000 fd79 	bl	80075d4 <__malloc_unlock>
 8006ae2:	f026 0607 	bic.w	r6, r6, #7
 8006ae6:	1d23      	adds	r3, r4, #4
 8006ae8:	1af2      	subs	r2, r6, r3
 8006aea:	d0b6      	beq.n	8006a5a <_malloc_r+0x22>
 8006aec:	1b9b      	subs	r3, r3, r6
 8006aee:	50a3      	str	r3, [r4, r2]
 8006af0:	e7b3      	b.n	8006a5a <_malloc_r+0x22>
 8006af2:	6862      	ldr	r2, [r4, #4]
 8006af4:	42a3      	cmp	r3, r4
 8006af6:	bf0c      	ite	eq
 8006af8:	6032      	streq	r2, [r6, #0]
 8006afa:	605a      	strne	r2, [r3, #4]
 8006afc:	e7ec      	b.n	8006ad8 <_malloc_r+0xa0>
 8006afe:	4623      	mov	r3, r4
 8006b00:	6864      	ldr	r4, [r4, #4]
 8006b02:	e7b2      	b.n	8006a6a <_malloc_r+0x32>
 8006b04:	4634      	mov	r4, r6
 8006b06:	6876      	ldr	r6, [r6, #4]
 8006b08:	e7b9      	b.n	8006a7e <_malloc_r+0x46>
 8006b0a:	230c      	movs	r3, #12
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	f000 fd60 	bl	80075d4 <__malloc_unlock>
 8006b14:	e7a1      	b.n	8006a5a <_malloc_r+0x22>
 8006b16:	6025      	str	r5, [r4, #0]
 8006b18:	e7de      	b.n	8006ad8 <_malloc_r+0xa0>
 8006b1a:	bf00      	nop
 8006b1c:	200004d0 	.word	0x200004d0

08006b20 <__ssputs_r>:
 8006b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b24:	688e      	ldr	r6, [r1, #8]
 8006b26:	4682      	mov	sl, r0
 8006b28:	429e      	cmp	r6, r3
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	4690      	mov	r8, r2
 8006b2e:	461f      	mov	r7, r3
 8006b30:	d838      	bhi.n	8006ba4 <__ssputs_r+0x84>
 8006b32:	898a      	ldrh	r2, [r1, #12]
 8006b34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b38:	d032      	beq.n	8006ba0 <__ssputs_r+0x80>
 8006b3a:	6825      	ldr	r5, [r4, #0]
 8006b3c:	6909      	ldr	r1, [r1, #16]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	eba5 0901 	sub.w	r9, r5, r1
 8006b44:	6965      	ldr	r5, [r4, #20]
 8006b46:	444b      	add	r3, r9
 8006b48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b50:	106d      	asrs	r5, r5, #1
 8006b52:	429d      	cmp	r5, r3
 8006b54:	bf38      	it	cc
 8006b56:	461d      	movcc	r5, r3
 8006b58:	0553      	lsls	r3, r2, #21
 8006b5a:	d531      	bpl.n	8006bc0 <__ssputs_r+0xa0>
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	f7ff ff6b 	bl	8006a38 <_malloc_r>
 8006b62:	4606      	mov	r6, r0
 8006b64:	b950      	cbnz	r0, 8006b7c <__ssputs_r+0x5c>
 8006b66:	230c      	movs	r3, #12
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6c:	f8ca 3000 	str.w	r3, [sl]
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b76:	81a3      	strh	r3, [r4, #12]
 8006b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7c:	464a      	mov	r2, r9
 8006b7e:	6921      	ldr	r1, [r4, #16]
 8006b80:	f7ff fb4e 	bl	8006220 <memcpy>
 8006b84:	89a3      	ldrh	r3, [r4, #12]
 8006b86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8e:	81a3      	strh	r3, [r4, #12]
 8006b90:	6126      	str	r6, [r4, #16]
 8006b92:	444e      	add	r6, r9
 8006b94:	6026      	str	r6, [r4, #0]
 8006b96:	463e      	mov	r6, r7
 8006b98:	6165      	str	r5, [r4, #20]
 8006b9a:	eba5 0509 	sub.w	r5, r5, r9
 8006b9e:	60a5      	str	r5, [r4, #8]
 8006ba0:	42be      	cmp	r6, r7
 8006ba2:	d900      	bls.n	8006ba6 <__ssputs_r+0x86>
 8006ba4:	463e      	mov	r6, r7
 8006ba6:	4632      	mov	r2, r6
 8006ba8:	4641      	mov	r1, r8
 8006baa:	6820      	ldr	r0, [r4, #0]
 8006bac:	f000 fcf2 	bl	8007594 <memmove>
 8006bb0:	68a3      	ldr	r3, [r4, #8]
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	1b9b      	subs	r3, r3, r6
 8006bb6:	60a3      	str	r3, [r4, #8]
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	4433      	add	r3, r6
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	e7db      	b.n	8006b78 <__ssputs_r+0x58>
 8006bc0:	462a      	mov	r2, r5
 8006bc2:	f000 fd0d 	bl	80075e0 <_realloc_r>
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d1e1      	bne.n	8006b90 <__ssputs_r+0x70>
 8006bcc:	4650      	mov	r0, sl
 8006bce:	6921      	ldr	r1, [r4, #16]
 8006bd0:	f7ff feca 	bl	8006968 <_free_r>
 8006bd4:	e7c7      	b.n	8006b66 <__ssputs_r+0x46>
	...

08006bd8 <_svfiprintf_r>:
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	4698      	mov	r8, r3
 8006bde:	898b      	ldrh	r3, [r1, #12]
 8006be0:	4607      	mov	r7, r0
 8006be2:	061b      	lsls	r3, r3, #24
 8006be4:	460d      	mov	r5, r1
 8006be6:	4614      	mov	r4, r2
 8006be8:	b09d      	sub	sp, #116	; 0x74
 8006bea:	d50e      	bpl.n	8006c0a <_svfiprintf_r+0x32>
 8006bec:	690b      	ldr	r3, [r1, #16]
 8006bee:	b963      	cbnz	r3, 8006c0a <_svfiprintf_r+0x32>
 8006bf0:	2140      	movs	r1, #64	; 0x40
 8006bf2:	f7ff ff21 	bl	8006a38 <_malloc_r>
 8006bf6:	6028      	str	r0, [r5, #0]
 8006bf8:	6128      	str	r0, [r5, #16]
 8006bfa:	b920      	cbnz	r0, 8006c06 <_svfiprintf_r+0x2e>
 8006bfc:	230c      	movs	r3, #12
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	e0d1      	b.n	8006daa <_svfiprintf_r+0x1d2>
 8006c06:	2340      	movs	r3, #64	; 0x40
 8006c08:	616b      	str	r3, [r5, #20]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c0e:	2320      	movs	r3, #32
 8006c10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c14:	2330      	movs	r3, #48	; 0x30
 8006c16:	f04f 0901 	mov.w	r9, #1
 8006c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006dc4 <_svfiprintf_r+0x1ec>
 8006c22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c26:	4623      	mov	r3, r4
 8006c28:	469a      	mov	sl, r3
 8006c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c2e:	b10a      	cbz	r2, 8006c34 <_svfiprintf_r+0x5c>
 8006c30:	2a25      	cmp	r2, #37	; 0x25
 8006c32:	d1f9      	bne.n	8006c28 <_svfiprintf_r+0x50>
 8006c34:	ebba 0b04 	subs.w	fp, sl, r4
 8006c38:	d00b      	beq.n	8006c52 <_svfiprintf_r+0x7a>
 8006c3a:	465b      	mov	r3, fp
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4638      	mov	r0, r7
 8006c42:	f7ff ff6d 	bl	8006b20 <__ssputs_r>
 8006c46:	3001      	adds	r0, #1
 8006c48:	f000 80aa 	beq.w	8006da0 <_svfiprintf_r+0x1c8>
 8006c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c4e:	445a      	add	r2, fp
 8006c50:	9209      	str	r2, [sp, #36]	; 0x24
 8006c52:	f89a 3000 	ldrb.w	r3, [sl]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 80a2 	beq.w	8006da0 <_svfiprintf_r+0x1c8>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c66:	f10a 0a01 	add.w	sl, sl, #1
 8006c6a:	9304      	str	r3, [sp, #16]
 8006c6c:	9307      	str	r3, [sp, #28]
 8006c6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c72:	931a      	str	r3, [sp, #104]	; 0x68
 8006c74:	4654      	mov	r4, sl
 8006c76:	2205      	movs	r2, #5
 8006c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c7c:	4851      	ldr	r0, [pc, #324]	; (8006dc4 <_svfiprintf_r+0x1ec>)
 8006c7e:	f7ff fac1 	bl	8006204 <memchr>
 8006c82:	9a04      	ldr	r2, [sp, #16]
 8006c84:	b9d8      	cbnz	r0, 8006cbe <_svfiprintf_r+0xe6>
 8006c86:	06d0      	lsls	r0, r2, #27
 8006c88:	bf44      	itt	mi
 8006c8a:	2320      	movmi	r3, #32
 8006c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c90:	0711      	lsls	r1, r2, #28
 8006c92:	bf44      	itt	mi
 8006c94:	232b      	movmi	r3, #43	; 0x2b
 8006c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8006ca0:	d015      	beq.n	8006cce <_svfiprintf_r+0xf6>
 8006ca2:	4654      	mov	r4, sl
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	f04f 0c0a 	mov.w	ip, #10
 8006caa:	9a07      	ldr	r2, [sp, #28]
 8006cac:	4621      	mov	r1, r4
 8006cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cb2:	3b30      	subs	r3, #48	; 0x30
 8006cb4:	2b09      	cmp	r3, #9
 8006cb6:	d94e      	bls.n	8006d56 <_svfiprintf_r+0x17e>
 8006cb8:	b1b0      	cbz	r0, 8006ce8 <_svfiprintf_r+0x110>
 8006cba:	9207      	str	r2, [sp, #28]
 8006cbc:	e014      	b.n	8006ce8 <_svfiprintf_r+0x110>
 8006cbe:	eba0 0308 	sub.w	r3, r0, r8
 8006cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	46a2      	mov	sl, r4
 8006cca:	9304      	str	r3, [sp, #16]
 8006ccc:	e7d2      	b.n	8006c74 <_svfiprintf_r+0x9c>
 8006cce:	9b03      	ldr	r3, [sp, #12]
 8006cd0:	1d19      	adds	r1, r3, #4
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	9103      	str	r1, [sp, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	bfbb      	ittet	lt
 8006cda:	425b      	neglt	r3, r3
 8006cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8006ce0:	9307      	strge	r3, [sp, #28]
 8006ce2:	9307      	strlt	r3, [sp, #28]
 8006ce4:	bfb8      	it	lt
 8006ce6:	9204      	strlt	r2, [sp, #16]
 8006ce8:	7823      	ldrb	r3, [r4, #0]
 8006cea:	2b2e      	cmp	r3, #46	; 0x2e
 8006cec:	d10c      	bne.n	8006d08 <_svfiprintf_r+0x130>
 8006cee:	7863      	ldrb	r3, [r4, #1]
 8006cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf2:	d135      	bne.n	8006d60 <_svfiprintf_r+0x188>
 8006cf4:	9b03      	ldr	r3, [sp, #12]
 8006cf6:	3402      	adds	r4, #2
 8006cf8:	1d1a      	adds	r2, r3, #4
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	9203      	str	r2, [sp, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	bfb8      	it	lt
 8006d02:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d06:	9305      	str	r3, [sp, #20]
 8006d08:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006dc8 <_svfiprintf_r+0x1f0>
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	4650      	mov	r0, sl
 8006d10:	7821      	ldrb	r1, [r4, #0]
 8006d12:	f7ff fa77 	bl	8006204 <memchr>
 8006d16:	b140      	cbz	r0, 8006d2a <_svfiprintf_r+0x152>
 8006d18:	2340      	movs	r3, #64	; 0x40
 8006d1a:	eba0 000a 	sub.w	r0, r0, sl
 8006d1e:	fa03 f000 	lsl.w	r0, r3, r0
 8006d22:	9b04      	ldr	r3, [sp, #16]
 8006d24:	3401      	adds	r4, #1
 8006d26:	4303      	orrs	r3, r0
 8006d28:	9304      	str	r3, [sp, #16]
 8006d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d2e:	2206      	movs	r2, #6
 8006d30:	4826      	ldr	r0, [pc, #152]	; (8006dcc <_svfiprintf_r+0x1f4>)
 8006d32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d36:	f7ff fa65 	bl	8006204 <memchr>
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d038      	beq.n	8006db0 <_svfiprintf_r+0x1d8>
 8006d3e:	4b24      	ldr	r3, [pc, #144]	; (8006dd0 <_svfiprintf_r+0x1f8>)
 8006d40:	bb1b      	cbnz	r3, 8006d8a <_svfiprintf_r+0x1b2>
 8006d42:	9b03      	ldr	r3, [sp, #12]
 8006d44:	3307      	adds	r3, #7
 8006d46:	f023 0307 	bic.w	r3, r3, #7
 8006d4a:	3308      	adds	r3, #8
 8006d4c:	9303      	str	r3, [sp, #12]
 8006d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d50:	4433      	add	r3, r6
 8006d52:	9309      	str	r3, [sp, #36]	; 0x24
 8006d54:	e767      	b.n	8006c26 <_svfiprintf_r+0x4e>
 8006d56:	460c      	mov	r4, r1
 8006d58:	2001      	movs	r0, #1
 8006d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d5e:	e7a5      	b.n	8006cac <_svfiprintf_r+0xd4>
 8006d60:	2300      	movs	r3, #0
 8006d62:	f04f 0c0a 	mov.w	ip, #10
 8006d66:	4619      	mov	r1, r3
 8006d68:	3401      	adds	r4, #1
 8006d6a:	9305      	str	r3, [sp, #20]
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d72:	3a30      	subs	r2, #48	; 0x30
 8006d74:	2a09      	cmp	r2, #9
 8006d76:	d903      	bls.n	8006d80 <_svfiprintf_r+0x1a8>
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0c5      	beq.n	8006d08 <_svfiprintf_r+0x130>
 8006d7c:	9105      	str	r1, [sp, #20]
 8006d7e:	e7c3      	b.n	8006d08 <_svfiprintf_r+0x130>
 8006d80:	4604      	mov	r4, r0
 8006d82:	2301      	movs	r3, #1
 8006d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d88:	e7f0      	b.n	8006d6c <_svfiprintf_r+0x194>
 8006d8a:	ab03      	add	r3, sp, #12
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	462a      	mov	r2, r5
 8006d90:	4638      	mov	r0, r7
 8006d92:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <_svfiprintf_r+0x1fc>)
 8006d94:	a904      	add	r1, sp, #16
 8006d96:	f7fd fe19 	bl	80049cc <_printf_float>
 8006d9a:	1c42      	adds	r2, r0, #1
 8006d9c:	4606      	mov	r6, r0
 8006d9e:	d1d6      	bne.n	8006d4e <_svfiprintf_r+0x176>
 8006da0:	89ab      	ldrh	r3, [r5, #12]
 8006da2:	065b      	lsls	r3, r3, #25
 8006da4:	f53f af2c 	bmi.w	8006c00 <_svfiprintf_r+0x28>
 8006da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006daa:	b01d      	add	sp, #116	; 0x74
 8006dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db0:	ab03      	add	r3, sp, #12
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	462a      	mov	r2, r5
 8006db6:	4638      	mov	r0, r7
 8006db8:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <_svfiprintf_r+0x1fc>)
 8006dba:	a904      	add	r1, sp, #16
 8006dbc:	f7fe f8a2 	bl	8004f04 <_printf_i>
 8006dc0:	e7eb      	b.n	8006d9a <_svfiprintf_r+0x1c2>
 8006dc2:	bf00      	nop
 8006dc4:	08007b94 	.word	0x08007b94
 8006dc8:	08007b9a 	.word	0x08007b9a
 8006dcc:	08007b9e 	.word	0x08007b9e
 8006dd0:	080049cd 	.word	0x080049cd
 8006dd4:	08006b21 	.word	0x08006b21

08006dd8 <__sfputc_r>:
 8006dd8:	6893      	ldr	r3, [r2, #8]
 8006dda:	b410      	push	{r4}
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	6093      	str	r3, [r2, #8]
 8006de2:	da07      	bge.n	8006df4 <__sfputc_r+0x1c>
 8006de4:	6994      	ldr	r4, [r2, #24]
 8006de6:	42a3      	cmp	r3, r4
 8006de8:	db01      	blt.n	8006dee <__sfputc_r+0x16>
 8006dea:	290a      	cmp	r1, #10
 8006dec:	d102      	bne.n	8006df4 <__sfputc_r+0x1c>
 8006dee:	bc10      	pop	{r4}
 8006df0:	f000 b99e 	b.w	8007130 <__swbuf_r>
 8006df4:	6813      	ldr	r3, [r2, #0]
 8006df6:	1c58      	adds	r0, r3, #1
 8006df8:	6010      	str	r0, [r2, #0]
 8006dfa:	7019      	strb	r1, [r3, #0]
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	bc10      	pop	{r4}
 8006e00:	4770      	bx	lr

08006e02 <__sfputs_r>:
 8006e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e04:	4606      	mov	r6, r0
 8006e06:	460f      	mov	r7, r1
 8006e08:	4614      	mov	r4, r2
 8006e0a:	18d5      	adds	r5, r2, r3
 8006e0c:	42ac      	cmp	r4, r5
 8006e0e:	d101      	bne.n	8006e14 <__sfputs_r+0x12>
 8006e10:	2000      	movs	r0, #0
 8006e12:	e007      	b.n	8006e24 <__sfputs_r+0x22>
 8006e14:	463a      	mov	r2, r7
 8006e16:	4630      	mov	r0, r6
 8006e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e1c:	f7ff ffdc 	bl	8006dd8 <__sfputc_r>
 8006e20:	1c43      	adds	r3, r0, #1
 8006e22:	d1f3      	bne.n	8006e0c <__sfputs_r+0xa>
 8006e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e28 <_vfiprintf_r>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	460d      	mov	r5, r1
 8006e2e:	4614      	mov	r4, r2
 8006e30:	4698      	mov	r8, r3
 8006e32:	4606      	mov	r6, r0
 8006e34:	b09d      	sub	sp, #116	; 0x74
 8006e36:	b118      	cbz	r0, 8006e40 <_vfiprintf_r+0x18>
 8006e38:	6983      	ldr	r3, [r0, #24]
 8006e3a:	b90b      	cbnz	r3, 8006e40 <_vfiprintf_r+0x18>
 8006e3c:	f7ff f922 	bl	8006084 <__sinit>
 8006e40:	4b89      	ldr	r3, [pc, #548]	; (8007068 <_vfiprintf_r+0x240>)
 8006e42:	429d      	cmp	r5, r3
 8006e44:	d11b      	bne.n	8006e7e <_vfiprintf_r+0x56>
 8006e46:	6875      	ldr	r5, [r6, #4]
 8006e48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e4a:	07d9      	lsls	r1, r3, #31
 8006e4c:	d405      	bmi.n	8006e5a <_vfiprintf_r+0x32>
 8006e4e:	89ab      	ldrh	r3, [r5, #12]
 8006e50:	059a      	lsls	r2, r3, #22
 8006e52:	d402      	bmi.n	8006e5a <_vfiprintf_r+0x32>
 8006e54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e56:	f7ff f9ca 	bl	80061ee <__retarget_lock_acquire_recursive>
 8006e5a:	89ab      	ldrh	r3, [r5, #12]
 8006e5c:	071b      	lsls	r3, r3, #28
 8006e5e:	d501      	bpl.n	8006e64 <_vfiprintf_r+0x3c>
 8006e60:	692b      	ldr	r3, [r5, #16]
 8006e62:	b9eb      	cbnz	r3, 8006ea0 <_vfiprintf_r+0x78>
 8006e64:	4629      	mov	r1, r5
 8006e66:	4630      	mov	r0, r6
 8006e68:	f000 f9c6 	bl	80071f8 <__swsetup_r>
 8006e6c:	b1c0      	cbz	r0, 8006ea0 <_vfiprintf_r+0x78>
 8006e6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e70:	07dc      	lsls	r4, r3, #31
 8006e72:	d50e      	bpl.n	8006e92 <_vfiprintf_r+0x6a>
 8006e74:	f04f 30ff 	mov.w	r0, #4294967295
 8006e78:	b01d      	add	sp, #116	; 0x74
 8006e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e7e:	4b7b      	ldr	r3, [pc, #492]	; (800706c <_vfiprintf_r+0x244>)
 8006e80:	429d      	cmp	r5, r3
 8006e82:	d101      	bne.n	8006e88 <_vfiprintf_r+0x60>
 8006e84:	68b5      	ldr	r5, [r6, #8]
 8006e86:	e7df      	b.n	8006e48 <_vfiprintf_r+0x20>
 8006e88:	4b79      	ldr	r3, [pc, #484]	; (8007070 <_vfiprintf_r+0x248>)
 8006e8a:	429d      	cmp	r5, r3
 8006e8c:	bf08      	it	eq
 8006e8e:	68f5      	ldreq	r5, [r6, #12]
 8006e90:	e7da      	b.n	8006e48 <_vfiprintf_r+0x20>
 8006e92:	89ab      	ldrh	r3, [r5, #12]
 8006e94:	0598      	lsls	r0, r3, #22
 8006e96:	d4ed      	bmi.n	8006e74 <_vfiprintf_r+0x4c>
 8006e98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e9a:	f7ff f9a9 	bl	80061f0 <__retarget_lock_release_recursive>
 8006e9e:	e7e9      	b.n	8006e74 <_vfiprintf_r+0x4c>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea4:	2320      	movs	r3, #32
 8006ea6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eaa:	2330      	movs	r3, #48	; 0x30
 8006eac:	f04f 0901 	mov.w	r9, #1
 8006eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eb4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007074 <_vfiprintf_r+0x24c>
 8006eb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ebc:	4623      	mov	r3, r4
 8006ebe:	469a      	mov	sl, r3
 8006ec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ec4:	b10a      	cbz	r2, 8006eca <_vfiprintf_r+0xa2>
 8006ec6:	2a25      	cmp	r2, #37	; 0x25
 8006ec8:	d1f9      	bne.n	8006ebe <_vfiprintf_r+0x96>
 8006eca:	ebba 0b04 	subs.w	fp, sl, r4
 8006ece:	d00b      	beq.n	8006ee8 <_vfiprintf_r+0xc0>
 8006ed0:	465b      	mov	r3, fp
 8006ed2:	4622      	mov	r2, r4
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f7ff ff93 	bl	8006e02 <__sfputs_r>
 8006edc:	3001      	adds	r0, #1
 8006ede:	f000 80aa 	beq.w	8007036 <_vfiprintf_r+0x20e>
 8006ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ee4:	445a      	add	r2, fp
 8006ee6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80a2 	beq.w	8007036 <_vfiprintf_r+0x20e>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006efc:	f10a 0a01 	add.w	sl, sl, #1
 8006f00:	9304      	str	r3, [sp, #16]
 8006f02:	9307      	str	r3, [sp, #28]
 8006f04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f08:	931a      	str	r3, [sp, #104]	; 0x68
 8006f0a:	4654      	mov	r4, sl
 8006f0c:	2205      	movs	r2, #5
 8006f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f12:	4858      	ldr	r0, [pc, #352]	; (8007074 <_vfiprintf_r+0x24c>)
 8006f14:	f7ff f976 	bl	8006204 <memchr>
 8006f18:	9a04      	ldr	r2, [sp, #16]
 8006f1a:	b9d8      	cbnz	r0, 8006f54 <_vfiprintf_r+0x12c>
 8006f1c:	06d1      	lsls	r1, r2, #27
 8006f1e:	bf44      	itt	mi
 8006f20:	2320      	movmi	r3, #32
 8006f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f26:	0713      	lsls	r3, r2, #28
 8006f28:	bf44      	itt	mi
 8006f2a:	232b      	movmi	r3, #43	; 0x2b
 8006f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f30:	f89a 3000 	ldrb.w	r3, [sl]
 8006f34:	2b2a      	cmp	r3, #42	; 0x2a
 8006f36:	d015      	beq.n	8006f64 <_vfiprintf_r+0x13c>
 8006f38:	4654      	mov	r4, sl
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	f04f 0c0a 	mov.w	ip, #10
 8006f40:	9a07      	ldr	r2, [sp, #28]
 8006f42:	4621      	mov	r1, r4
 8006f44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f48:	3b30      	subs	r3, #48	; 0x30
 8006f4a:	2b09      	cmp	r3, #9
 8006f4c:	d94e      	bls.n	8006fec <_vfiprintf_r+0x1c4>
 8006f4e:	b1b0      	cbz	r0, 8006f7e <_vfiprintf_r+0x156>
 8006f50:	9207      	str	r2, [sp, #28]
 8006f52:	e014      	b.n	8006f7e <_vfiprintf_r+0x156>
 8006f54:	eba0 0308 	sub.w	r3, r0, r8
 8006f58:	fa09 f303 	lsl.w	r3, r9, r3
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	46a2      	mov	sl, r4
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	e7d2      	b.n	8006f0a <_vfiprintf_r+0xe2>
 8006f64:	9b03      	ldr	r3, [sp, #12]
 8006f66:	1d19      	adds	r1, r3, #4
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	9103      	str	r1, [sp, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	bfbb      	ittet	lt
 8006f70:	425b      	neglt	r3, r3
 8006f72:	f042 0202 	orrlt.w	r2, r2, #2
 8006f76:	9307      	strge	r3, [sp, #28]
 8006f78:	9307      	strlt	r3, [sp, #28]
 8006f7a:	bfb8      	it	lt
 8006f7c:	9204      	strlt	r2, [sp, #16]
 8006f7e:	7823      	ldrb	r3, [r4, #0]
 8006f80:	2b2e      	cmp	r3, #46	; 0x2e
 8006f82:	d10c      	bne.n	8006f9e <_vfiprintf_r+0x176>
 8006f84:	7863      	ldrb	r3, [r4, #1]
 8006f86:	2b2a      	cmp	r3, #42	; 0x2a
 8006f88:	d135      	bne.n	8006ff6 <_vfiprintf_r+0x1ce>
 8006f8a:	9b03      	ldr	r3, [sp, #12]
 8006f8c:	3402      	adds	r4, #2
 8006f8e:	1d1a      	adds	r2, r3, #4
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	9203      	str	r2, [sp, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	bfb8      	it	lt
 8006f98:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f9c:	9305      	str	r3, [sp, #20]
 8006f9e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007078 <_vfiprintf_r+0x250>
 8006fa2:	2203      	movs	r2, #3
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	7821      	ldrb	r1, [r4, #0]
 8006fa8:	f7ff f92c 	bl	8006204 <memchr>
 8006fac:	b140      	cbz	r0, 8006fc0 <_vfiprintf_r+0x198>
 8006fae:	2340      	movs	r3, #64	; 0x40
 8006fb0:	eba0 000a 	sub.w	r0, r0, sl
 8006fb4:	fa03 f000 	lsl.w	r0, r3, r0
 8006fb8:	9b04      	ldr	r3, [sp, #16]
 8006fba:	3401      	adds	r4, #1
 8006fbc:	4303      	orrs	r3, r0
 8006fbe:	9304      	str	r3, [sp, #16]
 8006fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fc4:	2206      	movs	r2, #6
 8006fc6:	482d      	ldr	r0, [pc, #180]	; (800707c <_vfiprintf_r+0x254>)
 8006fc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fcc:	f7ff f91a 	bl	8006204 <memchr>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d03f      	beq.n	8007054 <_vfiprintf_r+0x22c>
 8006fd4:	4b2a      	ldr	r3, [pc, #168]	; (8007080 <_vfiprintf_r+0x258>)
 8006fd6:	bb1b      	cbnz	r3, 8007020 <_vfiprintf_r+0x1f8>
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	3307      	adds	r3, #7
 8006fdc:	f023 0307 	bic.w	r3, r3, #7
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	9303      	str	r3, [sp, #12]
 8006fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe6:	443b      	add	r3, r7
 8006fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fea:	e767      	b.n	8006ebc <_vfiprintf_r+0x94>
 8006fec:	460c      	mov	r4, r1
 8006fee:	2001      	movs	r0, #1
 8006ff0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ff4:	e7a5      	b.n	8006f42 <_vfiprintf_r+0x11a>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	f04f 0c0a 	mov.w	ip, #10
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	3401      	adds	r4, #1
 8007000:	9305      	str	r3, [sp, #20]
 8007002:	4620      	mov	r0, r4
 8007004:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007008:	3a30      	subs	r2, #48	; 0x30
 800700a:	2a09      	cmp	r2, #9
 800700c:	d903      	bls.n	8007016 <_vfiprintf_r+0x1ee>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0c5      	beq.n	8006f9e <_vfiprintf_r+0x176>
 8007012:	9105      	str	r1, [sp, #20]
 8007014:	e7c3      	b.n	8006f9e <_vfiprintf_r+0x176>
 8007016:	4604      	mov	r4, r0
 8007018:	2301      	movs	r3, #1
 800701a:	fb0c 2101 	mla	r1, ip, r1, r2
 800701e:	e7f0      	b.n	8007002 <_vfiprintf_r+0x1da>
 8007020:	ab03      	add	r3, sp, #12
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	462a      	mov	r2, r5
 8007026:	4630      	mov	r0, r6
 8007028:	4b16      	ldr	r3, [pc, #88]	; (8007084 <_vfiprintf_r+0x25c>)
 800702a:	a904      	add	r1, sp, #16
 800702c:	f7fd fcce 	bl	80049cc <_printf_float>
 8007030:	4607      	mov	r7, r0
 8007032:	1c78      	adds	r0, r7, #1
 8007034:	d1d6      	bne.n	8006fe4 <_vfiprintf_r+0x1bc>
 8007036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007038:	07d9      	lsls	r1, r3, #31
 800703a:	d405      	bmi.n	8007048 <_vfiprintf_r+0x220>
 800703c:	89ab      	ldrh	r3, [r5, #12]
 800703e:	059a      	lsls	r2, r3, #22
 8007040:	d402      	bmi.n	8007048 <_vfiprintf_r+0x220>
 8007042:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007044:	f7ff f8d4 	bl	80061f0 <__retarget_lock_release_recursive>
 8007048:	89ab      	ldrh	r3, [r5, #12]
 800704a:	065b      	lsls	r3, r3, #25
 800704c:	f53f af12 	bmi.w	8006e74 <_vfiprintf_r+0x4c>
 8007050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007052:	e711      	b.n	8006e78 <_vfiprintf_r+0x50>
 8007054:	ab03      	add	r3, sp, #12
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	462a      	mov	r2, r5
 800705a:	4630      	mov	r0, r6
 800705c:	4b09      	ldr	r3, [pc, #36]	; (8007084 <_vfiprintf_r+0x25c>)
 800705e:	a904      	add	r1, sp, #16
 8007060:	f7fd ff50 	bl	8004f04 <_printf_i>
 8007064:	e7e4      	b.n	8007030 <_vfiprintf_r+0x208>
 8007066:	bf00      	nop
 8007068:	080079fc 	.word	0x080079fc
 800706c:	08007a1c 	.word	0x08007a1c
 8007070:	080079dc 	.word	0x080079dc
 8007074:	08007b94 	.word	0x08007b94
 8007078:	08007b9a 	.word	0x08007b9a
 800707c:	08007b9e 	.word	0x08007b9e
 8007080:	080049cd 	.word	0x080049cd
 8007084:	08006e03 	.word	0x08006e03

08007088 <_sbrk_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	2300      	movs	r3, #0
 800708c:	4d05      	ldr	r5, [pc, #20]	; (80070a4 <_sbrk_r+0x1c>)
 800708e:	4604      	mov	r4, r0
 8007090:	4608      	mov	r0, r1
 8007092:	602b      	str	r3, [r5, #0]
 8007094:	f7fb f8a2 	bl	80021dc <_sbrk>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_sbrk_r+0x1a>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_sbrk_r+0x1a>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	200004d8 	.word	0x200004d8

080070a8 <__sread>:
 80070a8:	b510      	push	{r4, lr}
 80070aa:	460c      	mov	r4, r1
 80070ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b0:	f000 fac6 	bl	8007640 <_read_r>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	bfab      	itete	ge
 80070b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070ba:	89a3      	ldrhlt	r3, [r4, #12]
 80070bc:	181b      	addge	r3, r3, r0
 80070be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070c2:	bfac      	ite	ge
 80070c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80070c6:	81a3      	strhlt	r3, [r4, #12]
 80070c8:	bd10      	pop	{r4, pc}

080070ca <__swrite>:
 80070ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ce:	461f      	mov	r7, r3
 80070d0:	898b      	ldrh	r3, [r1, #12]
 80070d2:	4605      	mov	r5, r0
 80070d4:	05db      	lsls	r3, r3, #23
 80070d6:	460c      	mov	r4, r1
 80070d8:	4616      	mov	r6, r2
 80070da:	d505      	bpl.n	80070e8 <__swrite+0x1e>
 80070dc:	2302      	movs	r3, #2
 80070de:	2200      	movs	r2, #0
 80070e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e4:	f000 f9cc 	bl	8007480 <_lseek_r>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	4632      	mov	r2, r6
 80070ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f0:	81a3      	strh	r3, [r4, #12]
 80070f2:	4628      	mov	r0, r5
 80070f4:	463b      	mov	r3, r7
 80070f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070fe:	f000 b869 	b.w	80071d4 <_write_r>

08007102 <__sseek>:
 8007102:	b510      	push	{r4, lr}
 8007104:	460c      	mov	r4, r1
 8007106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800710a:	f000 f9b9 	bl	8007480 <_lseek_r>
 800710e:	1c43      	adds	r3, r0, #1
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	bf15      	itete	ne
 8007114:	6560      	strne	r0, [r4, #84]	; 0x54
 8007116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800711a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800711e:	81a3      	strheq	r3, [r4, #12]
 8007120:	bf18      	it	ne
 8007122:	81a3      	strhne	r3, [r4, #12]
 8007124:	bd10      	pop	{r4, pc}

08007126 <__sclose>:
 8007126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800712a:	f000 b8db 	b.w	80072e4 <_close_r>
	...

08007130 <__swbuf_r>:
 8007130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007132:	460e      	mov	r6, r1
 8007134:	4614      	mov	r4, r2
 8007136:	4605      	mov	r5, r0
 8007138:	b118      	cbz	r0, 8007142 <__swbuf_r+0x12>
 800713a:	6983      	ldr	r3, [r0, #24]
 800713c:	b90b      	cbnz	r3, 8007142 <__swbuf_r+0x12>
 800713e:	f7fe ffa1 	bl	8006084 <__sinit>
 8007142:	4b21      	ldr	r3, [pc, #132]	; (80071c8 <__swbuf_r+0x98>)
 8007144:	429c      	cmp	r4, r3
 8007146:	d12b      	bne.n	80071a0 <__swbuf_r+0x70>
 8007148:	686c      	ldr	r4, [r5, #4]
 800714a:	69a3      	ldr	r3, [r4, #24]
 800714c:	60a3      	str	r3, [r4, #8]
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	071a      	lsls	r2, r3, #28
 8007152:	d52f      	bpl.n	80071b4 <__swbuf_r+0x84>
 8007154:	6923      	ldr	r3, [r4, #16]
 8007156:	b36b      	cbz	r3, 80071b4 <__swbuf_r+0x84>
 8007158:	6923      	ldr	r3, [r4, #16]
 800715a:	6820      	ldr	r0, [r4, #0]
 800715c:	b2f6      	uxtb	r6, r6
 800715e:	1ac0      	subs	r0, r0, r3
 8007160:	6963      	ldr	r3, [r4, #20]
 8007162:	4637      	mov	r7, r6
 8007164:	4283      	cmp	r3, r0
 8007166:	dc04      	bgt.n	8007172 <__swbuf_r+0x42>
 8007168:	4621      	mov	r1, r4
 800716a:	4628      	mov	r0, r5
 800716c:	f000 f94c 	bl	8007408 <_fflush_r>
 8007170:	bb30      	cbnz	r0, 80071c0 <__swbuf_r+0x90>
 8007172:	68a3      	ldr	r3, [r4, #8]
 8007174:	3001      	adds	r0, #1
 8007176:	3b01      	subs	r3, #1
 8007178:	60a3      	str	r3, [r4, #8]
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	6022      	str	r2, [r4, #0]
 8007180:	701e      	strb	r6, [r3, #0]
 8007182:	6963      	ldr	r3, [r4, #20]
 8007184:	4283      	cmp	r3, r0
 8007186:	d004      	beq.n	8007192 <__swbuf_r+0x62>
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	07db      	lsls	r3, r3, #31
 800718c:	d506      	bpl.n	800719c <__swbuf_r+0x6c>
 800718e:	2e0a      	cmp	r6, #10
 8007190:	d104      	bne.n	800719c <__swbuf_r+0x6c>
 8007192:	4621      	mov	r1, r4
 8007194:	4628      	mov	r0, r5
 8007196:	f000 f937 	bl	8007408 <_fflush_r>
 800719a:	b988      	cbnz	r0, 80071c0 <__swbuf_r+0x90>
 800719c:	4638      	mov	r0, r7
 800719e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a0:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <__swbuf_r+0x9c>)
 80071a2:	429c      	cmp	r4, r3
 80071a4:	d101      	bne.n	80071aa <__swbuf_r+0x7a>
 80071a6:	68ac      	ldr	r4, [r5, #8]
 80071a8:	e7cf      	b.n	800714a <__swbuf_r+0x1a>
 80071aa:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <__swbuf_r+0xa0>)
 80071ac:	429c      	cmp	r4, r3
 80071ae:	bf08      	it	eq
 80071b0:	68ec      	ldreq	r4, [r5, #12]
 80071b2:	e7ca      	b.n	800714a <__swbuf_r+0x1a>
 80071b4:	4621      	mov	r1, r4
 80071b6:	4628      	mov	r0, r5
 80071b8:	f000 f81e 	bl	80071f8 <__swsetup_r>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d0cb      	beq.n	8007158 <__swbuf_r+0x28>
 80071c0:	f04f 37ff 	mov.w	r7, #4294967295
 80071c4:	e7ea      	b.n	800719c <__swbuf_r+0x6c>
 80071c6:	bf00      	nop
 80071c8:	080079fc 	.word	0x080079fc
 80071cc:	08007a1c 	.word	0x08007a1c
 80071d0:	080079dc 	.word	0x080079dc

080071d4 <_write_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4604      	mov	r4, r0
 80071d8:	4608      	mov	r0, r1
 80071da:	4611      	mov	r1, r2
 80071dc:	2200      	movs	r2, #0
 80071de:	4d05      	ldr	r5, [pc, #20]	; (80071f4 <_write_r+0x20>)
 80071e0:	602a      	str	r2, [r5, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f7fa ffae 	bl	8002144 <_write>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d102      	bne.n	80071f2 <_write_r+0x1e>
 80071ec:	682b      	ldr	r3, [r5, #0]
 80071ee:	b103      	cbz	r3, 80071f2 <_write_r+0x1e>
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	200004d8 	.word	0x200004d8

080071f8 <__swsetup_r>:
 80071f8:	4b32      	ldr	r3, [pc, #200]	; (80072c4 <__swsetup_r+0xcc>)
 80071fa:	b570      	push	{r4, r5, r6, lr}
 80071fc:	681d      	ldr	r5, [r3, #0]
 80071fe:	4606      	mov	r6, r0
 8007200:	460c      	mov	r4, r1
 8007202:	b125      	cbz	r5, 800720e <__swsetup_r+0x16>
 8007204:	69ab      	ldr	r3, [r5, #24]
 8007206:	b913      	cbnz	r3, 800720e <__swsetup_r+0x16>
 8007208:	4628      	mov	r0, r5
 800720a:	f7fe ff3b 	bl	8006084 <__sinit>
 800720e:	4b2e      	ldr	r3, [pc, #184]	; (80072c8 <__swsetup_r+0xd0>)
 8007210:	429c      	cmp	r4, r3
 8007212:	d10f      	bne.n	8007234 <__swsetup_r+0x3c>
 8007214:	686c      	ldr	r4, [r5, #4]
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800721c:	0719      	lsls	r1, r3, #28
 800721e:	d42c      	bmi.n	800727a <__swsetup_r+0x82>
 8007220:	06dd      	lsls	r5, r3, #27
 8007222:	d411      	bmi.n	8007248 <__swsetup_r+0x50>
 8007224:	2309      	movs	r3, #9
 8007226:	6033      	str	r3, [r6, #0]
 8007228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800722c:	f04f 30ff 	mov.w	r0, #4294967295
 8007230:	81a3      	strh	r3, [r4, #12]
 8007232:	e03e      	b.n	80072b2 <__swsetup_r+0xba>
 8007234:	4b25      	ldr	r3, [pc, #148]	; (80072cc <__swsetup_r+0xd4>)
 8007236:	429c      	cmp	r4, r3
 8007238:	d101      	bne.n	800723e <__swsetup_r+0x46>
 800723a:	68ac      	ldr	r4, [r5, #8]
 800723c:	e7eb      	b.n	8007216 <__swsetup_r+0x1e>
 800723e:	4b24      	ldr	r3, [pc, #144]	; (80072d0 <__swsetup_r+0xd8>)
 8007240:	429c      	cmp	r4, r3
 8007242:	bf08      	it	eq
 8007244:	68ec      	ldreq	r4, [r5, #12]
 8007246:	e7e6      	b.n	8007216 <__swsetup_r+0x1e>
 8007248:	0758      	lsls	r0, r3, #29
 800724a:	d512      	bpl.n	8007272 <__swsetup_r+0x7a>
 800724c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800724e:	b141      	cbz	r1, 8007262 <__swsetup_r+0x6a>
 8007250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007254:	4299      	cmp	r1, r3
 8007256:	d002      	beq.n	800725e <__swsetup_r+0x66>
 8007258:	4630      	mov	r0, r6
 800725a:	f7ff fb85 	bl	8006968 <_free_r>
 800725e:	2300      	movs	r3, #0
 8007260:	6363      	str	r3, [r4, #52]	; 0x34
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007268:	81a3      	strh	r3, [r4, #12]
 800726a:	2300      	movs	r3, #0
 800726c:	6063      	str	r3, [r4, #4]
 800726e:	6923      	ldr	r3, [r4, #16]
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	89a3      	ldrh	r3, [r4, #12]
 8007274:	f043 0308 	orr.w	r3, r3, #8
 8007278:	81a3      	strh	r3, [r4, #12]
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	b94b      	cbnz	r3, 8007292 <__swsetup_r+0x9a>
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007288:	d003      	beq.n	8007292 <__swsetup_r+0x9a>
 800728a:	4621      	mov	r1, r4
 800728c:	4630      	mov	r0, r6
 800728e:	f000 f92f 	bl	80074f0 <__smakebuf_r>
 8007292:	89a0      	ldrh	r0, [r4, #12]
 8007294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007298:	f010 0301 	ands.w	r3, r0, #1
 800729c:	d00a      	beq.n	80072b4 <__swsetup_r+0xbc>
 800729e:	2300      	movs	r3, #0
 80072a0:	60a3      	str	r3, [r4, #8]
 80072a2:	6963      	ldr	r3, [r4, #20]
 80072a4:	425b      	negs	r3, r3
 80072a6:	61a3      	str	r3, [r4, #24]
 80072a8:	6923      	ldr	r3, [r4, #16]
 80072aa:	b943      	cbnz	r3, 80072be <__swsetup_r+0xc6>
 80072ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072b0:	d1ba      	bne.n	8007228 <__swsetup_r+0x30>
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	0781      	lsls	r1, r0, #30
 80072b6:	bf58      	it	pl
 80072b8:	6963      	ldrpl	r3, [r4, #20]
 80072ba:	60a3      	str	r3, [r4, #8]
 80072bc:	e7f4      	b.n	80072a8 <__swsetup_r+0xb0>
 80072be:	2000      	movs	r0, #0
 80072c0:	e7f7      	b.n	80072b2 <__swsetup_r+0xba>
 80072c2:	bf00      	nop
 80072c4:	2000009c 	.word	0x2000009c
 80072c8:	080079fc 	.word	0x080079fc
 80072cc:	08007a1c 	.word	0x08007a1c
 80072d0:	080079dc 	.word	0x080079dc

080072d4 <abort>:
 80072d4:	2006      	movs	r0, #6
 80072d6:	b508      	push	{r3, lr}
 80072d8:	f000 f9ec 	bl	80076b4 <raise>
 80072dc:	2001      	movs	r0, #1
 80072de:	f7fa ff0a 	bl	80020f6 <_exit>
	...

080072e4 <_close_r>:
 80072e4:	b538      	push	{r3, r4, r5, lr}
 80072e6:	2300      	movs	r3, #0
 80072e8:	4d05      	ldr	r5, [pc, #20]	; (8007300 <_close_r+0x1c>)
 80072ea:	4604      	mov	r4, r0
 80072ec:	4608      	mov	r0, r1
 80072ee:	602b      	str	r3, [r5, #0]
 80072f0:	f7fa ff44 	bl	800217c <_close>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	d102      	bne.n	80072fe <_close_r+0x1a>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	b103      	cbz	r3, 80072fe <_close_r+0x1a>
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	bd38      	pop	{r3, r4, r5, pc}
 8007300:	200004d8 	.word	0x200004d8

08007304 <__sflush_r>:
 8007304:	898a      	ldrh	r2, [r1, #12]
 8007306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007308:	4605      	mov	r5, r0
 800730a:	0710      	lsls	r0, r2, #28
 800730c:	460c      	mov	r4, r1
 800730e:	d457      	bmi.n	80073c0 <__sflush_r+0xbc>
 8007310:	684b      	ldr	r3, [r1, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	dc04      	bgt.n	8007320 <__sflush_r+0x1c>
 8007316:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007318:	2b00      	cmp	r3, #0
 800731a:	dc01      	bgt.n	8007320 <__sflush_r+0x1c>
 800731c:	2000      	movs	r0, #0
 800731e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007322:	2e00      	cmp	r6, #0
 8007324:	d0fa      	beq.n	800731c <__sflush_r+0x18>
 8007326:	2300      	movs	r3, #0
 8007328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800732c:	682f      	ldr	r7, [r5, #0]
 800732e:	602b      	str	r3, [r5, #0]
 8007330:	d032      	beq.n	8007398 <__sflush_r+0x94>
 8007332:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	075a      	lsls	r2, r3, #29
 8007338:	d505      	bpl.n	8007346 <__sflush_r+0x42>
 800733a:	6863      	ldr	r3, [r4, #4]
 800733c:	1ac0      	subs	r0, r0, r3
 800733e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007340:	b10b      	cbz	r3, 8007346 <__sflush_r+0x42>
 8007342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007344:	1ac0      	subs	r0, r0, r3
 8007346:	2300      	movs	r3, #0
 8007348:	4602      	mov	r2, r0
 800734a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800734c:	4628      	mov	r0, r5
 800734e:	6a21      	ldr	r1, [r4, #32]
 8007350:	47b0      	blx	r6
 8007352:	1c43      	adds	r3, r0, #1
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	d106      	bne.n	8007366 <__sflush_r+0x62>
 8007358:	6829      	ldr	r1, [r5, #0]
 800735a:	291d      	cmp	r1, #29
 800735c:	d82c      	bhi.n	80073b8 <__sflush_r+0xb4>
 800735e:	4a29      	ldr	r2, [pc, #164]	; (8007404 <__sflush_r+0x100>)
 8007360:	40ca      	lsrs	r2, r1
 8007362:	07d6      	lsls	r6, r2, #31
 8007364:	d528      	bpl.n	80073b8 <__sflush_r+0xb4>
 8007366:	2200      	movs	r2, #0
 8007368:	6062      	str	r2, [r4, #4]
 800736a:	6922      	ldr	r2, [r4, #16]
 800736c:	04d9      	lsls	r1, r3, #19
 800736e:	6022      	str	r2, [r4, #0]
 8007370:	d504      	bpl.n	800737c <__sflush_r+0x78>
 8007372:	1c42      	adds	r2, r0, #1
 8007374:	d101      	bne.n	800737a <__sflush_r+0x76>
 8007376:	682b      	ldr	r3, [r5, #0]
 8007378:	b903      	cbnz	r3, 800737c <__sflush_r+0x78>
 800737a:	6560      	str	r0, [r4, #84]	; 0x54
 800737c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800737e:	602f      	str	r7, [r5, #0]
 8007380:	2900      	cmp	r1, #0
 8007382:	d0cb      	beq.n	800731c <__sflush_r+0x18>
 8007384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007388:	4299      	cmp	r1, r3
 800738a:	d002      	beq.n	8007392 <__sflush_r+0x8e>
 800738c:	4628      	mov	r0, r5
 800738e:	f7ff faeb 	bl	8006968 <_free_r>
 8007392:	2000      	movs	r0, #0
 8007394:	6360      	str	r0, [r4, #52]	; 0x34
 8007396:	e7c2      	b.n	800731e <__sflush_r+0x1a>
 8007398:	6a21      	ldr	r1, [r4, #32]
 800739a:	2301      	movs	r3, #1
 800739c:	4628      	mov	r0, r5
 800739e:	47b0      	blx	r6
 80073a0:	1c41      	adds	r1, r0, #1
 80073a2:	d1c7      	bne.n	8007334 <__sflush_r+0x30>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0c4      	beq.n	8007334 <__sflush_r+0x30>
 80073aa:	2b1d      	cmp	r3, #29
 80073ac:	d001      	beq.n	80073b2 <__sflush_r+0xae>
 80073ae:	2b16      	cmp	r3, #22
 80073b0:	d101      	bne.n	80073b6 <__sflush_r+0xb2>
 80073b2:	602f      	str	r7, [r5, #0]
 80073b4:	e7b2      	b.n	800731c <__sflush_r+0x18>
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073bc:	81a3      	strh	r3, [r4, #12]
 80073be:	e7ae      	b.n	800731e <__sflush_r+0x1a>
 80073c0:	690f      	ldr	r7, [r1, #16]
 80073c2:	2f00      	cmp	r7, #0
 80073c4:	d0aa      	beq.n	800731c <__sflush_r+0x18>
 80073c6:	0793      	lsls	r3, r2, #30
 80073c8:	bf18      	it	ne
 80073ca:	2300      	movne	r3, #0
 80073cc:	680e      	ldr	r6, [r1, #0]
 80073ce:	bf08      	it	eq
 80073d0:	694b      	ldreq	r3, [r1, #20]
 80073d2:	1bf6      	subs	r6, r6, r7
 80073d4:	600f      	str	r7, [r1, #0]
 80073d6:	608b      	str	r3, [r1, #8]
 80073d8:	2e00      	cmp	r6, #0
 80073da:	dd9f      	ble.n	800731c <__sflush_r+0x18>
 80073dc:	4633      	mov	r3, r6
 80073de:	463a      	mov	r2, r7
 80073e0:	4628      	mov	r0, r5
 80073e2:	6a21      	ldr	r1, [r4, #32]
 80073e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80073e8:	47e0      	blx	ip
 80073ea:	2800      	cmp	r0, #0
 80073ec:	dc06      	bgt.n	80073fc <__sflush_r+0xf8>
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	f04f 30ff 	mov.w	r0, #4294967295
 80073f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073f8:	81a3      	strh	r3, [r4, #12]
 80073fa:	e790      	b.n	800731e <__sflush_r+0x1a>
 80073fc:	4407      	add	r7, r0
 80073fe:	1a36      	subs	r6, r6, r0
 8007400:	e7ea      	b.n	80073d8 <__sflush_r+0xd4>
 8007402:	bf00      	nop
 8007404:	20400001 	.word	0x20400001

08007408 <_fflush_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	690b      	ldr	r3, [r1, #16]
 800740c:	4605      	mov	r5, r0
 800740e:	460c      	mov	r4, r1
 8007410:	b913      	cbnz	r3, 8007418 <_fflush_r+0x10>
 8007412:	2500      	movs	r5, #0
 8007414:	4628      	mov	r0, r5
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	b118      	cbz	r0, 8007422 <_fflush_r+0x1a>
 800741a:	6983      	ldr	r3, [r0, #24]
 800741c:	b90b      	cbnz	r3, 8007422 <_fflush_r+0x1a>
 800741e:	f7fe fe31 	bl	8006084 <__sinit>
 8007422:	4b14      	ldr	r3, [pc, #80]	; (8007474 <_fflush_r+0x6c>)
 8007424:	429c      	cmp	r4, r3
 8007426:	d11b      	bne.n	8007460 <_fflush_r+0x58>
 8007428:	686c      	ldr	r4, [r5, #4]
 800742a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0ef      	beq.n	8007412 <_fflush_r+0xa>
 8007432:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007434:	07d0      	lsls	r0, r2, #31
 8007436:	d404      	bmi.n	8007442 <_fflush_r+0x3a>
 8007438:	0599      	lsls	r1, r3, #22
 800743a:	d402      	bmi.n	8007442 <_fflush_r+0x3a>
 800743c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800743e:	f7fe fed6 	bl	80061ee <__retarget_lock_acquire_recursive>
 8007442:	4628      	mov	r0, r5
 8007444:	4621      	mov	r1, r4
 8007446:	f7ff ff5d 	bl	8007304 <__sflush_r>
 800744a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800744c:	4605      	mov	r5, r0
 800744e:	07da      	lsls	r2, r3, #31
 8007450:	d4e0      	bmi.n	8007414 <_fflush_r+0xc>
 8007452:	89a3      	ldrh	r3, [r4, #12]
 8007454:	059b      	lsls	r3, r3, #22
 8007456:	d4dd      	bmi.n	8007414 <_fflush_r+0xc>
 8007458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800745a:	f7fe fec9 	bl	80061f0 <__retarget_lock_release_recursive>
 800745e:	e7d9      	b.n	8007414 <_fflush_r+0xc>
 8007460:	4b05      	ldr	r3, [pc, #20]	; (8007478 <_fflush_r+0x70>)
 8007462:	429c      	cmp	r4, r3
 8007464:	d101      	bne.n	800746a <_fflush_r+0x62>
 8007466:	68ac      	ldr	r4, [r5, #8]
 8007468:	e7df      	b.n	800742a <_fflush_r+0x22>
 800746a:	4b04      	ldr	r3, [pc, #16]	; (800747c <_fflush_r+0x74>)
 800746c:	429c      	cmp	r4, r3
 800746e:	bf08      	it	eq
 8007470:	68ec      	ldreq	r4, [r5, #12]
 8007472:	e7da      	b.n	800742a <_fflush_r+0x22>
 8007474:	080079fc 	.word	0x080079fc
 8007478:	08007a1c 	.word	0x08007a1c
 800747c:	080079dc 	.word	0x080079dc

08007480 <_lseek_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	4611      	mov	r1, r2
 8007488:	2200      	movs	r2, #0
 800748a:	4d05      	ldr	r5, [pc, #20]	; (80074a0 <_lseek_r+0x20>)
 800748c:	602a      	str	r2, [r5, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	f7fa fe98 	bl	80021c4 <_lseek>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d102      	bne.n	800749e <_lseek_r+0x1e>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	b103      	cbz	r3, 800749e <_lseek_r+0x1e>
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	200004d8 	.word	0x200004d8

080074a4 <__swhatbuf_r>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	460e      	mov	r6, r1
 80074a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ac:	4614      	mov	r4, r2
 80074ae:	2900      	cmp	r1, #0
 80074b0:	461d      	mov	r5, r3
 80074b2:	b096      	sub	sp, #88	; 0x58
 80074b4:	da08      	bge.n	80074c8 <__swhatbuf_r+0x24>
 80074b6:	2200      	movs	r2, #0
 80074b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80074bc:	602a      	str	r2, [r5, #0]
 80074be:	061a      	lsls	r2, r3, #24
 80074c0:	d410      	bmi.n	80074e4 <__swhatbuf_r+0x40>
 80074c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074c6:	e00e      	b.n	80074e6 <__swhatbuf_r+0x42>
 80074c8:	466a      	mov	r2, sp
 80074ca:	f000 f91d 	bl	8007708 <_fstat_r>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	dbf1      	blt.n	80074b6 <__swhatbuf_r+0x12>
 80074d2:	9a01      	ldr	r2, [sp, #4]
 80074d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074dc:	425a      	negs	r2, r3
 80074de:	415a      	adcs	r2, r3
 80074e0:	602a      	str	r2, [r5, #0]
 80074e2:	e7ee      	b.n	80074c2 <__swhatbuf_r+0x1e>
 80074e4:	2340      	movs	r3, #64	; 0x40
 80074e6:	2000      	movs	r0, #0
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	b016      	add	sp, #88	; 0x58
 80074ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080074f0 <__smakebuf_r>:
 80074f0:	898b      	ldrh	r3, [r1, #12]
 80074f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074f4:	079d      	lsls	r5, r3, #30
 80074f6:	4606      	mov	r6, r0
 80074f8:	460c      	mov	r4, r1
 80074fa:	d507      	bpl.n	800750c <__smakebuf_r+0x1c>
 80074fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	6123      	str	r3, [r4, #16]
 8007504:	2301      	movs	r3, #1
 8007506:	6163      	str	r3, [r4, #20]
 8007508:	b002      	add	sp, #8
 800750a:	bd70      	pop	{r4, r5, r6, pc}
 800750c:	466a      	mov	r2, sp
 800750e:	ab01      	add	r3, sp, #4
 8007510:	f7ff ffc8 	bl	80074a4 <__swhatbuf_r>
 8007514:	9900      	ldr	r1, [sp, #0]
 8007516:	4605      	mov	r5, r0
 8007518:	4630      	mov	r0, r6
 800751a:	f7ff fa8d 	bl	8006a38 <_malloc_r>
 800751e:	b948      	cbnz	r0, 8007534 <__smakebuf_r+0x44>
 8007520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007524:	059a      	lsls	r2, r3, #22
 8007526:	d4ef      	bmi.n	8007508 <__smakebuf_r+0x18>
 8007528:	f023 0303 	bic.w	r3, r3, #3
 800752c:	f043 0302 	orr.w	r3, r3, #2
 8007530:	81a3      	strh	r3, [r4, #12]
 8007532:	e7e3      	b.n	80074fc <__smakebuf_r+0xc>
 8007534:	4b0d      	ldr	r3, [pc, #52]	; (800756c <__smakebuf_r+0x7c>)
 8007536:	62b3      	str	r3, [r6, #40]	; 0x28
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	6020      	str	r0, [r4, #0]
 800753c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007540:	81a3      	strh	r3, [r4, #12]
 8007542:	9b00      	ldr	r3, [sp, #0]
 8007544:	6120      	str	r0, [r4, #16]
 8007546:	6163      	str	r3, [r4, #20]
 8007548:	9b01      	ldr	r3, [sp, #4]
 800754a:	b15b      	cbz	r3, 8007564 <__smakebuf_r+0x74>
 800754c:	4630      	mov	r0, r6
 800754e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007552:	f000 f8eb 	bl	800772c <_isatty_r>
 8007556:	b128      	cbz	r0, 8007564 <__smakebuf_r+0x74>
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	f023 0303 	bic.w	r3, r3, #3
 800755e:	f043 0301 	orr.w	r3, r3, #1
 8007562:	81a3      	strh	r3, [r4, #12]
 8007564:	89a0      	ldrh	r0, [r4, #12]
 8007566:	4305      	orrs	r5, r0
 8007568:	81a5      	strh	r5, [r4, #12]
 800756a:	e7cd      	b.n	8007508 <__smakebuf_r+0x18>
 800756c:	0800601d 	.word	0x0800601d

08007570 <__ascii_mbtowc>:
 8007570:	b082      	sub	sp, #8
 8007572:	b901      	cbnz	r1, 8007576 <__ascii_mbtowc+0x6>
 8007574:	a901      	add	r1, sp, #4
 8007576:	b142      	cbz	r2, 800758a <__ascii_mbtowc+0x1a>
 8007578:	b14b      	cbz	r3, 800758e <__ascii_mbtowc+0x1e>
 800757a:	7813      	ldrb	r3, [r2, #0]
 800757c:	600b      	str	r3, [r1, #0]
 800757e:	7812      	ldrb	r2, [r2, #0]
 8007580:	1e10      	subs	r0, r2, #0
 8007582:	bf18      	it	ne
 8007584:	2001      	movne	r0, #1
 8007586:	b002      	add	sp, #8
 8007588:	4770      	bx	lr
 800758a:	4610      	mov	r0, r2
 800758c:	e7fb      	b.n	8007586 <__ascii_mbtowc+0x16>
 800758e:	f06f 0001 	mvn.w	r0, #1
 8007592:	e7f8      	b.n	8007586 <__ascii_mbtowc+0x16>

08007594 <memmove>:
 8007594:	4288      	cmp	r0, r1
 8007596:	b510      	push	{r4, lr}
 8007598:	eb01 0402 	add.w	r4, r1, r2
 800759c:	d902      	bls.n	80075a4 <memmove+0x10>
 800759e:	4284      	cmp	r4, r0
 80075a0:	4623      	mov	r3, r4
 80075a2:	d807      	bhi.n	80075b4 <memmove+0x20>
 80075a4:	1e43      	subs	r3, r0, #1
 80075a6:	42a1      	cmp	r1, r4
 80075a8:	d008      	beq.n	80075bc <memmove+0x28>
 80075aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075b2:	e7f8      	b.n	80075a6 <memmove+0x12>
 80075b4:	4601      	mov	r1, r0
 80075b6:	4402      	add	r2, r0
 80075b8:	428a      	cmp	r2, r1
 80075ba:	d100      	bne.n	80075be <memmove+0x2a>
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075c6:	e7f7      	b.n	80075b8 <memmove+0x24>

080075c8 <__malloc_lock>:
 80075c8:	4801      	ldr	r0, [pc, #4]	; (80075d0 <__malloc_lock+0x8>)
 80075ca:	f7fe be10 	b.w	80061ee <__retarget_lock_acquire_recursive>
 80075ce:	bf00      	nop
 80075d0:	200004cc 	.word	0x200004cc

080075d4 <__malloc_unlock>:
 80075d4:	4801      	ldr	r0, [pc, #4]	; (80075dc <__malloc_unlock+0x8>)
 80075d6:	f7fe be0b 	b.w	80061f0 <__retarget_lock_release_recursive>
 80075da:	bf00      	nop
 80075dc:	200004cc 	.word	0x200004cc

080075e0 <_realloc_r>:
 80075e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e4:	4680      	mov	r8, r0
 80075e6:	4614      	mov	r4, r2
 80075e8:	460e      	mov	r6, r1
 80075ea:	b921      	cbnz	r1, 80075f6 <_realloc_r+0x16>
 80075ec:	4611      	mov	r1, r2
 80075ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075f2:	f7ff ba21 	b.w	8006a38 <_malloc_r>
 80075f6:	b92a      	cbnz	r2, 8007604 <_realloc_r+0x24>
 80075f8:	f7ff f9b6 	bl	8006968 <_free_r>
 80075fc:	4625      	mov	r5, r4
 80075fe:	4628      	mov	r0, r5
 8007600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007604:	f000 f8a2 	bl	800774c <_malloc_usable_size_r>
 8007608:	4284      	cmp	r4, r0
 800760a:	4607      	mov	r7, r0
 800760c:	d802      	bhi.n	8007614 <_realloc_r+0x34>
 800760e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007612:	d812      	bhi.n	800763a <_realloc_r+0x5a>
 8007614:	4621      	mov	r1, r4
 8007616:	4640      	mov	r0, r8
 8007618:	f7ff fa0e 	bl	8006a38 <_malloc_r>
 800761c:	4605      	mov	r5, r0
 800761e:	2800      	cmp	r0, #0
 8007620:	d0ed      	beq.n	80075fe <_realloc_r+0x1e>
 8007622:	42bc      	cmp	r4, r7
 8007624:	4622      	mov	r2, r4
 8007626:	4631      	mov	r1, r6
 8007628:	bf28      	it	cs
 800762a:	463a      	movcs	r2, r7
 800762c:	f7fe fdf8 	bl	8006220 <memcpy>
 8007630:	4631      	mov	r1, r6
 8007632:	4640      	mov	r0, r8
 8007634:	f7ff f998 	bl	8006968 <_free_r>
 8007638:	e7e1      	b.n	80075fe <_realloc_r+0x1e>
 800763a:	4635      	mov	r5, r6
 800763c:	e7df      	b.n	80075fe <_realloc_r+0x1e>
	...

08007640 <_read_r>:
 8007640:	b538      	push	{r3, r4, r5, lr}
 8007642:	4604      	mov	r4, r0
 8007644:	4608      	mov	r0, r1
 8007646:	4611      	mov	r1, r2
 8007648:	2200      	movs	r2, #0
 800764a:	4d05      	ldr	r5, [pc, #20]	; (8007660 <_read_r+0x20>)
 800764c:	602a      	str	r2, [r5, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	f7fa fd5b 	bl	800210a <_read>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d102      	bne.n	800765e <_read_r+0x1e>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	b103      	cbz	r3, 800765e <_read_r+0x1e>
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	200004d8 	.word	0x200004d8

08007664 <_raise_r>:
 8007664:	291f      	cmp	r1, #31
 8007666:	b538      	push	{r3, r4, r5, lr}
 8007668:	4604      	mov	r4, r0
 800766a:	460d      	mov	r5, r1
 800766c:	d904      	bls.n	8007678 <_raise_r+0x14>
 800766e:	2316      	movs	r3, #22
 8007670:	6003      	str	r3, [r0, #0]
 8007672:	f04f 30ff 	mov.w	r0, #4294967295
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800767a:	b112      	cbz	r2, 8007682 <_raise_r+0x1e>
 800767c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007680:	b94b      	cbnz	r3, 8007696 <_raise_r+0x32>
 8007682:	4620      	mov	r0, r4
 8007684:	f000 f830 	bl	80076e8 <_getpid_r>
 8007688:	462a      	mov	r2, r5
 800768a:	4601      	mov	r1, r0
 800768c:	4620      	mov	r0, r4
 800768e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007692:	f000 b817 	b.w	80076c4 <_kill_r>
 8007696:	2b01      	cmp	r3, #1
 8007698:	d00a      	beq.n	80076b0 <_raise_r+0x4c>
 800769a:	1c59      	adds	r1, r3, #1
 800769c:	d103      	bne.n	80076a6 <_raise_r+0x42>
 800769e:	2316      	movs	r3, #22
 80076a0:	6003      	str	r3, [r0, #0]
 80076a2:	2001      	movs	r0, #1
 80076a4:	e7e7      	b.n	8007676 <_raise_r+0x12>
 80076a6:	2400      	movs	r4, #0
 80076a8:	4628      	mov	r0, r5
 80076aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076ae:	4798      	blx	r3
 80076b0:	2000      	movs	r0, #0
 80076b2:	e7e0      	b.n	8007676 <_raise_r+0x12>

080076b4 <raise>:
 80076b4:	4b02      	ldr	r3, [pc, #8]	; (80076c0 <raise+0xc>)
 80076b6:	4601      	mov	r1, r0
 80076b8:	6818      	ldr	r0, [r3, #0]
 80076ba:	f7ff bfd3 	b.w	8007664 <_raise_r>
 80076be:	bf00      	nop
 80076c0:	2000009c 	.word	0x2000009c

080076c4 <_kill_r>:
 80076c4:	b538      	push	{r3, r4, r5, lr}
 80076c6:	2300      	movs	r3, #0
 80076c8:	4d06      	ldr	r5, [pc, #24]	; (80076e4 <_kill_r+0x20>)
 80076ca:	4604      	mov	r4, r0
 80076cc:	4608      	mov	r0, r1
 80076ce:	4611      	mov	r1, r2
 80076d0:	602b      	str	r3, [r5, #0]
 80076d2:	f7fa fd00 	bl	80020d6 <_kill>
 80076d6:	1c43      	adds	r3, r0, #1
 80076d8:	d102      	bne.n	80076e0 <_kill_r+0x1c>
 80076da:	682b      	ldr	r3, [r5, #0]
 80076dc:	b103      	cbz	r3, 80076e0 <_kill_r+0x1c>
 80076de:	6023      	str	r3, [r4, #0]
 80076e0:	bd38      	pop	{r3, r4, r5, pc}
 80076e2:	bf00      	nop
 80076e4:	200004d8 	.word	0x200004d8

080076e8 <_getpid_r>:
 80076e8:	f7fa bcee 	b.w	80020c8 <_getpid>

080076ec <__ascii_wctomb>:
 80076ec:	4603      	mov	r3, r0
 80076ee:	4608      	mov	r0, r1
 80076f0:	b141      	cbz	r1, 8007704 <__ascii_wctomb+0x18>
 80076f2:	2aff      	cmp	r2, #255	; 0xff
 80076f4:	d904      	bls.n	8007700 <__ascii_wctomb+0x14>
 80076f6:	228a      	movs	r2, #138	; 0x8a
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	4770      	bx	lr
 8007700:	2001      	movs	r0, #1
 8007702:	700a      	strb	r2, [r1, #0]
 8007704:	4770      	bx	lr
	...

08007708 <_fstat_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	2300      	movs	r3, #0
 800770c:	4d06      	ldr	r5, [pc, #24]	; (8007728 <_fstat_r+0x20>)
 800770e:	4604      	mov	r4, r0
 8007710:	4608      	mov	r0, r1
 8007712:	4611      	mov	r1, r2
 8007714:	602b      	str	r3, [r5, #0]
 8007716:	f7fa fd3c 	bl	8002192 <_fstat>
 800771a:	1c43      	adds	r3, r0, #1
 800771c:	d102      	bne.n	8007724 <_fstat_r+0x1c>
 800771e:	682b      	ldr	r3, [r5, #0]
 8007720:	b103      	cbz	r3, 8007724 <_fstat_r+0x1c>
 8007722:	6023      	str	r3, [r4, #0]
 8007724:	bd38      	pop	{r3, r4, r5, pc}
 8007726:	bf00      	nop
 8007728:	200004d8 	.word	0x200004d8

0800772c <_isatty_r>:
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	2300      	movs	r3, #0
 8007730:	4d05      	ldr	r5, [pc, #20]	; (8007748 <_isatty_r+0x1c>)
 8007732:	4604      	mov	r4, r0
 8007734:	4608      	mov	r0, r1
 8007736:	602b      	str	r3, [r5, #0]
 8007738:	f7fa fd3a 	bl	80021b0 <_isatty>
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	d102      	bne.n	8007746 <_isatty_r+0x1a>
 8007740:	682b      	ldr	r3, [r5, #0]
 8007742:	b103      	cbz	r3, 8007746 <_isatty_r+0x1a>
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	bd38      	pop	{r3, r4, r5, pc}
 8007748:	200004d8 	.word	0x200004d8

0800774c <_malloc_usable_size_r>:
 800774c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007750:	1f18      	subs	r0, r3, #4
 8007752:	2b00      	cmp	r3, #0
 8007754:	bfbc      	itt	lt
 8007756:	580b      	ldrlt	r3, [r1, r0]
 8007758:	18c0      	addlt	r0, r0, r3
 800775a:	4770      	bx	lr

0800775c <_init>:
 800775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775e:	bf00      	nop
 8007760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007762:	bc08      	pop	{r3}
 8007764:	469e      	mov	lr, r3
 8007766:	4770      	bx	lr

08007768 <_fini>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	bf00      	nop
 800776c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776e:	bc08      	pop	{r3}
 8007770:	469e      	mov	lr, r3
 8007772:	4770      	bx	lr
