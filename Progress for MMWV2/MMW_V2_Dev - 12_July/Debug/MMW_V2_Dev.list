
MMW_V2_Dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003474  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08003580  08003580  00013580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a4  080036a4  000202f4  2**0
                  CONTENTS
  4 .ARM          00000000  080036a4  080036a4  000202f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036a4  080036a4  000202f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036a8  080036a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  080036ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200002f4  080039a0  000202f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  080039a0  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061fc  00000000  00000000  0002031d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000154f  00000000  00000000  00026519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  00027a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  00028130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e99  00000000  00000000  00028988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074a8  00000000  00000000  0003e821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e269  00000000  00000000  00045cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c3f32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a44  00000000  00000000  000c3f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002f4 	.word	0x200002f4
 8000128:	00000000 	.word	0x00000000
 800012c:	08003568 	.word	0x08003568

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002f8 	.word	0x200002f8
 8000148:	08003568 	.word	0x08003568

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <HAL_UART_TxCpltCallback>:
uint16_t F8[6] = {0x1FB,  0x102,  0x101,  0x103,  0x101,  0x1FB};
uint16_t F9[6] = {0x1FB,  0x102,  0x101,  0x102,  0x101,  0x1FB};
uint16_t F10[6] ={0x1FB,  0x102,  0x101,  0x101,  0x101,  0x1FB};

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit_IT(&huart2, Tx_data, sizeof(Tx_data));
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
	...

08000174 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart2, Rx_data_from_stc, 5); //restart the interupt reception mode
 800017c:	2205      	movs	r2, #5
 800017e:	4906      	ldr	r1, [pc, #24]	; (8000198 <HAL_UART_RxCpltCallback+0x24>)
 8000180:	4806      	ldr	r0, [pc, #24]	; (800019c <HAL_UART_RxCpltCallback+0x28>)
 8000182:	f002 fc8c 	bl	8002a9e <HAL_UART_Receive_DMA>
	HAL_UART_Receive_IT(&huart1,receivedData4G, 2);
 8000186:	2202      	movs	r2, #2
 8000188:	4905      	ldr	r1, [pc, #20]	; (80001a0 <HAL_UART_RxCpltCallback+0x2c>)
 800018a:	4806      	ldr	r0, [pc, #24]	; (80001a4 <HAL_UART_RxCpltCallback+0x30>)
 800018c:	f002 fc57 	bl	8002a3e <HAL_UART_Receive_IT>

}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	200004a8 	.word	0x200004a8
 800019c:	20000354 	.word	0x20000354
 80001a0:	200004b0 	.word	0x200004b0
 80001a4:	20000310 	.word	0x20000310

080001a8 <transmit_Data_to_DTU>:

void transmit_Data_to_DTU(){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0

	if (strcmp(Rx_data_from_stc, Drop_Success) == 0){
 80001ac:	491c      	ldr	r1, [pc, #112]	; (8000220 <transmit_Data_to_DTU+0x78>)
 80001ae:	481d      	ldr	r0, [pc, #116]	; (8000224 <transmit_Data_to_DTU+0x7c>)
 80001b0:	f7ff ffcc 	bl	800014c <strcmp>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d10b      	bne.n	80001d2 <transmit_Data_to_DTU+0x2a>
		HAL_UART_Transmit_IT(&huart1, "Hi\n", sizeof("Hi\n"));
 80001ba:	2204      	movs	r2, #4
 80001bc:	491a      	ldr	r1, [pc, #104]	; (8000228 <transmit_Data_to_DTU+0x80>)
 80001be:	481b      	ldr	r0, [pc, #108]	; (800022c <transmit_Data_to_DTU+0x84>)
 80001c0:	f002 fbf9 	bl	80029b6 <HAL_UART_Transmit_IT>
		dapat[0] = 2;
 80001c4:	4b1a      	ldr	r3, [pc, #104]	; (8000230 <transmit_Data_to_DTU+0x88>)
 80001c6:	2202      	movs	r2, #2
 80001c8:	701a      	strb	r2, [r3, #0]
		dapat[1] = 2;
 80001ca:	4b19      	ldr	r3, [pc, #100]	; (8000230 <transmit_Data_to_DTU+0x88>)
 80001cc:	2202      	movs	r2, #2
 80001ce:	705a      	strb	r2, [r3, #1]
		dapat[1] = 4;
	}
	else{

	}
}
 80001d0:	e024      	b.n	800021c <transmit_Data_to_DTU+0x74>
	else if (strcmp(Rx_data_from_stc, Drop_Not_Success) == 0){
 80001d2:	4918      	ldr	r1, [pc, #96]	; (8000234 <transmit_Data_to_DTU+0x8c>)
 80001d4:	4813      	ldr	r0, [pc, #76]	; (8000224 <transmit_Data_to_DTU+0x7c>)
 80001d6:	f7ff ffb9 	bl	800014c <strcmp>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d10b      	bne.n	80001f8 <transmit_Data_to_DTU+0x50>
		HAL_UART_Transmit_IT(&huart1, "ND\n", 5);
 80001e0:	2205      	movs	r2, #5
 80001e2:	4915      	ldr	r1, [pc, #84]	; (8000238 <transmit_Data_to_DTU+0x90>)
 80001e4:	4811      	ldr	r0, [pc, #68]	; (800022c <transmit_Data_to_DTU+0x84>)
 80001e6:	f002 fbe6 	bl	80029b6 <HAL_UART_Transmit_IT>
		dapat[0] = 3;
 80001ea:	4b11      	ldr	r3, [pc, #68]	; (8000230 <transmit_Data_to_DTU+0x88>)
 80001ec:	2203      	movs	r2, #3
 80001ee:	701a      	strb	r2, [r3, #0]
		dapat[1] = 3;
 80001f0:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <transmit_Data_to_DTU+0x88>)
 80001f2:	2203      	movs	r2, #3
 80001f4:	705a      	strb	r2, [r3, #1]
}
 80001f6:	e011      	b.n	800021c <transmit_Data_to_DTU+0x74>
	else if (strcmp(Rx_data_from_stc, Motor_Error) == 0){
 80001f8:	4910      	ldr	r1, [pc, #64]	; (800023c <transmit_Data_to_DTU+0x94>)
 80001fa:	480a      	ldr	r0, [pc, #40]	; (8000224 <transmit_Data_to_DTU+0x7c>)
 80001fc:	f7ff ffa6 	bl	800014c <strcmp>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d10a      	bne.n	800021c <transmit_Data_to_DTU+0x74>
		HAL_UART_Transmit_IT(&huart1, "ME\n", 5);
 8000206:	2205      	movs	r2, #5
 8000208:	490d      	ldr	r1, [pc, #52]	; (8000240 <transmit_Data_to_DTU+0x98>)
 800020a:	4808      	ldr	r0, [pc, #32]	; (800022c <transmit_Data_to_DTU+0x84>)
 800020c:	f002 fbd3 	bl	80029b6 <HAL_UART_Transmit_IT>
		dapat[0] = 4;
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <transmit_Data_to_DTU+0x88>)
 8000212:	2204      	movs	r2, #4
 8000214:	701a      	strb	r2, [r3, #0]
		dapat[1] = 4;
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <transmit_Data_to_DTU+0x88>)
 8000218:	2204      	movs	r2, #4
 800021a:	705a      	strb	r2, [r3, #1]
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	20000000 	.word	0x20000000
 8000224:	200004a8 	.word	0x200004a8
 8000228:	08003580 	.word	0x08003580
 800022c:	20000310 	.word	0x20000310
 8000230:	200004b4 	.word	0x200004b4
 8000234:	20000008 	.word	0x20000008
 8000238:	08003584 	.word	0x08003584
 800023c:	20000010 	.word	0x20000010
 8000240:	08003588 	.word	0x08003588

08000244 <receive_Command_from_DTU>:


void receive_Command_from_DTU(void){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0

	/////TRAY A/////
	if(strcmp(receivedData4G, "A1") == 0){       		//A1
 8000248:	49b3      	ldr	r1, [pc, #716]	; (8000518 <receive_Command_from_DTU+0x2d4>)
 800024a:	48b4      	ldr	r0, [pc, #720]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800024c:	f7ff ff7e 	bl	800014c <strcmp>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d110      	bne.n	8000278 <receive_Command_from_DTU+0x34>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A1, 6);
 8000256:	2206      	movs	r2, #6
 8000258:	49b1      	ldr	r1, [pc, #708]	; (8000520 <receive_Command_from_DTU+0x2dc>)
 800025a:	48b2      	ldr	r0, [pc, #712]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 800025c:	f002 fbab 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000260:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000264:	f001 f9ec 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000268:	4bac      	ldr	r3, [pc, #688]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800026e:	4bab      	ldr	r3, [pc, #684]	; (800051c <receive_Command_from_DTU+0x2d8>)
 8000270:	2200      	movs	r2, #0
 8000272:	705a      	strb	r2, [r3, #1]

	 else {

	 }

}
 8000274:	f000 be22 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "A2") == 0){       //A2
 8000278:	49ab      	ldr	r1, [pc, #684]	; (8000528 <receive_Command_from_DTU+0x2e4>)
 800027a:	48a8      	ldr	r0, [pc, #672]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800027c:	f7ff ff66 	bl	800014c <strcmp>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d110      	bne.n	80002a8 <receive_Command_from_DTU+0x64>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A2, 6);
 8000286:	2206      	movs	r2, #6
 8000288:	49a8      	ldr	r1, [pc, #672]	; (800052c <receive_Command_from_DTU+0x2e8>)
 800028a:	48a6      	ldr	r0, [pc, #664]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 800028c:	f002 fb93 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000290:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000294:	f001 f9d4 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000298:	4ba0      	ldr	r3, [pc, #640]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800029e:	4b9f      	ldr	r3, [pc, #636]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	705a      	strb	r2, [r3, #1]
}
 80002a4:	f000 be0a 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "A3") == 0){       //A3
 80002a8:	49a1      	ldr	r1, [pc, #644]	; (8000530 <receive_Command_from_DTU+0x2ec>)
 80002aa:	489c      	ldr	r0, [pc, #624]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80002ac:	f7ff ff4e 	bl	800014c <strcmp>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d110      	bne.n	80002d8 <receive_Command_from_DTU+0x94>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A3, 6);
 80002b6:	2206      	movs	r2, #6
 80002b8:	499e      	ldr	r1, [pc, #632]	; (8000534 <receive_Command_from_DTU+0x2f0>)
 80002ba:	489a      	ldr	r0, [pc, #616]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 80002bc:	f002 fb7b 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80002c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002c4:	f001 f9bc 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80002c8:	4b94      	ldr	r3, [pc, #592]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80002ce:	4b93      	ldr	r3, [pc, #588]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	705a      	strb	r2, [r3, #1]
}
 80002d4:	f000 bdf2 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "A4") == 0){       //A4
 80002d8:	4997      	ldr	r1, [pc, #604]	; (8000538 <receive_Command_from_DTU+0x2f4>)
 80002da:	4890      	ldr	r0, [pc, #576]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80002dc:	f7ff ff36 	bl	800014c <strcmp>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d110      	bne.n	8000308 <receive_Command_from_DTU+0xc4>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A4, 6);
 80002e6:	2206      	movs	r2, #6
 80002e8:	4994      	ldr	r1, [pc, #592]	; (800053c <receive_Command_from_DTU+0x2f8>)
 80002ea:	488e      	ldr	r0, [pc, #568]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 80002ec:	f002 fb63 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80002f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002f4:	f001 f9a4 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80002f8:	4b88      	ldr	r3, [pc, #544]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80002fe:	4b87      	ldr	r3, [pc, #540]	; (800051c <receive_Command_from_DTU+0x2d8>)
 8000300:	2200      	movs	r2, #0
 8000302:	705a      	strb	r2, [r3, #1]
}
 8000304:	f000 bdda 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "A5") == 0){       //A5
 8000308:	498d      	ldr	r1, [pc, #564]	; (8000540 <receive_Command_from_DTU+0x2fc>)
 800030a:	4884      	ldr	r0, [pc, #528]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800030c:	f7ff ff1e 	bl	800014c <strcmp>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d110      	bne.n	8000338 <receive_Command_from_DTU+0xf4>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A5, 6);
 8000316:	2206      	movs	r2, #6
 8000318:	498a      	ldr	r1, [pc, #552]	; (8000544 <receive_Command_from_DTU+0x300>)
 800031a:	4882      	ldr	r0, [pc, #520]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 800031c:	f002 fb4b 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000320:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000324:	f001 f98c 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000328:	4b7c      	ldr	r3, [pc, #496]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800032a:	2200      	movs	r2, #0
 800032c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800032e:	4b7b      	ldr	r3, [pc, #492]	; (800051c <receive_Command_from_DTU+0x2d8>)
 8000330:	2200      	movs	r2, #0
 8000332:	705a      	strb	r2, [r3, #1]
}
 8000334:	f000 bdc2 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "A6") == 0){       //A6
 8000338:	4983      	ldr	r1, [pc, #524]	; (8000548 <receive_Command_from_DTU+0x304>)
 800033a:	4878      	ldr	r0, [pc, #480]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800033c:	f7ff ff06 	bl	800014c <strcmp>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d110      	bne.n	8000368 <receive_Command_from_DTU+0x124>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A6, 6);
 8000346:	2206      	movs	r2, #6
 8000348:	4980      	ldr	r1, [pc, #512]	; (800054c <receive_Command_from_DTU+0x308>)
 800034a:	4876      	ldr	r0, [pc, #472]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 800034c:	f002 fb33 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f001 f974 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000358:	4b70      	ldr	r3, [pc, #448]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800035e:	4b6f      	ldr	r3, [pc, #444]	; (800051c <receive_Command_from_DTU+0x2d8>)
 8000360:	2200      	movs	r2, #0
 8000362:	705a      	strb	r2, [r3, #1]
}
 8000364:	f000 bdaa 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "A7") == 0){       //A7
 8000368:	4979      	ldr	r1, [pc, #484]	; (8000550 <receive_Command_from_DTU+0x30c>)
 800036a:	486c      	ldr	r0, [pc, #432]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800036c:	f7ff feee 	bl	800014c <strcmp>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d110      	bne.n	8000398 <receive_Command_from_DTU+0x154>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A7, 6);
 8000376:	2206      	movs	r2, #6
 8000378:	4976      	ldr	r1, [pc, #472]	; (8000554 <receive_Command_from_DTU+0x310>)
 800037a:	486a      	ldr	r0, [pc, #424]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 800037c:	f002 fb1b 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000380:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000384:	f001 f95c 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000388:	4b64      	ldr	r3, [pc, #400]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800038a:	2200      	movs	r2, #0
 800038c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800038e:	4b63      	ldr	r3, [pc, #396]	; (800051c <receive_Command_from_DTU+0x2d8>)
 8000390:	2200      	movs	r2, #0
 8000392:	705a      	strb	r2, [r3, #1]
}
 8000394:	f000 bd92 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "A8") == 0){       //A8
 8000398:	496f      	ldr	r1, [pc, #444]	; (8000558 <receive_Command_from_DTU+0x314>)
 800039a:	4860      	ldr	r0, [pc, #384]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800039c:	f7ff fed6 	bl	800014c <strcmp>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d110      	bne.n	80003c8 <receive_Command_from_DTU+0x184>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A8, 6);
 80003a6:	2206      	movs	r2, #6
 80003a8:	496c      	ldr	r1, [pc, #432]	; (800055c <receive_Command_from_DTU+0x318>)
 80003aa:	485e      	ldr	r0, [pc, #376]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 80003ac:	f002 fb03 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80003b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003b4:	f001 f944 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80003b8:	4b58      	ldr	r3, [pc, #352]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80003be:	4b57      	ldr	r3, [pc, #348]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	705a      	strb	r2, [r3, #1]
}
 80003c4:	f000 bd7a 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "A9") == 0){       //A9
 80003c8:	4965      	ldr	r1, [pc, #404]	; (8000560 <receive_Command_from_DTU+0x31c>)
 80003ca:	4854      	ldr	r0, [pc, #336]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80003cc:	f7ff febe 	bl	800014c <strcmp>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d110      	bne.n	80003f8 <receive_Command_from_DTU+0x1b4>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A9, 6);
 80003d6:	2206      	movs	r2, #6
 80003d8:	4962      	ldr	r1, [pc, #392]	; (8000564 <receive_Command_from_DTU+0x320>)
 80003da:	4852      	ldr	r0, [pc, #328]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 80003dc:	f002 faeb 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80003e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003e4:	f001 f92c 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80003e8:	4b4c      	ldr	r3, [pc, #304]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80003ee:	4b4b      	ldr	r3, [pc, #300]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	705a      	strb	r2, [r3, #1]
}
 80003f4:	f000 bd62 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "AA") == 0){       //A10
 80003f8:	495b      	ldr	r1, [pc, #364]	; (8000568 <receive_Command_from_DTU+0x324>)
 80003fa:	4848      	ldr	r0, [pc, #288]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80003fc:	f7ff fea6 	bl	800014c <strcmp>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d110      	bne.n	8000428 <receive_Command_from_DTU+0x1e4>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)A10, 6);
 8000406:	2206      	movs	r2, #6
 8000408:	4958      	ldr	r1, [pc, #352]	; (800056c <receive_Command_from_DTU+0x328>)
 800040a:	4846      	ldr	r0, [pc, #280]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 800040c:	f002 fad3 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000410:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000414:	f001 f914 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000418:	4b40      	ldr	r3, [pc, #256]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800041a:	2200      	movs	r2, #0
 800041c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800041e:	4b3f      	ldr	r3, [pc, #252]	; (800051c <receive_Command_from_DTU+0x2d8>)
 8000420:	2200      	movs	r2, #0
 8000422:	705a      	strb	r2, [r3, #1]
}
 8000424:	f000 bd4a 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "B1") == 0){       //B1
 8000428:	4951      	ldr	r1, [pc, #324]	; (8000570 <receive_Command_from_DTU+0x32c>)
 800042a:	483c      	ldr	r0, [pc, #240]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800042c:	f7ff fe8e 	bl	800014c <strcmp>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d110      	bne.n	8000458 <receive_Command_from_DTU+0x214>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B1, 6);
 8000436:	2206      	movs	r2, #6
 8000438:	494e      	ldr	r1, [pc, #312]	; (8000574 <receive_Command_from_DTU+0x330>)
 800043a:	483a      	ldr	r0, [pc, #232]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 800043c:	f002 fabb 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000440:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000444:	f001 f8fc 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000448:	4b34      	ldr	r3, [pc, #208]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800044a:	2200      	movs	r2, #0
 800044c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800044e:	4b33      	ldr	r3, [pc, #204]	; (800051c <receive_Command_from_DTU+0x2d8>)
 8000450:	2200      	movs	r2, #0
 8000452:	705a      	strb	r2, [r3, #1]
}
 8000454:	f000 bd32 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "B2") == 0){       //B2
 8000458:	4947      	ldr	r1, [pc, #284]	; (8000578 <receive_Command_from_DTU+0x334>)
 800045a:	4830      	ldr	r0, [pc, #192]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800045c:	f7ff fe76 	bl	800014c <strcmp>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d110      	bne.n	8000488 <receive_Command_from_DTU+0x244>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B2, 6);
 8000466:	2206      	movs	r2, #6
 8000468:	4944      	ldr	r1, [pc, #272]	; (800057c <receive_Command_from_DTU+0x338>)
 800046a:	482e      	ldr	r0, [pc, #184]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 800046c:	f002 faa3 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000470:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000474:	f001 f8e4 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000478:	4b28      	ldr	r3, [pc, #160]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800047e:	4b27      	ldr	r3, [pc, #156]	; (800051c <receive_Command_from_DTU+0x2d8>)
 8000480:	2200      	movs	r2, #0
 8000482:	705a      	strb	r2, [r3, #1]
}
 8000484:	f000 bd1a 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "B3") == 0){       //B3
 8000488:	493d      	ldr	r1, [pc, #244]	; (8000580 <receive_Command_from_DTU+0x33c>)
 800048a:	4824      	ldr	r0, [pc, #144]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800048c:	f7ff fe5e 	bl	800014c <strcmp>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d110      	bne.n	80004b8 <receive_Command_from_DTU+0x274>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B3, 6);
 8000496:	2206      	movs	r2, #6
 8000498:	493a      	ldr	r1, [pc, #232]	; (8000584 <receive_Command_from_DTU+0x340>)
 800049a:	4822      	ldr	r0, [pc, #136]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 800049c:	f002 fa8b 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80004a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004a4:	f001 f8cc 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80004a8:	4b1c      	ldr	r3, [pc, #112]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80004ae:	4b1b      	ldr	r3, [pc, #108]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	705a      	strb	r2, [r3, #1]
}
 80004b4:	f000 bd02 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "B4") == 0){       //B4
 80004b8:	4933      	ldr	r1, [pc, #204]	; (8000588 <receive_Command_from_DTU+0x344>)
 80004ba:	4818      	ldr	r0, [pc, #96]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80004bc:	f7ff fe46 	bl	800014c <strcmp>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d110      	bne.n	80004e8 <receive_Command_from_DTU+0x2a4>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B4, 6);
 80004c6:	2206      	movs	r2, #6
 80004c8:	4930      	ldr	r1, [pc, #192]	; (800058c <receive_Command_from_DTU+0x348>)
 80004ca:	4816      	ldr	r0, [pc, #88]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 80004cc:	f002 fa73 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80004d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004d4:	f001 f8b4 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80004d8:	4b10      	ldr	r3, [pc, #64]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	705a      	strb	r2, [r3, #1]
}
 80004e4:	f000 bcea 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "B5") == 0){       //B5
 80004e8:	4929      	ldr	r1, [pc, #164]	; (8000590 <receive_Command_from_DTU+0x34c>)
 80004ea:	480c      	ldr	r0, [pc, #48]	; (800051c <receive_Command_from_DTU+0x2d8>)
 80004ec:	f7ff fe2e 	bl	800014c <strcmp>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d150      	bne.n	8000598 <receive_Command_from_DTU+0x354>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B5, 6);
 80004f6:	2206      	movs	r2, #6
 80004f8:	4926      	ldr	r1, [pc, #152]	; (8000594 <receive_Command_from_DTU+0x350>)
 80004fa:	480a      	ldr	r0, [pc, #40]	; (8000524 <receive_Command_from_DTU+0x2e0>)
 80004fc:	f002 fa5b 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000500:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000504:	f001 f89c 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <receive_Command_from_DTU+0x2d8>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800050e:	4b03      	ldr	r3, [pc, #12]	; (800051c <receive_Command_from_DTU+0x2d8>)
 8000510:	2200      	movs	r2, #0
 8000512:	705a      	strb	r2, [r3, #1]
}
 8000514:	f000 bcd2 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
 8000518:	0800358c 	.word	0x0800358c
 800051c:	200004b0 	.word	0x200004b0
 8000520:	20000018 	.word	0x20000018
 8000524:	20000354 	.word	0x20000354
 8000528:	08003590 	.word	0x08003590
 800052c:	20000024 	.word	0x20000024
 8000530:	08003594 	.word	0x08003594
 8000534:	20000030 	.word	0x20000030
 8000538:	08003598 	.word	0x08003598
 800053c:	2000003c 	.word	0x2000003c
 8000540:	0800359c 	.word	0x0800359c
 8000544:	20000048 	.word	0x20000048
 8000548:	080035a0 	.word	0x080035a0
 800054c:	20000054 	.word	0x20000054
 8000550:	080035a4 	.word	0x080035a4
 8000554:	20000060 	.word	0x20000060
 8000558:	080035a8 	.word	0x080035a8
 800055c:	2000006c 	.word	0x2000006c
 8000560:	080035ac 	.word	0x080035ac
 8000564:	20000078 	.word	0x20000078
 8000568:	080035b0 	.word	0x080035b0
 800056c:	20000084 	.word	0x20000084
 8000570:	080035b4 	.word	0x080035b4
 8000574:	20000090 	.word	0x20000090
 8000578:	080035b8 	.word	0x080035b8
 800057c:	2000009c 	.word	0x2000009c
 8000580:	080035bc 	.word	0x080035bc
 8000584:	200000a8 	.word	0x200000a8
 8000588:	080035c0 	.word	0x080035c0
 800058c:	200000b4 	.word	0x200000b4
 8000590:	080035c4 	.word	0x080035c4
 8000594:	200000c0 	.word	0x200000c0
	 else if (strcmp(receivedData4G, "B6") == 0){       //B6
 8000598:	49af      	ldr	r1, [pc, #700]	; (8000858 <receive_Command_from_DTU+0x614>)
 800059a:	48b0      	ldr	r0, [pc, #704]	; (800085c <receive_Command_from_DTU+0x618>)
 800059c:	f7ff fdd6 	bl	800014c <strcmp>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d110      	bne.n	80005c8 <receive_Command_from_DTU+0x384>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B6, 6);
 80005a6:	2206      	movs	r2, #6
 80005a8:	49ad      	ldr	r1, [pc, #692]	; (8000860 <receive_Command_from_DTU+0x61c>)
 80005aa:	48ae      	ldr	r0, [pc, #696]	; (8000864 <receive_Command_from_DTU+0x620>)
 80005ac:	f002 fa03 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80005b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005b4:	f001 f844 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80005b8:	4ba8      	ldr	r3, [pc, #672]	; (800085c <receive_Command_from_DTU+0x618>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80005be:	4ba7      	ldr	r3, [pc, #668]	; (800085c <receive_Command_from_DTU+0x618>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	705a      	strb	r2, [r3, #1]
}
 80005c4:	f000 bc7a 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "B7") == 0){       //B7
 80005c8:	49a7      	ldr	r1, [pc, #668]	; (8000868 <receive_Command_from_DTU+0x624>)
 80005ca:	48a4      	ldr	r0, [pc, #656]	; (800085c <receive_Command_from_DTU+0x618>)
 80005cc:	f7ff fdbe 	bl	800014c <strcmp>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d110      	bne.n	80005f8 <receive_Command_from_DTU+0x3b4>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B7, 6);
 80005d6:	2206      	movs	r2, #6
 80005d8:	49a4      	ldr	r1, [pc, #656]	; (800086c <receive_Command_from_DTU+0x628>)
 80005da:	48a2      	ldr	r0, [pc, #648]	; (8000864 <receive_Command_from_DTU+0x620>)
 80005dc:	f002 f9eb 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80005e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005e4:	f001 f82c 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80005e8:	4b9c      	ldr	r3, [pc, #624]	; (800085c <receive_Command_from_DTU+0x618>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80005ee:	4b9b      	ldr	r3, [pc, #620]	; (800085c <receive_Command_from_DTU+0x618>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	705a      	strb	r2, [r3, #1]
}
 80005f4:	f000 bc62 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "B8") == 0){       //B8
 80005f8:	499d      	ldr	r1, [pc, #628]	; (8000870 <receive_Command_from_DTU+0x62c>)
 80005fa:	4898      	ldr	r0, [pc, #608]	; (800085c <receive_Command_from_DTU+0x618>)
 80005fc:	f7ff fda6 	bl	800014c <strcmp>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d110      	bne.n	8000628 <receive_Command_from_DTU+0x3e4>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B8, 6);
 8000606:	2206      	movs	r2, #6
 8000608:	499a      	ldr	r1, [pc, #616]	; (8000874 <receive_Command_from_DTU+0x630>)
 800060a:	4896      	ldr	r0, [pc, #600]	; (8000864 <receive_Command_from_DTU+0x620>)
 800060c:	f002 f9d3 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000610:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000614:	f001 f814 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000618:	4b90      	ldr	r3, [pc, #576]	; (800085c <receive_Command_from_DTU+0x618>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800061e:	4b8f      	ldr	r3, [pc, #572]	; (800085c <receive_Command_from_DTU+0x618>)
 8000620:	2200      	movs	r2, #0
 8000622:	705a      	strb	r2, [r3, #1]
}
 8000624:	f000 bc4a 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "B9") == 0){       //B9
 8000628:	4993      	ldr	r1, [pc, #588]	; (8000878 <receive_Command_from_DTU+0x634>)
 800062a:	488c      	ldr	r0, [pc, #560]	; (800085c <receive_Command_from_DTU+0x618>)
 800062c:	f7ff fd8e 	bl	800014c <strcmp>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d110      	bne.n	8000658 <receive_Command_from_DTU+0x414>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B9, 6);
 8000636:	2206      	movs	r2, #6
 8000638:	4990      	ldr	r1, [pc, #576]	; (800087c <receive_Command_from_DTU+0x638>)
 800063a:	488a      	ldr	r0, [pc, #552]	; (8000864 <receive_Command_from_DTU+0x620>)
 800063c:	f002 f9bb 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000640:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000644:	f000 fffc 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000648:	4b84      	ldr	r3, [pc, #528]	; (800085c <receive_Command_from_DTU+0x618>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800064e:	4b83      	ldr	r3, [pc, #524]	; (800085c <receive_Command_from_DTU+0x618>)
 8000650:	2200      	movs	r2, #0
 8000652:	705a      	strb	r2, [r3, #1]
}
 8000654:	f000 bc32 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "BB") == 0){       //B10
 8000658:	4989      	ldr	r1, [pc, #548]	; (8000880 <receive_Command_from_DTU+0x63c>)
 800065a:	4880      	ldr	r0, [pc, #512]	; (800085c <receive_Command_from_DTU+0x618>)
 800065c:	f7ff fd76 	bl	800014c <strcmp>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d110      	bne.n	8000688 <receive_Command_from_DTU+0x444>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)B10, 6);
 8000666:	2206      	movs	r2, #6
 8000668:	4986      	ldr	r1, [pc, #536]	; (8000884 <receive_Command_from_DTU+0x640>)
 800066a:	487e      	ldr	r0, [pc, #504]	; (8000864 <receive_Command_from_DTU+0x620>)
 800066c:	f002 f9a3 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000670:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000674:	f000 ffe4 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000678:	4b78      	ldr	r3, [pc, #480]	; (800085c <receive_Command_from_DTU+0x618>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800067e:	4b77      	ldr	r3, [pc, #476]	; (800085c <receive_Command_from_DTU+0x618>)
 8000680:	2200      	movs	r2, #0
 8000682:	705a      	strb	r2, [r3, #1]
}
 8000684:	f000 bc1a 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "C1") == 0){       //C1
 8000688:	497f      	ldr	r1, [pc, #508]	; (8000888 <receive_Command_from_DTU+0x644>)
 800068a:	4874      	ldr	r0, [pc, #464]	; (800085c <receive_Command_from_DTU+0x618>)
 800068c:	f7ff fd5e 	bl	800014c <strcmp>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d110      	bne.n	80006b8 <receive_Command_from_DTU+0x474>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C1, 6);
 8000696:	2206      	movs	r2, #6
 8000698:	497c      	ldr	r1, [pc, #496]	; (800088c <receive_Command_from_DTU+0x648>)
 800069a:	4872      	ldr	r0, [pc, #456]	; (8000864 <receive_Command_from_DTU+0x620>)
 800069c:	f002 f98b 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80006a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006a4:	f000 ffcc 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80006a8:	4b6c      	ldr	r3, [pc, #432]	; (800085c <receive_Command_from_DTU+0x618>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80006ae:	4b6b      	ldr	r3, [pc, #428]	; (800085c <receive_Command_from_DTU+0x618>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	705a      	strb	r2, [r3, #1]
}
 80006b4:	f000 bc02 	b.w	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "C2") == 0){       //C2
 80006b8:	4975      	ldr	r1, [pc, #468]	; (8000890 <receive_Command_from_DTU+0x64c>)
 80006ba:	4868      	ldr	r0, [pc, #416]	; (800085c <receive_Command_from_DTU+0x618>)
 80006bc:	f7ff fd46 	bl	800014c <strcmp>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d10f      	bne.n	80006e6 <receive_Command_from_DTU+0x4a2>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C2, 6);
 80006c6:	2206      	movs	r2, #6
 80006c8:	4972      	ldr	r1, [pc, #456]	; (8000894 <receive_Command_from_DTU+0x650>)
 80006ca:	4866      	ldr	r0, [pc, #408]	; (8000864 <receive_Command_from_DTU+0x620>)
 80006cc:	f002 f973 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80006d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006d4:	f000 ffb4 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80006d8:	4b60      	ldr	r3, [pc, #384]	; (800085c <receive_Command_from_DTU+0x618>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80006de:	4b5f      	ldr	r3, [pc, #380]	; (800085c <receive_Command_from_DTU+0x618>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	705a      	strb	r2, [r3, #1]
}
 80006e4:	e3ea      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "C3") == 0){       //C3
 80006e6:	496c      	ldr	r1, [pc, #432]	; (8000898 <receive_Command_from_DTU+0x654>)
 80006e8:	485c      	ldr	r0, [pc, #368]	; (800085c <receive_Command_from_DTU+0x618>)
 80006ea:	f7ff fd2f 	bl	800014c <strcmp>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10f      	bne.n	8000714 <receive_Command_from_DTU+0x4d0>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C3, 6);
 80006f4:	2206      	movs	r2, #6
 80006f6:	4969      	ldr	r1, [pc, #420]	; (800089c <receive_Command_from_DTU+0x658>)
 80006f8:	485a      	ldr	r0, [pc, #360]	; (8000864 <receive_Command_from_DTU+0x620>)
 80006fa:	f002 f95c 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80006fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000702:	f000 ff9d 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000706:	4b55      	ldr	r3, [pc, #340]	; (800085c <receive_Command_from_DTU+0x618>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800070c:	4b53      	ldr	r3, [pc, #332]	; (800085c <receive_Command_from_DTU+0x618>)
 800070e:	2200      	movs	r2, #0
 8000710:	705a      	strb	r2, [r3, #1]
}
 8000712:	e3d3      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "C4") == 0){       //C4
 8000714:	4962      	ldr	r1, [pc, #392]	; (80008a0 <receive_Command_from_DTU+0x65c>)
 8000716:	4851      	ldr	r0, [pc, #324]	; (800085c <receive_Command_from_DTU+0x618>)
 8000718:	f7ff fd18 	bl	800014c <strcmp>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d10f      	bne.n	8000742 <receive_Command_from_DTU+0x4fe>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C4, 6);
 8000722:	2206      	movs	r2, #6
 8000724:	495f      	ldr	r1, [pc, #380]	; (80008a4 <receive_Command_from_DTU+0x660>)
 8000726:	484f      	ldr	r0, [pc, #316]	; (8000864 <receive_Command_from_DTU+0x620>)
 8000728:	f002 f945 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 800072c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000730:	f000 ff86 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000734:	4b49      	ldr	r3, [pc, #292]	; (800085c <receive_Command_from_DTU+0x618>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800073a:	4b48      	ldr	r3, [pc, #288]	; (800085c <receive_Command_from_DTU+0x618>)
 800073c:	2200      	movs	r2, #0
 800073e:	705a      	strb	r2, [r3, #1]
}
 8000740:	e3bc      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "C5") == 0){       //C5
 8000742:	4959      	ldr	r1, [pc, #356]	; (80008a8 <receive_Command_from_DTU+0x664>)
 8000744:	4845      	ldr	r0, [pc, #276]	; (800085c <receive_Command_from_DTU+0x618>)
 8000746:	f7ff fd01 	bl	800014c <strcmp>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d10f      	bne.n	8000770 <receive_Command_from_DTU+0x52c>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C5, 6);
 8000750:	2206      	movs	r2, #6
 8000752:	4956      	ldr	r1, [pc, #344]	; (80008ac <receive_Command_from_DTU+0x668>)
 8000754:	4843      	ldr	r0, [pc, #268]	; (8000864 <receive_Command_from_DTU+0x620>)
 8000756:	f002 f92e 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 800075a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800075e:	f000 ff6f 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000762:	4b3e      	ldr	r3, [pc, #248]	; (800085c <receive_Command_from_DTU+0x618>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000768:	4b3c      	ldr	r3, [pc, #240]	; (800085c <receive_Command_from_DTU+0x618>)
 800076a:	2200      	movs	r2, #0
 800076c:	705a      	strb	r2, [r3, #1]
}
 800076e:	e3a5      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "C6") == 0){       //C6
 8000770:	494f      	ldr	r1, [pc, #316]	; (80008b0 <receive_Command_from_DTU+0x66c>)
 8000772:	483a      	ldr	r0, [pc, #232]	; (800085c <receive_Command_from_DTU+0x618>)
 8000774:	f7ff fcea 	bl	800014c <strcmp>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d10f      	bne.n	800079e <receive_Command_from_DTU+0x55a>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C6, 6);
 800077e:	2206      	movs	r2, #6
 8000780:	494c      	ldr	r1, [pc, #304]	; (80008b4 <receive_Command_from_DTU+0x670>)
 8000782:	4838      	ldr	r0, [pc, #224]	; (8000864 <receive_Command_from_DTU+0x620>)
 8000784:	f002 f917 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000788:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800078c:	f000 ff58 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000790:	4b32      	ldr	r3, [pc, #200]	; (800085c <receive_Command_from_DTU+0x618>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000796:	4b31      	ldr	r3, [pc, #196]	; (800085c <receive_Command_from_DTU+0x618>)
 8000798:	2200      	movs	r2, #0
 800079a:	705a      	strb	r2, [r3, #1]
}
 800079c:	e38e      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "C7") == 0){       //C7
 800079e:	4946      	ldr	r1, [pc, #280]	; (80008b8 <receive_Command_from_DTU+0x674>)
 80007a0:	482e      	ldr	r0, [pc, #184]	; (800085c <receive_Command_from_DTU+0x618>)
 80007a2:	f7ff fcd3 	bl	800014c <strcmp>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d10f      	bne.n	80007cc <receive_Command_from_DTU+0x588>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C7, 6);
 80007ac:	2206      	movs	r2, #6
 80007ae:	4943      	ldr	r1, [pc, #268]	; (80008bc <receive_Command_from_DTU+0x678>)
 80007b0:	482c      	ldr	r0, [pc, #176]	; (8000864 <receive_Command_from_DTU+0x620>)
 80007b2:	f002 f900 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80007b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007ba:	f000 ff41 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80007be:	4b27      	ldr	r3, [pc, #156]	; (800085c <receive_Command_from_DTU+0x618>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <receive_Command_from_DTU+0x618>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	705a      	strb	r2, [r3, #1]
}
 80007ca:	e377      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "C8") == 0){       //C8
 80007cc:	493c      	ldr	r1, [pc, #240]	; (80008c0 <receive_Command_from_DTU+0x67c>)
 80007ce:	4823      	ldr	r0, [pc, #140]	; (800085c <receive_Command_from_DTU+0x618>)
 80007d0:	f7ff fcbc 	bl	800014c <strcmp>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d10f      	bne.n	80007fa <receive_Command_from_DTU+0x5b6>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C8, 6);
 80007da:	2206      	movs	r2, #6
 80007dc:	4939      	ldr	r1, [pc, #228]	; (80008c4 <receive_Command_from_DTU+0x680>)
 80007de:	4821      	ldr	r0, [pc, #132]	; (8000864 <receive_Command_from_DTU+0x620>)
 80007e0:	f002 f8e9 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80007e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007e8:	f000 ff2a 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <receive_Command_from_DTU+0x618>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <receive_Command_from_DTU+0x618>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	705a      	strb	r2, [r3, #1]
}
 80007f8:	e360      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "C9") == 0){       //C9
 80007fa:	4933      	ldr	r1, [pc, #204]	; (80008c8 <receive_Command_from_DTU+0x684>)
 80007fc:	4817      	ldr	r0, [pc, #92]	; (800085c <receive_Command_from_DTU+0x618>)
 80007fe:	f7ff fca5 	bl	800014c <strcmp>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d10f      	bne.n	8000828 <receive_Command_from_DTU+0x5e4>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C9, 6);
 8000808:	2206      	movs	r2, #6
 800080a:	4930      	ldr	r1, [pc, #192]	; (80008cc <receive_Command_from_DTU+0x688>)
 800080c:	4815      	ldr	r0, [pc, #84]	; (8000864 <receive_Command_from_DTU+0x620>)
 800080e:	f002 f8d2 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000812:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000816:	f000 ff13 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <receive_Command_from_DTU+0x618>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <receive_Command_from_DTU+0x618>)
 8000822:	2200      	movs	r2, #0
 8000824:	705a      	strb	r2, [r3, #1]
}
 8000826:	e349      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "CC") == 0){       //C10
 8000828:	4929      	ldr	r1, [pc, #164]	; (80008d0 <receive_Command_from_DTU+0x68c>)
 800082a:	480c      	ldr	r0, [pc, #48]	; (800085c <receive_Command_from_DTU+0x618>)
 800082c:	f7ff fc8e 	bl	800014c <strcmp>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d150      	bne.n	80008d8 <receive_Command_from_DTU+0x694>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)C10, 6);
 8000836:	2206      	movs	r2, #6
 8000838:	4926      	ldr	r1, [pc, #152]	; (80008d4 <receive_Command_from_DTU+0x690>)
 800083a:	480a      	ldr	r0, [pc, #40]	; (8000864 <receive_Command_from_DTU+0x620>)
 800083c:	f002 f8bb 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000840:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000844:	f000 fefc 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <receive_Command_from_DTU+0x618>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800084e:	4b03      	ldr	r3, [pc, #12]	; (800085c <receive_Command_from_DTU+0x618>)
 8000850:	2200      	movs	r2, #0
 8000852:	705a      	strb	r2, [r3, #1]
}
 8000854:	e332      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
 8000856:	bf00      	nop
 8000858:	080035c8 	.word	0x080035c8
 800085c:	200004b0 	.word	0x200004b0
 8000860:	200000cc 	.word	0x200000cc
 8000864:	20000354 	.word	0x20000354
 8000868:	080035cc 	.word	0x080035cc
 800086c:	200000d8 	.word	0x200000d8
 8000870:	080035d0 	.word	0x080035d0
 8000874:	200000e4 	.word	0x200000e4
 8000878:	080035d4 	.word	0x080035d4
 800087c:	200000f0 	.word	0x200000f0
 8000880:	080035d8 	.word	0x080035d8
 8000884:	200000fc 	.word	0x200000fc
 8000888:	080035dc 	.word	0x080035dc
 800088c:	20000108 	.word	0x20000108
 8000890:	080035e0 	.word	0x080035e0
 8000894:	20000114 	.word	0x20000114
 8000898:	080035e4 	.word	0x080035e4
 800089c:	20000120 	.word	0x20000120
 80008a0:	080035e8 	.word	0x080035e8
 80008a4:	2000012c 	.word	0x2000012c
 80008a8:	080035ec 	.word	0x080035ec
 80008ac:	20000138 	.word	0x20000138
 80008b0:	080035f0 	.word	0x080035f0
 80008b4:	20000144 	.word	0x20000144
 80008b8:	080035f4 	.word	0x080035f4
 80008bc:	20000150 	.word	0x20000150
 80008c0:	080035f8 	.word	0x080035f8
 80008c4:	2000015c 	.word	0x2000015c
 80008c8:	080035fc 	.word	0x080035fc
 80008cc:	20000168 	.word	0x20000168
 80008d0:	08003600 	.word	0x08003600
 80008d4:	20000174 	.word	0x20000174
	 else if (strcmp(receivedData4G, "D1") == 0){       //D1
 80008d8:	49ac      	ldr	r1, [pc, #688]	; (8000b8c <receive_Command_from_DTU+0x948>)
 80008da:	48ad      	ldr	r0, [pc, #692]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 80008dc:	f7ff fc36 	bl	800014c <strcmp>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10f      	bne.n	8000906 <receive_Command_from_DTU+0x6c2>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D1, 6);
 80008e6:	2206      	movs	r2, #6
 80008e8:	49aa      	ldr	r1, [pc, #680]	; (8000b94 <receive_Command_from_DTU+0x950>)
 80008ea:	48ab      	ldr	r0, [pc, #684]	; (8000b98 <receive_Command_from_DTU+0x954>)
 80008ec:	f002 f863 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80008f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008f4:	f000 fea4 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80008f8:	4ba5      	ldr	r3, [pc, #660]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80008fe:	4ba4      	ldr	r3, [pc, #656]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000900:	2200      	movs	r2, #0
 8000902:	705a      	strb	r2, [r3, #1]
}
 8000904:	e2da      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "D2") == 0){       //D2
 8000906:	49a5      	ldr	r1, [pc, #660]	; (8000b9c <receive_Command_from_DTU+0x958>)
 8000908:	48a1      	ldr	r0, [pc, #644]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 800090a:	f7ff fc1f 	bl	800014c <strcmp>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d10f      	bne.n	8000934 <receive_Command_from_DTU+0x6f0>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D2, 6);
 8000914:	2206      	movs	r2, #6
 8000916:	49a2      	ldr	r1, [pc, #648]	; (8000ba0 <receive_Command_from_DTU+0x95c>)
 8000918:	489f      	ldr	r0, [pc, #636]	; (8000b98 <receive_Command_from_DTU+0x954>)
 800091a:	f002 f84c 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 800091e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000922:	f000 fe8d 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000926:	4b9a      	ldr	r3, [pc, #616]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800092c:	4b98      	ldr	r3, [pc, #608]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 800092e:	2200      	movs	r2, #0
 8000930:	705a      	strb	r2, [r3, #1]
}
 8000932:	e2c3      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "D3") == 0){       //D3
 8000934:	499b      	ldr	r1, [pc, #620]	; (8000ba4 <receive_Command_from_DTU+0x960>)
 8000936:	4896      	ldr	r0, [pc, #600]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000938:	f7ff fc08 	bl	800014c <strcmp>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d10f      	bne.n	8000962 <receive_Command_from_DTU+0x71e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D3, 6);
 8000942:	2206      	movs	r2, #6
 8000944:	4998      	ldr	r1, [pc, #608]	; (8000ba8 <receive_Command_from_DTU+0x964>)
 8000946:	4894      	ldr	r0, [pc, #592]	; (8000b98 <receive_Command_from_DTU+0x954>)
 8000948:	f002 f835 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 800094c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000950:	f000 fe76 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000954:	4b8e      	ldr	r3, [pc, #568]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 800095a:	4b8d      	ldr	r3, [pc, #564]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 800095c:	2200      	movs	r2, #0
 800095e:	705a      	strb	r2, [r3, #1]
}
 8000960:	e2ac      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "D4") == 0){       //D4
 8000962:	4992      	ldr	r1, [pc, #584]	; (8000bac <receive_Command_from_DTU+0x968>)
 8000964:	488a      	ldr	r0, [pc, #552]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000966:	f7ff fbf1 	bl	800014c <strcmp>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d10f      	bne.n	8000990 <receive_Command_from_DTU+0x74c>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D4, 6);
 8000970:	2206      	movs	r2, #6
 8000972:	498f      	ldr	r1, [pc, #572]	; (8000bb0 <receive_Command_from_DTU+0x96c>)
 8000974:	4888      	ldr	r0, [pc, #544]	; (8000b98 <receive_Command_from_DTU+0x954>)
 8000976:	f002 f81e 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 800097a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800097e:	f000 fe5f 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000982:	4b83      	ldr	r3, [pc, #524]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000988:	4b81      	ldr	r3, [pc, #516]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 800098a:	2200      	movs	r2, #0
 800098c:	705a      	strb	r2, [r3, #1]
}
 800098e:	e295      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "D5") == 0){       //D5
 8000990:	4988      	ldr	r1, [pc, #544]	; (8000bb4 <receive_Command_from_DTU+0x970>)
 8000992:	487f      	ldr	r0, [pc, #508]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000994:	f7ff fbda 	bl	800014c <strcmp>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10f      	bne.n	80009be <receive_Command_from_DTU+0x77a>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D5, 6);
 800099e:	2206      	movs	r2, #6
 80009a0:	4985      	ldr	r1, [pc, #532]	; (8000bb8 <receive_Command_from_DTU+0x974>)
 80009a2:	487d      	ldr	r0, [pc, #500]	; (8000b98 <receive_Command_from_DTU+0x954>)
 80009a4:	f002 f807 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80009a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009ac:	f000 fe48 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80009b0:	4b77      	ldr	r3, [pc, #476]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80009b6:	4b76      	ldr	r3, [pc, #472]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	705a      	strb	r2, [r3, #1]
}
 80009bc:	e27e      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "D6") == 0){       //D6
 80009be:	497f      	ldr	r1, [pc, #508]	; (8000bbc <receive_Command_from_DTU+0x978>)
 80009c0:	4873      	ldr	r0, [pc, #460]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 80009c2:	f7ff fbc3 	bl	800014c <strcmp>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d10f      	bne.n	80009ec <receive_Command_from_DTU+0x7a8>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D6, 6);
 80009cc:	2206      	movs	r2, #6
 80009ce:	497c      	ldr	r1, [pc, #496]	; (8000bc0 <receive_Command_from_DTU+0x97c>)
 80009d0:	4871      	ldr	r0, [pc, #452]	; (8000b98 <receive_Command_from_DTU+0x954>)
 80009d2:	f001 fff0 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 80009d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009da:	f000 fe31 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 80009de:	4b6c      	ldr	r3, [pc, #432]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 80009e4:	4b6a      	ldr	r3, [pc, #424]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	705a      	strb	r2, [r3, #1]
}
 80009ea:	e267      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "D7") == 0){       //D7
 80009ec:	4975      	ldr	r1, [pc, #468]	; (8000bc4 <receive_Command_from_DTU+0x980>)
 80009ee:	4868      	ldr	r0, [pc, #416]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 80009f0:	f7ff fbac 	bl	800014c <strcmp>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10f      	bne.n	8000a1a <receive_Command_from_DTU+0x7d6>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D7, 6);
 80009fa:	2206      	movs	r2, #6
 80009fc:	4972      	ldr	r1, [pc, #456]	; (8000bc8 <receive_Command_from_DTU+0x984>)
 80009fe:	4866      	ldr	r0, [pc, #408]	; (8000b98 <receive_Command_from_DTU+0x954>)
 8000a00:	f001 ffd9 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000a04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a08:	f000 fe1a 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000a0c:	4b60      	ldr	r3, [pc, #384]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000a12:	4b5f      	ldr	r3, [pc, #380]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	705a      	strb	r2, [r3, #1]
}
 8000a18:	e250      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "D8") == 0){       //D8
 8000a1a:	496c      	ldr	r1, [pc, #432]	; (8000bcc <receive_Command_from_DTU+0x988>)
 8000a1c:	485c      	ldr	r0, [pc, #368]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000a1e:	f7ff fb95 	bl	800014c <strcmp>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10f      	bne.n	8000a48 <receive_Command_from_DTU+0x804>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D8, 6);
 8000a28:	2206      	movs	r2, #6
 8000a2a:	4969      	ldr	r1, [pc, #420]	; (8000bd0 <receive_Command_from_DTU+0x98c>)
 8000a2c:	485a      	ldr	r0, [pc, #360]	; (8000b98 <receive_Command_from_DTU+0x954>)
 8000a2e:	f001 ffc2 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000a32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a36:	f000 fe03 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000a3a:	4b55      	ldr	r3, [pc, #340]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000a40:	4b53      	ldr	r3, [pc, #332]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	705a      	strb	r2, [r3, #1]
}
 8000a46:	e239      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "D9") == 0){       //D9
 8000a48:	4962      	ldr	r1, [pc, #392]	; (8000bd4 <receive_Command_from_DTU+0x990>)
 8000a4a:	4851      	ldr	r0, [pc, #324]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000a4c:	f7ff fb7e 	bl	800014c <strcmp>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10f      	bne.n	8000a76 <receive_Command_from_DTU+0x832>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D9, 6);
 8000a56:	2206      	movs	r2, #6
 8000a58:	495f      	ldr	r1, [pc, #380]	; (8000bd8 <receive_Command_from_DTU+0x994>)
 8000a5a:	484f      	ldr	r0, [pc, #316]	; (8000b98 <receive_Command_from_DTU+0x954>)
 8000a5c:	f001 ffab 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000a60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a64:	f000 fdec 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000a68:	4b49      	ldr	r3, [pc, #292]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000a6e:	4b48      	ldr	r3, [pc, #288]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	705a      	strb	r2, [r3, #1]
}
 8000a74:	e222      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "DD") == 0){       //D10
 8000a76:	4959      	ldr	r1, [pc, #356]	; (8000bdc <receive_Command_from_DTU+0x998>)
 8000a78:	4845      	ldr	r0, [pc, #276]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000a7a:	f7ff fb67 	bl	800014c <strcmp>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d10f      	bne.n	8000aa4 <receive_Command_from_DTU+0x860>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)D10, 6);
 8000a84:	2206      	movs	r2, #6
 8000a86:	4956      	ldr	r1, [pc, #344]	; (8000be0 <receive_Command_from_DTU+0x99c>)
 8000a88:	4843      	ldr	r0, [pc, #268]	; (8000b98 <receive_Command_from_DTU+0x954>)
 8000a8a:	f001 ff94 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000a8e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a92:	f000 fdd5 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000a96:	4b3e      	ldr	r3, [pc, #248]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000a9c:	4b3c      	ldr	r3, [pc, #240]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	705a      	strb	r2, [r3, #1]
}
 8000aa2:	e20b      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "E1") == 0){       //E1
 8000aa4:	494f      	ldr	r1, [pc, #316]	; (8000be4 <receive_Command_from_DTU+0x9a0>)
 8000aa6:	483a      	ldr	r0, [pc, #232]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000aa8:	f7ff fb50 	bl	800014c <strcmp>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d10f      	bne.n	8000ad2 <receive_Command_from_DTU+0x88e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E1, 6);
 8000ab2:	2206      	movs	r2, #6
 8000ab4:	494c      	ldr	r1, [pc, #304]	; (8000be8 <receive_Command_from_DTU+0x9a4>)
 8000ab6:	4838      	ldr	r0, [pc, #224]	; (8000b98 <receive_Command_from_DTU+0x954>)
 8000ab8:	f001 ff7d 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000abc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ac0:	f000 fdbe 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000ac4:	4b32      	ldr	r3, [pc, #200]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000aca:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	705a      	strb	r2, [r3, #1]
}
 8000ad0:	e1f4      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "E2") == 0){       //E2
 8000ad2:	4946      	ldr	r1, [pc, #280]	; (8000bec <receive_Command_from_DTU+0x9a8>)
 8000ad4:	482e      	ldr	r0, [pc, #184]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000ad6:	f7ff fb39 	bl	800014c <strcmp>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d10f      	bne.n	8000b00 <receive_Command_from_DTU+0x8bc>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E2, 6);
 8000ae0:	2206      	movs	r2, #6
 8000ae2:	4943      	ldr	r1, [pc, #268]	; (8000bf0 <receive_Command_from_DTU+0x9ac>)
 8000ae4:	482c      	ldr	r0, [pc, #176]	; (8000b98 <receive_Command_from_DTU+0x954>)
 8000ae6:	f001 ff66 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000aea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000aee:	f000 fda7 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000af2:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	705a      	strb	r2, [r3, #1]
}
 8000afe:	e1dd      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "E3") == 0){       //E3
 8000b00:	493c      	ldr	r1, [pc, #240]	; (8000bf4 <receive_Command_from_DTU+0x9b0>)
 8000b02:	4823      	ldr	r0, [pc, #140]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000b04:	f7ff fb22 	bl	800014c <strcmp>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10f      	bne.n	8000b2e <receive_Command_from_DTU+0x8ea>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E3, 6);
 8000b0e:	2206      	movs	r2, #6
 8000b10:	4939      	ldr	r1, [pc, #228]	; (8000bf8 <receive_Command_from_DTU+0x9b4>)
 8000b12:	4821      	ldr	r0, [pc, #132]	; (8000b98 <receive_Command_from_DTU+0x954>)
 8000b14:	f001 ff4f 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000b18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b1c:	f000 fd90 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	705a      	strb	r2, [r3, #1]
}
 8000b2c:	e1c6      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "E4") == 0){       //E4
 8000b2e:	4933      	ldr	r1, [pc, #204]	; (8000bfc <receive_Command_from_DTU+0x9b8>)
 8000b30:	4817      	ldr	r0, [pc, #92]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000b32:	f7ff fb0b 	bl	800014c <strcmp>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d10f      	bne.n	8000b5c <receive_Command_from_DTU+0x918>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E4, 6);
 8000b3c:	2206      	movs	r2, #6
 8000b3e:	4930      	ldr	r1, [pc, #192]	; (8000c00 <receive_Command_from_DTU+0x9bc>)
 8000b40:	4815      	ldr	r0, [pc, #84]	; (8000b98 <receive_Command_from_DTU+0x954>)
 8000b42:	f001 ff38 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000b46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b4a:	f000 fd79 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	705a      	strb	r2, [r3, #1]
}
 8000b5a:	e1af      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "E5") == 0){       //E5
 8000b5c:	4929      	ldr	r1, [pc, #164]	; (8000c04 <receive_Command_from_DTU+0x9c0>)
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000b60:	f7ff faf4 	bl	800014c <strcmp>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d150      	bne.n	8000c0c <receive_Command_from_DTU+0x9c8>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E5, 6);
 8000b6a:	2206      	movs	r2, #6
 8000b6c:	4926      	ldr	r1, [pc, #152]	; (8000c08 <receive_Command_from_DTU+0x9c4>)
 8000b6e:	480a      	ldr	r0, [pc, #40]	; (8000b98 <receive_Command_from_DTU+0x954>)
 8000b70:	f001 ff21 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000b74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b78:	f000 fd62 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000b82:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <receive_Command_from_DTU+0x94c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	705a      	strb	r2, [r3, #1]
}
 8000b88:	e198      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
 8000b8a:	bf00      	nop
 8000b8c:	08003604 	.word	0x08003604
 8000b90:	200004b0 	.word	0x200004b0
 8000b94:	20000180 	.word	0x20000180
 8000b98:	20000354 	.word	0x20000354
 8000b9c:	08003608 	.word	0x08003608
 8000ba0:	2000018c 	.word	0x2000018c
 8000ba4:	0800360c 	.word	0x0800360c
 8000ba8:	20000198 	.word	0x20000198
 8000bac:	08003610 	.word	0x08003610
 8000bb0:	200001a4 	.word	0x200001a4
 8000bb4:	08003614 	.word	0x08003614
 8000bb8:	200001b0 	.word	0x200001b0
 8000bbc:	08003618 	.word	0x08003618
 8000bc0:	200001bc 	.word	0x200001bc
 8000bc4:	0800361c 	.word	0x0800361c
 8000bc8:	200001c8 	.word	0x200001c8
 8000bcc:	08003620 	.word	0x08003620
 8000bd0:	200001d4 	.word	0x200001d4
 8000bd4:	08003624 	.word	0x08003624
 8000bd8:	200001e0 	.word	0x200001e0
 8000bdc:	08003628 	.word	0x08003628
 8000be0:	200001ec 	.word	0x200001ec
 8000be4:	0800362c 	.word	0x0800362c
 8000be8:	200001f8 	.word	0x200001f8
 8000bec:	08003630 	.word	0x08003630
 8000bf0:	20000204 	.word	0x20000204
 8000bf4:	08003634 	.word	0x08003634
 8000bf8:	20000210 	.word	0x20000210
 8000bfc:	08003638 	.word	0x08003638
 8000c00:	2000021c 	.word	0x2000021c
 8000c04:	0800363c 	.word	0x0800363c
 8000c08:	20000228 	.word	0x20000228
	 else if (strcmp(receivedData4G, "E6") == 0){       //E6
 8000c0c:	49ac      	ldr	r1, [pc, #688]	; (8000ec0 <receive_Command_from_DTU+0xc7c>)
 8000c0e:	48ad      	ldr	r0, [pc, #692]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000c10:	f7ff fa9c 	bl	800014c <strcmp>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10f      	bne.n	8000c3a <receive_Command_from_DTU+0x9f6>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E6, 6);
 8000c1a:	2206      	movs	r2, #6
 8000c1c:	49aa      	ldr	r1, [pc, #680]	; (8000ec8 <receive_Command_from_DTU+0xc84>)
 8000c1e:	48ab      	ldr	r0, [pc, #684]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000c20:	f001 fec9 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000c24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c28:	f000 fd0a 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000c2c:	4ba5      	ldr	r3, [pc, #660]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000c32:	4ba4      	ldr	r3, [pc, #656]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	705a      	strb	r2, [r3, #1]
}
 8000c38:	e140      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "E7") == 0){       //E7
 8000c3a:	49a5      	ldr	r1, [pc, #660]	; (8000ed0 <receive_Command_from_DTU+0xc8c>)
 8000c3c:	48a1      	ldr	r0, [pc, #644]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000c3e:	f7ff fa85 	bl	800014c <strcmp>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10f      	bne.n	8000c68 <receive_Command_from_DTU+0xa24>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E7, 6);
 8000c48:	2206      	movs	r2, #6
 8000c4a:	49a2      	ldr	r1, [pc, #648]	; (8000ed4 <receive_Command_from_DTU+0xc90>)
 8000c4c:	489f      	ldr	r0, [pc, #636]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000c4e:	f001 feb2 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000c52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c56:	f000 fcf3 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000c5a:	4b9a      	ldr	r3, [pc, #616]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000c60:	4b98      	ldr	r3, [pc, #608]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	705a      	strb	r2, [r3, #1]
}
 8000c66:	e129      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "E8") == 0){       //E8
 8000c68:	499b      	ldr	r1, [pc, #620]	; (8000ed8 <receive_Command_from_DTU+0xc94>)
 8000c6a:	4896      	ldr	r0, [pc, #600]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000c6c:	f7ff fa6e 	bl	800014c <strcmp>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10f      	bne.n	8000c96 <receive_Command_from_DTU+0xa52>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E8, 6);
 8000c76:	2206      	movs	r2, #6
 8000c78:	4998      	ldr	r1, [pc, #608]	; (8000edc <receive_Command_from_DTU+0xc98>)
 8000c7a:	4894      	ldr	r0, [pc, #592]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000c7c:	f001 fe9b 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000c80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c84:	f000 fcdc 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000c88:	4b8e      	ldr	r3, [pc, #568]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000c8e:	4b8d      	ldr	r3, [pc, #564]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	705a      	strb	r2, [r3, #1]
}
 8000c94:	e112      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "E9") == 0){       //E9
 8000c96:	4992      	ldr	r1, [pc, #584]	; (8000ee0 <receive_Command_from_DTU+0xc9c>)
 8000c98:	488a      	ldr	r0, [pc, #552]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000c9a:	f7ff fa57 	bl	800014c <strcmp>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10f      	bne.n	8000cc4 <receive_Command_from_DTU+0xa80>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E9, 6);
 8000ca4:	2206      	movs	r2, #6
 8000ca6:	498f      	ldr	r1, [pc, #572]	; (8000ee4 <receive_Command_from_DTU+0xca0>)
 8000ca8:	4888      	ldr	r0, [pc, #544]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000caa:	f001 fe84 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000cae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cb2:	f000 fcc5 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000cb6:	4b83      	ldr	r3, [pc, #524]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000cbc:	4b81      	ldr	r3, [pc, #516]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	705a      	strb	r2, [r3, #1]
}
 8000cc2:	e0fb      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "EE") == 0){       //E10
 8000cc4:	4988      	ldr	r1, [pc, #544]	; (8000ee8 <receive_Command_from_DTU+0xca4>)
 8000cc6:	487f      	ldr	r0, [pc, #508]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000cc8:	f7ff fa40 	bl	800014c <strcmp>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10f      	bne.n	8000cf2 <receive_Command_from_DTU+0xaae>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)E10, 6);
 8000cd2:	2206      	movs	r2, #6
 8000cd4:	4985      	ldr	r1, [pc, #532]	; (8000eec <receive_Command_from_DTU+0xca8>)
 8000cd6:	487d      	ldr	r0, [pc, #500]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000cd8:	f001 fe6d 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000cdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ce0:	f000 fcae 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000ce4:	4b77      	ldr	r3, [pc, #476]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000cea:	4b76      	ldr	r3, [pc, #472]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	705a      	strb	r2, [r3, #1]
}
 8000cf0:	e0e4      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "F1") == 0){       //F1
 8000cf2:	497f      	ldr	r1, [pc, #508]	; (8000ef0 <receive_Command_from_DTU+0xcac>)
 8000cf4:	4873      	ldr	r0, [pc, #460]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000cf6:	f7ff fa29 	bl	800014c <strcmp>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10f      	bne.n	8000d20 <receive_Command_from_DTU+0xadc>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F1, 6);
 8000d00:	2206      	movs	r2, #6
 8000d02:	497c      	ldr	r1, [pc, #496]	; (8000ef4 <receive_Command_from_DTU+0xcb0>)
 8000d04:	4871      	ldr	r0, [pc, #452]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000d06:	f001 fe56 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000d0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d0e:	f000 fc97 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000d12:	4b6c      	ldr	r3, [pc, #432]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000d18:	4b6a      	ldr	r3, [pc, #424]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	705a      	strb	r2, [r3, #1]
}
 8000d1e:	e0cd      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "F2") == 0){       //F2
 8000d20:	4975      	ldr	r1, [pc, #468]	; (8000ef8 <receive_Command_from_DTU+0xcb4>)
 8000d22:	4868      	ldr	r0, [pc, #416]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000d24:	f7ff fa12 	bl	800014c <strcmp>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10f      	bne.n	8000d4e <receive_Command_from_DTU+0xb0a>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F2, 6);
 8000d2e:	2206      	movs	r2, #6
 8000d30:	4972      	ldr	r1, [pc, #456]	; (8000efc <receive_Command_from_DTU+0xcb8>)
 8000d32:	4866      	ldr	r0, [pc, #408]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000d34:	f001 fe3f 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000d38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d3c:	f000 fc80 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000d40:	4b60      	ldr	r3, [pc, #384]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000d46:	4b5f      	ldr	r3, [pc, #380]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	705a      	strb	r2, [r3, #1]
}
 8000d4c:	e0b6      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "F3") == 0){       //F3
 8000d4e:	496c      	ldr	r1, [pc, #432]	; (8000f00 <receive_Command_from_DTU+0xcbc>)
 8000d50:	485c      	ldr	r0, [pc, #368]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000d52:	f7ff f9fb 	bl	800014c <strcmp>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10f      	bne.n	8000d7c <receive_Command_from_DTU+0xb38>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F3, 6);
 8000d5c:	2206      	movs	r2, #6
 8000d5e:	4969      	ldr	r1, [pc, #420]	; (8000f04 <receive_Command_from_DTU+0xcc0>)
 8000d60:	485a      	ldr	r0, [pc, #360]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000d62:	f001 fe28 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000d66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d6a:	f000 fc69 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000d6e:	4b55      	ldr	r3, [pc, #340]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000d74:	4b53      	ldr	r3, [pc, #332]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	705a      	strb	r2, [r3, #1]
}
 8000d7a:	e09f      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "F4") == 0){       //F4
 8000d7c:	4962      	ldr	r1, [pc, #392]	; (8000f08 <receive_Command_from_DTU+0xcc4>)
 8000d7e:	4851      	ldr	r0, [pc, #324]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000d80:	f7ff f9e4 	bl	800014c <strcmp>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10f      	bne.n	8000daa <receive_Command_from_DTU+0xb66>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F4, 6);
 8000d8a:	2206      	movs	r2, #6
 8000d8c:	495f      	ldr	r1, [pc, #380]	; (8000f0c <receive_Command_from_DTU+0xcc8>)
 8000d8e:	484f      	ldr	r0, [pc, #316]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000d90:	f001 fe11 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000d94:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d98:	f000 fc52 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000d9c:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000da2:	4b48      	ldr	r3, [pc, #288]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	705a      	strb	r2, [r3, #1]
}
 8000da8:	e088      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "F5") == 0){       //F5
 8000daa:	4959      	ldr	r1, [pc, #356]	; (8000f10 <receive_Command_from_DTU+0xccc>)
 8000dac:	4845      	ldr	r0, [pc, #276]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000dae:	f7ff f9cd 	bl	800014c <strcmp>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10f      	bne.n	8000dd8 <receive_Command_from_DTU+0xb94>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F5, 6);
 8000db8:	2206      	movs	r2, #6
 8000dba:	4956      	ldr	r1, [pc, #344]	; (8000f14 <receive_Command_from_DTU+0xcd0>)
 8000dbc:	4843      	ldr	r0, [pc, #268]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000dbe:	f001 fdfa 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000dc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000dc6:	f000 fc3b 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000dca:	4b3e      	ldr	r3, [pc, #248]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000dd0:	4b3c      	ldr	r3, [pc, #240]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	705a      	strb	r2, [r3, #1]
}
 8000dd6:	e071      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "F6") == 0){       //F6
 8000dd8:	494f      	ldr	r1, [pc, #316]	; (8000f18 <receive_Command_from_DTU+0xcd4>)
 8000dda:	483a      	ldr	r0, [pc, #232]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000ddc:	f7ff f9b6 	bl	800014c <strcmp>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10f      	bne.n	8000e06 <receive_Command_from_DTU+0xbc2>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F6, 6);
 8000de6:	2206      	movs	r2, #6
 8000de8:	494c      	ldr	r1, [pc, #304]	; (8000f1c <receive_Command_from_DTU+0xcd8>)
 8000dea:	4838      	ldr	r0, [pc, #224]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000dec:	f001 fde3 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000df0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000df4:	f000 fc24 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000df8:	4b32      	ldr	r3, [pc, #200]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000dfe:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	705a      	strb	r2, [r3, #1]
}
 8000e04:	e05a      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "F7") == 0){       //F7
 8000e06:	4946      	ldr	r1, [pc, #280]	; (8000f20 <receive_Command_from_DTU+0xcdc>)
 8000e08:	482e      	ldr	r0, [pc, #184]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000e0a:	f7ff f99f 	bl	800014c <strcmp>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10f      	bne.n	8000e34 <receive_Command_from_DTU+0xbf0>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F7, 6);
 8000e14:	2206      	movs	r2, #6
 8000e16:	4943      	ldr	r1, [pc, #268]	; (8000f24 <receive_Command_from_DTU+0xce0>)
 8000e18:	482c      	ldr	r0, [pc, #176]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000e1a:	f001 fdcc 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000e1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e22:	f000 fc0d 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000e26:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	705a      	strb	r2, [r3, #1]
}
 8000e32:	e043      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "F8") == 0){       //F8
 8000e34:	493c      	ldr	r1, [pc, #240]	; (8000f28 <receive_Command_from_DTU+0xce4>)
 8000e36:	4823      	ldr	r0, [pc, #140]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000e38:	f7ff f988 	bl	800014c <strcmp>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10f      	bne.n	8000e62 <receive_Command_from_DTU+0xc1e>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F8, 6);
 8000e42:	2206      	movs	r2, #6
 8000e44:	4939      	ldr	r1, [pc, #228]	; (8000f2c <receive_Command_from_DTU+0xce8>)
 8000e46:	4821      	ldr	r0, [pc, #132]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000e48:	f001 fdb5 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000e4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e50:	f000 fbf6 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	705a      	strb	r2, [r3, #1]
}
 8000e60:	e02c      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "F9") == 0){       //F9
 8000e62:	4933      	ldr	r1, [pc, #204]	; (8000f30 <receive_Command_from_DTU+0xcec>)
 8000e64:	4817      	ldr	r0, [pc, #92]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000e66:	f7ff f971 	bl	800014c <strcmp>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10f      	bne.n	8000e90 <receive_Command_from_DTU+0xc4c>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F9, 6);
 8000e70:	2206      	movs	r2, #6
 8000e72:	4930      	ldr	r1, [pc, #192]	; (8000f34 <receive_Command_from_DTU+0xcf0>)
 8000e74:	4815      	ldr	r0, [pc, #84]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000e76:	f001 fd9e 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000e7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e7e:	f000 fbdf 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	705a      	strb	r2, [r3, #1]
}
 8000e8e:	e015      	b.n	8000ebc <receive_Command_from_DTU+0xc78>
	 else if (strcmp(receivedData4G, "FF") == 0){       //F10
 8000e90:	4929      	ldr	r1, [pc, #164]	; (8000f38 <receive_Command_from_DTU+0xcf4>)
 8000e92:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000e94:	f7ff f95a 	bl	800014c <strcmp>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10e      	bne.n	8000ebc <receive_Command_from_DTU+0xc78>
	     HAL_UART_Transmit_IT(&huart2, (uint8_t *)F10, 6);
 8000e9e:	2206      	movs	r2, #6
 8000ea0:	4926      	ldr	r1, [pc, #152]	; (8000f3c <receive_Command_from_DTU+0xcf8>)
 8000ea2:	480a      	ldr	r0, [pc, #40]	; (8000ecc <receive_Command_from_DTU+0xc88>)
 8000ea4:	f001 fd87 	bl	80029b6 <HAL_UART_Transmit_IT>
	     HAL_Delay(2000);
 8000ea8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000eac:	f000 fbc8 	bl	8001640 <HAL_Delay>
	     receivedData4G[0] = 0;
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
	     receivedData4G[1] = 0;
 8000eb6:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <receive_Command_from_DTU+0xc80>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	705a      	strb	r2, [r3, #1]
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	08003640 	.word	0x08003640
 8000ec4:	200004b0 	.word	0x200004b0
 8000ec8:	20000234 	.word	0x20000234
 8000ecc:	20000354 	.word	0x20000354
 8000ed0:	08003644 	.word	0x08003644
 8000ed4:	20000240 	.word	0x20000240
 8000ed8:	08003648 	.word	0x08003648
 8000edc:	2000024c 	.word	0x2000024c
 8000ee0:	0800364c 	.word	0x0800364c
 8000ee4:	20000258 	.word	0x20000258
 8000ee8:	08003650 	.word	0x08003650
 8000eec:	20000264 	.word	0x20000264
 8000ef0:	08003654 	.word	0x08003654
 8000ef4:	20000270 	.word	0x20000270
 8000ef8:	08003658 	.word	0x08003658
 8000efc:	2000027c 	.word	0x2000027c
 8000f00:	0800365c 	.word	0x0800365c
 8000f04:	20000288 	.word	0x20000288
 8000f08:	08003660 	.word	0x08003660
 8000f0c:	20000294 	.word	0x20000294
 8000f10:	08003664 	.word	0x08003664
 8000f14:	200002a0 	.word	0x200002a0
 8000f18:	08003668 	.word	0x08003668
 8000f1c:	200002ac 	.word	0x200002ac
 8000f20:	0800366c 	.word	0x0800366c
 8000f24:	200002b8 	.word	0x200002b8
 8000f28:	08003670 	.word	0x08003670
 8000f2c:	200002c4 	.word	0x200002c4
 8000f30:	08003674 	.word	0x08003674
 8000f34:	200002d0 	.word	0x200002d0
 8000f38:	08003678 	.word	0x08003678
 8000f3c:	200002dc 	.word	0x200002dc

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f44:	f000 fb1a 	bl	800157c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f48:	f000 f820 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4c:	f000 f8ee 	bl	800112c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f50:	f000 f8b6 	bl	80010c0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000f54:	f000 f860 	bl	8001018 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f58:	f000 f888 	bl	800106c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, Rx_data_from_stc, 5);
 8000f5c:	2205      	movs	r2, #5
 8000f5e:	4907      	ldr	r1, [pc, #28]	; (8000f7c <main+0x3c>)
 8000f60:	4807      	ldr	r0, [pc, #28]	; (8000f80 <main+0x40>)
 8000f62:	f001 fd9c 	bl	8002a9e <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart1,receivedData4G, 2);
 8000f66:	2202      	movs	r2, #2
 8000f68:	4906      	ldr	r1, [pc, #24]	; (8000f84 <main+0x44>)
 8000f6a:	4807      	ldr	r0, [pc, #28]	; (8000f88 <main+0x48>)
 8000f6c:	f001 fd67 	bl	8002a3e <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  receive_Command_from_DTU();
 8000f70:	f7ff f968 	bl	8000244 <receive_Command_from_DTU>
	  transmit_Data_to_DTU();
 8000f74:	f7ff f918 	bl	80001a8 <transmit_Data_to_DTU>
	  receive_Command_from_DTU();
 8000f78:	e7fa      	b.n	8000f70 <main+0x30>
 8000f7a:	bf00      	nop
 8000f7c:	200004a8 	.word	0x200004a8
 8000f80:	20000354 	.word	0x20000354
 8000f84:	200004b0 	.word	0x200004b0
 8000f88:	20000310 	.word	0x20000310

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b090      	sub	sp, #64	; 0x40
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0318 	add.w	r3, r7, #24
 8000f96:	2228      	movs	r2, #40	; 0x28
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 fadc 	bl	8003558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 f887 	bl	80020e8 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fe0:	f000 f8c6 	bl	8001170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 faf4 	bl	80025ec <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800100a:	f000 f8b1 	bl	8001170 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3740      	adds	r7, #64	; 0x40
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_USART1_UART_Init+0x4c>)
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <MX_USART1_UART_Init+0x50>)
 8001020:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <MX_USART1_UART_Init+0x4c>)
 8001024:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001028:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_USART1_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_USART1_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_USART1_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_USART1_UART_Init+0x4c>)
 800103e:	220c      	movs	r2, #12
 8001040:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_USART1_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_USART1_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_USART1_UART_Init+0x4c>)
 8001050:	f001 fc64 	bl	800291c <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800105a:	f000 f889 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000310 	.word	0x20000310
 8001068:	40013800 	.word	0x40013800

0800106c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <MX_USART2_UART_Init+0x50>)
 8001074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001078:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800107c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001080:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001084:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 8001094:	220c      	movs	r2, #12
 8001096:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_USART2_UART_Init+0x4c>)
 80010a6:	f001 fc39 	bl	800291c <HAL_UART_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80010b0:	f000 f85e 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000354 	.word	0x20000354
 80010bc:	40004400 	.word	0x40004400

080010c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_DMA_Init+0x68>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <MX_DMA_Init+0x68>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_DMA_Init+0x68>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	200e      	movs	r0, #14
 80010e4:	f000 fba7 	bl	8001836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80010e8:	200e      	movs	r0, #14
 80010ea:	f000 fbc0 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	200f      	movs	r0, #15
 80010f4:	f000 fb9f 	bl	8001836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80010f8:	200f      	movs	r0, #15
 80010fa:	f000 fbb8 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2010      	movs	r0, #16
 8001104:	f000 fb97 	bl	8001836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001108:	2010      	movs	r0, #16
 800110a:	f000 fbb0 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2011      	movs	r0, #17
 8001114:	f000 fb8f 	bl	8001836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001118:	2011      	movs	r0, #17
 800111a:	f000 fba8 	bl	800186e <HAL_NVIC_EnableIRQ>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_GPIO_Init+0x40>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4a0d      	ldr	r2, [pc, #52]	; (800116c <MX_GPIO_Init+0x40>)
 8001138:	f043 0320 	orr.w	r3, r3, #32
 800113c:	6193      	str	r3, [r2, #24]
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_GPIO_Init+0x40>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f003 0320 	and.w	r3, r3, #32
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_GPIO_Init+0x40>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <MX_GPIO_Init+0x40>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <MX_GPIO_Init+0x40>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]

}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	40021000 	.word	0x40021000

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001178:	e7fe      	b.n	8001178 <Error_Handler+0x8>
	...

0800117c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_MspInit+0x5c>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <HAL_MspInit+0x5c>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6193      	str	r3, [r2, #24]
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_MspInit+0x5c>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_MspInit+0x5c>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_MspInit+0x5c>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_MspInit+0x5c>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_MspInit+0x60>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_MspInit+0x60>)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000

080011e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a8c      	ldr	r2, [pc, #560]	; (800142c <HAL_UART_MspInit+0x24c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	f040 8087 	bne.w	8001310 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001202:	4b8b      	ldr	r3, [pc, #556]	; (8001430 <HAL_UART_MspInit+0x250>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a8a      	ldr	r2, [pc, #552]	; (8001430 <HAL_UART_MspInit+0x250>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b88      	ldr	r3, [pc, #544]	; (8001430 <HAL_UART_MspInit+0x250>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b85      	ldr	r3, [pc, #532]	; (8001430 <HAL_UART_MspInit+0x250>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	4a84      	ldr	r2, [pc, #528]	; (8001430 <HAL_UART_MspInit+0x250>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6193      	str	r3, [r2, #24]
 8001226:	4b82      	ldr	r3, [pc, #520]	; (8001430 <HAL_UART_MspInit+0x250>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0318 	add.w	r3, r7, #24
 8001244:	4619      	mov	r1, r3
 8001246:	487b      	ldr	r0, [pc, #492]	; (8001434 <HAL_UART_MspInit+0x254>)
 8001248:	f000 fdca 	bl	8001de0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800124c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	4619      	mov	r1, r3
 8001260:	4874      	ldr	r0, [pc, #464]	; (8001434 <HAL_UART_MspInit+0x254>)
 8001262:	f000 fdbd 	bl	8001de0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001266:	4b74      	ldr	r3, [pc, #464]	; (8001438 <HAL_UART_MspInit+0x258>)
 8001268:	4a74      	ldr	r2, [pc, #464]	; (800143c <HAL_UART_MspInit+0x25c>)
 800126a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800126c:	4b72      	ldr	r3, [pc, #456]	; (8001438 <HAL_UART_MspInit+0x258>)
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001272:	4b71      	ldr	r3, [pc, #452]	; (8001438 <HAL_UART_MspInit+0x258>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001278:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <HAL_UART_MspInit+0x258>)
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800127e:	4b6e      	ldr	r3, [pc, #440]	; (8001438 <HAL_UART_MspInit+0x258>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001284:	4b6c      	ldr	r3, [pc, #432]	; (8001438 <HAL_UART_MspInit+0x258>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800128a:	4b6b      	ldr	r3, [pc, #428]	; (8001438 <HAL_UART_MspInit+0x258>)
 800128c:	2220      	movs	r2, #32
 800128e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001290:	4b69      	ldr	r3, [pc, #420]	; (8001438 <HAL_UART_MspInit+0x258>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001296:	4868      	ldr	r0, [pc, #416]	; (8001438 <HAL_UART_MspInit+0x258>)
 8001298:	f000 fb04 	bl	80018a4 <HAL_DMA_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80012a2:	f7ff ff65 	bl	8001170 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a63      	ldr	r2, [pc, #396]	; (8001438 <HAL_UART_MspInit+0x258>)
 80012aa:	639a      	str	r2, [r3, #56]	; 0x38
 80012ac:	4a62      	ldr	r2, [pc, #392]	; (8001438 <HAL_UART_MspInit+0x258>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80012b2:	4b63      	ldr	r3, [pc, #396]	; (8001440 <HAL_UART_MspInit+0x260>)
 80012b4:	4a63      	ldr	r2, [pc, #396]	; (8001444 <HAL_UART_MspInit+0x264>)
 80012b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012b8:	4b61      	ldr	r3, [pc, #388]	; (8001440 <HAL_UART_MspInit+0x260>)
 80012ba:	2210      	movs	r2, #16
 80012bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012be:	4b60      	ldr	r3, [pc, #384]	; (8001440 <HAL_UART_MspInit+0x260>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012c4:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <HAL_UART_MspInit+0x260>)
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ca:	4b5d      	ldr	r3, [pc, #372]	; (8001440 <HAL_UART_MspInit+0x260>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d0:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <HAL_UART_MspInit+0x260>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80012d6:	4b5a      	ldr	r3, [pc, #360]	; (8001440 <HAL_UART_MspInit+0x260>)
 80012d8:	2220      	movs	r2, #32
 80012da:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012dc:	4b58      	ldr	r3, [pc, #352]	; (8001440 <HAL_UART_MspInit+0x260>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80012e2:	4857      	ldr	r0, [pc, #348]	; (8001440 <HAL_UART_MspInit+0x260>)
 80012e4:	f000 fade 	bl	80018a4 <HAL_DMA_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80012ee:	f7ff ff3f 	bl	8001170 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a52      	ldr	r2, [pc, #328]	; (8001440 <HAL_UART_MspInit+0x260>)
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34
 80012f8:	4a51      	ldr	r2, [pc, #324]	; (8001440 <HAL_UART_MspInit+0x260>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2025      	movs	r0, #37	; 0x25
 8001304:	f000 fa97 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001308:	2025      	movs	r0, #37	; 0x25
 800130a:	f000 fab0 	bl	800186e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800130e:	e089      	b.n	8001424 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <HAL_UART_MspInit+0x268>)
 8001316:	4293      	cmp	r3, r2
 8001318:	f040 8084 	bne.w	8001424 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 800131c:	4b44      	ldr	r3, [pc, #272]	; (8001430 <HAL_UART_MspInit+0x250>)
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	4a43      	ldr	r2, [pc, #268]	; (8001430 <HAL_UART_MspInit+0x250>)
 8001322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001326:	61d3      	str	r3, [r2, #28]
 8001328:	4b41      	ldr	r3, [pc, #260]	; (8001430 <HAL_UART_MspInit+0x250>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <HAL_UART_MspInit+0x250>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a3d      	ldr	r2, [pc, #244]	; (8001430 <HAL_UART_MspInit+0x250>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_UART_MspInit+0x250>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800134c:	2304      	movs	r3, #4
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	4619      	mov	r1, r3
 800135e:	4835      	ldr	r0, [pc, #212]	; (8001434 <HAL_UART_MspInit+0x254>)
 8001360:	f000 fd3e 	bl	8001de0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001364:	2308      	movs	r3, #8
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0318 	add.w	r3, r7, #24
 8001374:	4619      	mov	r1, r3
 8001376:	482f      	ldr	r0, [pc, #188]	; (8001434 <HAL_UART_MspInit+0x254>)
 8001378:	f000 fd32 	bl	8001de0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800137c:	4b33      	ldr	r3, [pc, #204]	; (800144c <HAL_UART_MspInit+0x26c>)
 800137e:	4a34      	ldr	r2, [pc, #208]	; (8001450 <HAL_UART_MspInit+0x270>)
 8001380:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001382:	4b32      	ldr	r3, [pc, #200]	; (800144c <HAL_UART_MspInit+0x26c>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001388:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_UART_MspInit+0x26c>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <HAL_UART_MspInit+0x26c>)
 8001390:	2280      	movs	r2, #128	; 0x80
 8001392:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001394:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_UART_MspInit+0x26c>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800139a:	4b2c      	ldr	r3, [pc, #176]	; (800144c <HAL_UART_MspInit+0x26c>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <HAL_UART_MspInit+0x26c>)
 80013a2:	2220      	movs	r2, #32
 80013a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013a6:	4b29      	ldr	r3, [pc, #164]	; (800144c <HAL_UART_MspInit+0x26c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80013ac:	4827      	ldr	r0, [pc, #156]	; (800144c <HAL_UART_MspInit+0x26c>)
 80013ae:	f000 fa79 	bl	80018a4 <HAL_DMA_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80013b8:	f7ff feda 	bl	8001170 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a23      	ldr	r2, [pc, #140]	; (800144c <HAL_UART_MspInit+0x26c>)
 80013c0:	639a      	str	r2, [r3, #56]	; 0x38
 80013c2:	4a22      	ldr	r2, [pc, #136]	; (800144c <HAL_UART_MspInit+0x26c>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80013c8:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_UART_MspInit+0x274>)
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <HAL_UART_MspInit+0x278>)
 80013cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <HAL_UART_MspInit+0x274>)
 80013d0:	2210      	movs	r2, #16
 80013d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_UART_MspInit+0x274>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_UART_MspInit+0x274>)
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_UART_MspInit+0x274>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_UART_MspInit+0x274>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_UART_MspInit+0x274>)
 80013ee:	2220      	movs	r2, #32
 80013f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_UART_MspInit+0x274>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80013f8:	4816      	ldr	r0, [pc, #88]	; (8001454 <HAL_UART_MspInit+0x274>)
 80013fa:	f000 fa53 	bl	80018a4 <HAL_DMA_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8001404:	f7ff feb4 	bl	8001170 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <HAL_UART_MspInit+0x274>)
 800140c:	635a      	str	r2, [r3, #52]	; 0x34
 800140e:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_UART_MspInit+0x274>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	2026      	movs	r0, #38	; 0x26
 800141a:	f000 fa0c 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800141e:	2026      	movs	r0, #38	; 0x26
 8001420:	f000 fa25 	bl	800186e <HAL_NVIC_EnableIRQ>
}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40013800 	.word	0x40013800
 8001430:	40021000 	.word	0x40021000
 8001434:	40010800 	.word	0x40010800
 8001438:	20000398 	.word	0x20000398
 800143c:	40020058 	.word	0x40020058
 8001440:	200003dc 	.word	0x200003dc
 8001444:	40020044 	.word	0x40020044
 8001448:	40004400 	.word	0x40004400
 800144c:	20000420 	.word	0x20000420
 8001450:	4002006c 	.word	0x4002006c
 8001454:	20000464 	.word	0x20000464
 8001458:	40020080 	.word	0x40020080

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <NMI_Handler+0x4>

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a2:	f000 f8b1 	bl	8001608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <DMA1_Channel4_IRQHandler+0x10>)
 80014b2:	f000 fb61 	bl	8001b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200003dc 	.word	0x200003dc

080014c0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <DMA1_Channel5_IRQHandler+0x10>)
 80014c6:	f000 fb57 	bl	8001b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000398 	.word	0x20000398

080014d4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <DMA1_Channel6_IRQHandler+0x10>)
 80014da:	f000 fb4d 	bl	8001b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000420 	.word	0x20000420

080014e8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <DMA1_Channel7_IRQHandler+0x10>)
 80014ee:	f000 fb43 	bl	8001b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000464 	.word	0x20000464

080014fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <USART1_IRQHandler+0x10>)
 8001502:	f001 fafd 	bl	8002b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000310 	.word	0x20000310

08001510 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <USART2_IRQHandler+0x10>)
 8001516:	f001 faf3 	bl	8002b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000354 	.word	0x20000354

08001524 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001532:	490d      	ldr	r1, [pc, #52]	; (8001568 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001534:	4a0d      	ldr	r2, [pc, #52]	; (800156c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001548:	4c0a      	ldr	r4, [pc, #40]	; (8001574 <LoopFillZerobss+0x22>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001556:	f7ff ffe5 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155a:	f001 ffd9 	bl	8003510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155e:	f7ff fcef 	bl	8000f40 <main>
  bx lr
 8001562:	4770      	bx	lr
  ldr r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001568:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 800156c:	080036ac 	.word	0x080036ac
  ldr r2, =_sbss
 8001570:	200002f4 	.word	0x200002f4
  ldr r4, =_ebss
 8001574:	200004bc 	.word	0x200004bc

08001578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC1_2_IRQHandler>
	...

0800157c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_Init+0x28>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_Init+0x28>)
 8001586:	f043 0310 	orr.w	r3, r3, #16
 800158a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158c:	2003      	movs	r0, #3
 800158e:	f000 f947 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001592:	200f      	movs	r0, #15
 8001594:	f000 f808 	bl	80015a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001598:	f7ff fdf0 	bl	800117c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40022000 	.word	0x40022000

080015a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x54>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_InitTick+0x58>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015be:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 f95f 	bl	800188a <HAL_SYSTICK_Config>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00e      	b.n	80015f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b0f      	cmp	r3, #15
 80015da:	d80a      	bhi.n	80015f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015dc:	2200      	movs	r2, #0
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f000 f927 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e8:	4a06      	ldr	r2, [pc, #24]	; (8001604 <HAL_InitTick+0x5c>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200002e8 	.word	0x200002e8
 8001600:	200002f0 	.word	0x200002f0
 8001604:	200002ec 	.word	0x200002ec

08001608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_IncTick+0x1c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_IncTick+0x20>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
 8001618:	4a03      	ldr	r2, [pc, #12]	; (8001628 <HAL_IncTick+0x20>)
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	200002f0 	.word	0x200002f0
 8001628:	200004b8 	.word	0x200004b8

0800162c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b02      	ldr	r3, [pc, #8]	; (800163c <HAL_GetTick+0x10>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	200004b8 	.word	0x200004b8

08001640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff fff0 	bl	800162c <HAL_GetTick>
 800164c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d005      	beq.n	8001666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_Delay+0x44>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001666:	bf00      	nop
 8001668:	f7ff ffe0 	bl	800162c <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d8f7      	bhi.n	8001668 <HAL_Delay+0x28>
  {
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200002f0 	.word	0x200002f0

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4906      	ldr	r1, [pc, #24]	; (8001720 <__NVIC_EnableIRQ+0x34>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100

08001724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db0a      	blt.n	800174e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b2da      	uxtb	r2, r3
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <__NVIC_SetPriority+0x4c>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	0112      	lsls	r2, r2, #4
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	440b      	add	r3, r1
 8001748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800174c:	e00a      	b.n	8001764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4908      	ldr	r1, [pc, #32]	; (8001774 <__NVIC_SetPriority+0x50>)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	3b04      	subs	r3, #4
 800175c:	0112      	lsls	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	440b      	add	r3, r1
 8001762:	761a      	strb	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e100 	.word	0xe000e100
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001778:	b480      	push	{r7}
 800177a:	b089      	sub	sp, #36	; 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f1c3 0307 	rsb	r3, r3, #7
 8001792:	2b04      	cmp	r3, #4
 8001794:	bf28      	it	cs
 8001796:	2304      	movcs	r3, #4
 8001798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3304      	adds	r3, #4
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d902      	bls.n	80017a8 <NVIC_EncodePriority+0x30>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3b03      	subs	r3, #3
 80017a6:	e000      	b.n	80017aa <NVIC_EncodePriority+0x32>
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43da      	mvns	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	401a      	ands	r2, r3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c0:	f04f 31ff 	mov.w	r1, #4294967295
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	43d9      	mvns	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4313      	orrs	r3, r2
         );
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7ff ff90 	bl	8001724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff2d 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff42 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff90 	bl	8001778 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5f 	bl	8001724 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff35 	bl	80016ec <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa2 	bl	80017dc <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e043      	b.n	8001942 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_DMA_Init+0xa8>)
 80018c2:	4413      	add	r3, r2
 80018c4:	4a22      	ldr	r2, [pc, #136]	; (8001950 <HAL_DMA_Init+0xac>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	009a      	lsls	r2, r3, #2
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a1f      	ldr	r2, [pc, #124]	; (8001954 <HAL_DMA_Init+0xb0>)
 80018d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80018ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	bffdfff8 	.word	0xbffdfff8
 8001950:	cccccccd 	.word	0xcccccccd
 8001954:	40020000 	.word	0x40020000

08001958 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_DMA_Start_IT+0x20>
 8001974:	2302      	movs	r3, #2
 8001976:	e04a      	b.n	8001a0e <HAL_DMA_Start_IT+0xb6>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001986:	2b01      	cmp	r3, #1
 8001988:	d13a      	bne.n	8001a00 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2202      	movs	r2, #2
 800198e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f9e8 	bl	8001d84 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 020e 	orr.w	r2, r2, #14
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e00f      	b.n	80019ee <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0204 	bic.w	r2, r2, #4
 80019dc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f042 020a 	orr.w	r2, r2, #10
 80019ec:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0201 	orr.w	r2, r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e005      	b.n	8001a0c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d008      	beq.n	8001a3e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2204      	movs	r2, #4
 8001a30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e020      	b.n	8001a80 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 020e 	bic.w	r2, r2, #14
 8001a4c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0201 	bic.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a66:	2101      	movs	r1, #1
 8001a68:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
	...

08001a8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d005      	beq.n	8001aae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e051      	b.n	8001b52 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 020e 	bic.w	r2, r2, #14
 8001abc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0201 	bic.w	r2, r2, #1
 8001acc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a22      	ldr	r2, [pc, #136]	; (8001b5c <HAL_DMA_Abort_IT+0xd0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d029      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xa0>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a20      	ldr	r2, [pc, #128]	; (8001b60 <HAL_DMA_Abort_IT+0xd4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d022      	beq.n	8001b28 <HAL_DMA_Abort_IT+0x9c>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1f      	ldr	r2, [pc, #124]	; (8001b64 <HAL_DMA_Abort_IT+0xd8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d01a      	beq.n	8001b22 <HAL_DMA_Abort_IT+0x96>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_DMA_Abort_IT+0xdc>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d012      	beq.n	8001b1c <HAL_DMA_Abort_IT+0x90>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <HAL_DMA_Abort_IT+0xe0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00a      	beq.n	8001b16 <HAL_DMA_Abort_IT+0x8a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <HAL_DMA_Abort_IT+0xe4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d102      	bne.n	8001b10 <HAL_DMA_Abort_IT+0x84>
 8001b0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b0e:	e00e      	b.n	8001b2e <HAL_DMA_Abort_IT+0xa2>
 8001b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b14:	e00b      	b.n	8001b2e <HAL_DMA_Abort_IT+0xa2>
 8001b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b1a:	e008      	b.n	8001b2e <HAL_DMA_Abort_IT+0xa2>
 8001b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b20:	e005      	b.n	8001b2e <HAL_DMA_Abort_IT+0xa2>
 8001b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b26:	e002      	b.n	8001b2e <HAL_DMA_Abort_IT+0xa2>
 8001b28:	2310      	movs	r3, #16
 8001b2a:	e000      	b.n	8001b2e <HAL_DMA_Abort_IT+0xa2>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	4a11      	ldr	r2, [pc, #68]	; (8001b74 <HAL_DMA_Abort_IT+0xe8>)
 8001b30:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	4798      	blx	r3
    } 
  }
  return status;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40020008 	.word	0x40020008
 8001b60:	4002001c 	.word	0x4002001c
 8001b64:	40020030 	.word	0x40020030
 8001b68:	40020044 	.word	0x40020044
 8001b6c:	40020058 	.word	0x40020058
 8001b70:	4002006c 	.word	0x4002006c
 8001b74:	40020000 	.word	0x40020000

08001b78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	2204      	movs	r2, #4
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d04f      	beq.n	8001c40 <HAL_DMA_IRQHandler+0xc8>
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d04a      	beq.n	8001c40 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d107      	bne.n	8001bc8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0204 	bic.w	r2, r2, #4
 8001bc6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a66      	ldr	r2, [pc, #408]	; (8001d68 <HAL_DMA_IRQHandler+0x1f0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d029      	beq.n	8001c26 <HAL_DMA_IRQHandler+0xae>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a65      	ldr	r2, [pc, #404]	; (8001d6c <HAL_DMA_IRQHandler+0x1f4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d022      	beq.n	8001c22 <HAL_DMA_IRQHandler+0xaa>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a63      	ldr	r2, [pc, #396]	; (8001d70 <HAL_DMA_IRQHandler+0x1f8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d01a      	beq.n	8001c1c <HAL_DMA_IRQHandler+0xa4>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a62      	ldr	r2, [pc, #392]	; (8001d74 <HAL_DMA_IRQHandler+0x1fc>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d012      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x9e>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a60      	ldr	r2, [pc, #384]	; (8001d78 <HAL_DMA_IRQHandler+0x200>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00a      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x98>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a5f      	ldr	r2, [pc, #380]	; (8001d7c <HAL_DMA_IRQHandler+0x204>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d102      	bne.n	8001c0a <HAL_DMA_IRQHandler+0x92>
 8001c04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c08:	e00e      	b.n	8001c28 <HAL_DMA_IRQHandler+0xb0>
 8001c0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c0e:	e00b      	b.n	8001c28 <HAL_DMA_IRQHandler+0xb0>
 8001c10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c14:	e008      	b.n	8001c28 <HAL_DMA_IRQHandler+0xb0>
 8001c16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c1a:	e005      	b.n	8001c28 <HAL_DMA_IRQHandler+0xb0>
 8001c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c20:	e002      	b.n	8001c28 <HAL_DMA_IRQHandler+0xb0>
 8001c22:	2340      	movs	r3, #64	; 0x40
 8001c24:	e000      	b.n	8001c28 <HAL_DMA_IRQHandler+0xb0>
 8001c26:	2304      	movs	r3, #4
 8001c28:	4a55      	ldr	r2, [pc, #340]	; (8001d80 <HAL_DMA_IRQHandler+0x208>)
 8001c2a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 8094 	beq.w	8001d5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c3e:	e08e      	b.n	8001d5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	2202      	movs	r2, #2
 8001c46:	409a      	lsls	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d056      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x186>
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d051      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10b      	bne.n	8001c80 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 020a 	bic.w	r2, r2, #10
 8001c76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a38      	ldr	r2, [pc, #224]	; (8001d68 <HAL_DMA_IRQHandler+0x1f0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d029      	beq.n	8001cde <HAL_DMA_IRQHandler+0x166>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a37      	ldr	r2, [pc, #220]	; (8001d6c <HAL_DMA_IRQHandler+0x1f4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d022      	beq.n	8001cda <HAL_DMA_IRQHandler+0x162>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a35      	ldr	r2, [pc, #212]	; (8001d70 <HAL_DMA_IRQHandler+0x1f8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d01a      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x15c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a34      	ldr	r2, [pc, #208]	; (8001d74 <HAL_DMA_IRQHandler+0x1fc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d012      	beq.n	8001cce <HAL_DMA_IRQHandler+0x156>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a32      	ldr	r2, [pc, #200]	; (8001d78 <HAL_DMA_IRQHandler+0x200>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00a      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x150>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a31      	ldr	r2, [pc, #196]	; (8001d7c <HAL_DMA_IRQHandler+0x204>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d102      	bne.n	8001cc2 <HAL_DMA_IRQHandler+0x14a>
 8001cbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cc0:	e00e      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x168>
 8001cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cc6:	e00b      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x168>
 8001cc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ccc:	e008      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x168>
 8001cce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd2:	e005      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x168>
 8001cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd8:	e002      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x168>
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e000      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x168>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <HAL_DMA_IRQHandler+0x208>)
 8001ce2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d034      	beq.n	8001d5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001cfc:	e02f      	b.n	8001d5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	2208      	movs	r2, #8
 8001d04:	409a      	lsls	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d028      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x1e8>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d023      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 020e 	bic.w	r2, r2, #14
 8001d26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d30:	2101      	movs	r1, #1
 8001d32:	fa01 f202 	lsl.w	r2, r1, r2
 8001d36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
    }
  }
  return;
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
}
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40020008 	.word	0x40020008
 8001d6c:	4002001c 	.word	0x4002001c
 8001d70:	40020030 	.word	0x40020030
 8001d74:	40020044 	.word	0x40020044
 8001d78:	40020058 	.word	0x40020058
 8001d7c:	4002006c 	.word	0x4002006c
 8001d80:	40020000 	.word	0x40020000

08001d84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001da0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d108      	bne.n	8001dc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dc2:	e007      	b.n	8001dd4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	60da      	str	r2, [r3, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b08b      	sub	sp, #44	; 0x2c
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df2:	e169      	b.n	80020c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001df4:	2201      	movs	r2, #1
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	f040 8158 	bne.w	80020c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4a9a      	ldr	r2, [pc, #616]	; (8002080 <HAL_GPIO_Init+0x2a0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d05e      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e1c:	4a98      	ldr	r2, [pc, #608]	; (8002080 <HAL_GPIO_Init+0x2a0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d875      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e22:	4a98      	ldr	r2, [pc, #608]	; (8002084 <HAL_GPIO_Init+0x2a4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d058      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e28:	4a96      	ldr	r2, [pc, #600]	; (8002084 <HAL_GPIO_Init+0x2a4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d86f      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e2e:	4a96      	ldr	r2, [pc, #600]	; (8002088 <HAL_GPIO_Init+0x2a8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d052      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e34:	4a94      	ldr	r2, [pc, #592]	; (8002088 <HAL_GPIO_Init+0x2a8>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d869      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e3a:	4a94      	ldr	r2, [pc, #592]	; (800208c <HAL_GPIO_Init+0x2ac>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d04c      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e40:	4a92      	ldr	r2, [pc, #584]	; (800208c <HAL_GPIO_Init+0x2ac>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d863      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e46:	4a92      	ldr	r2, [pc, #584]	; (8002090 <HAL_GPIO_Init+0x2b0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d046      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
 8001e4c:	4a90      	ldr	r2, [pc, #576]	; (8002090 <HAL_GPIO_Init+0x2b0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d85d      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e52:	2b12      	cmp	r3, #18
 8001e54:	d82a      	bhi.n	8001eac <HAL_GPIO_Init+0xcc>
 8001e56:	2b12      	cmp	r3, #18
 8001e58:	d859      	bhi.n	8001f0e <HAL_GPIO_Init+0x12e>
 8001e5a:	a201      	add	r2, pc, #4	; (adr r2, 8001e60 <HAL_GPIO_Init+0x80>)
 8001e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e60:	08001edb 	.word	0x08001edb
 8001e64:	08001eb5 	.word	0x08001eb5
 8001e68:	08001ec7 	.word	0x08001ec7
 8001e6c:	08001f09 	.word	0x08001f09
 8001e70:	08001f0f 	.word	0x08001f0f
 8001e74:	08001f0f 	.word	0x08001f0f
 8001e78:	08001f0f 	.word	0x08001f0f
 8001e7c:	08001f0f 	.word	0x08001f0f
 8001e80:	08001f0f 	.word	0x08001f0f
 8001e84:	08001f0f 	.word	0x08001f0f
 8001e88:	08001f0f 	.word	0x08001f0f
 8001e8c:	08001f0f 	.word	0x08001f0f
 8001e90:	08001f0f 	.word	0x08001f0f
 8001e94:	08001f0f 	.word	0x08001f0f
 8001e98:	08001f0f 	.word	0x08001f0f
 8001e9c:	08001f0f 	.word	0x08001f0f
 8001ea0:	08001f0f 	.word	0x08001f0f
 8001ea4:	08001ebd 	.word	0x08001ebd
 8001ea8:	08001ed1 	.word	0x08001ed1
 8001eac:	4a79      	ldr	r2, [pc, #484]	; (8002094 <HAL_GPIO_Init+0x2b4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eb2:	e02c      	b.n	8001f0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	623b      	str	r3, [r7, #32]
          break;
 8001eba:	e029      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	623b      	str	r3, [r7, #32]
          break;
 8001ec4:	e024      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	3308      	adds	r3, #8
 8001ecc:	623b      	str	r3, [r7, #32]
          break;
 8001ece:	e01f      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	330c      	adds	r3, #12
 8001ed6:	623b      	str	r3, [r7, #32]
          break;
 8001ed8:	e01a      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	623b      	str	r3, [r7, #32]
          break;
 8001ee6:	e013      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	611a      	str	r2, [r3, #16]
          break;
 8001efa:	e009      	b.n	8001f10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001efc:	2308      	movs	r3, #8
 8001efe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	615a      	str	r2, [r3, #20]
          break;
 8001f06:	e003      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	623b      	str	r3, [r7, #32]
          break;
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x130>
          break;
 8001f0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2bff      	cmp	r3, #255	; 0xff
 8001f14:	d801      	bhi.n	8001f1a <HAL_GPIO_Init+0x13a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	e001      	b.n	8001f1e <HAL_GPIO_Init+0x13e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2bff      	cmp	r3, #255	; 0xff
 8001f24:	d802      	bhi.n	8001f2c <HAL_GPIO_Init+0x14c>
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x152>
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	3b08      	subs	r3, #8
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	210f      	movs	r1, #15
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	401a      	ands	r2, r3
 8001f44:	6a39      	ldr	r1, [r7, #32]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 80b1 	beq.w	80020c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f60:	4b4d      	ldr	r3, [pc, #308]	; (8002098 <HAL_GPIO_Init+0x2b8>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4a4c      	ldr	r2, [pc, #304]	; (8002098 <HAL_GPIO_Init+0x2b8>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6193      	str	r3, [r2, #24]
 8001f6c:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <HAL_GPIO_Init+0x2b8>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f78:	4a48      	ldr	r2, [pc, #288]	; (800209c <HAL_GPIO_Init+0x2bc>)
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <HAL_GPIO_Init+0x2c0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d013      	beq.n	8001fcc <HAL_GPIO_Init+0x1ec>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3f      	ldr	r2, [pc, #252]	; (80020a4 <HAL_GPIO_Init+0x2c4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00d      	beq.n	8001fc8 <HAL_GPIO_Init+0x1e8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3e      	ldr	r2, [pc, #248]	; (80020a8 <HAL_GPIO_Init+0x2c8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e4>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3d      	ldr	r2, [pc, #244]	; (80020ac <HAL_GPIO_Init+0x2cc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d101      	bne.n	8001fc0 <HAL_GPIO_Init+0x1e0>
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e006      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	e004      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_GPIO_Init+0x1ee>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	f002 0203 	and.w	r2, r2, #3
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	4093      	lsls	r3, r2
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fde:	492f      	ldr	r1, [pc, #188]	; (800209c <HAL_GPIO_Init+0x2bc>)
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	492c      	ldr	r1, [pc, #176]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002006:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	43db      	mvns	r3, r3
 800200e:	4928      	ldr	r1, [pc, #160]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002010:	4013      	ands	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d006      	beq.n	800202e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4922      	ldr	r1, [pc, #136]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	43db      	mvns	r3, r3
 8002036:	491e      	ldr	r1, [pc, #120]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002038:	4013      	ands	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	4918      	ldr	r1, [pc, #96]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	43db      	mvns	r3, r3
 800205e:	4914      	ldr	r1, [pc, #80]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002060:	4013      	ands	r3, r2
 8002062:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d021      	beq.n	80020b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	490e      	ldr	r1, [pc, #56]	; (80020b0 <HAL_GPIO_Init+0x2d0>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	60cb      	str	r3, [r1, #12]
 800207c:	e021      	b.n	80020c2 <HAL_GPIO_Init+0x2e2>
 800207e:	bf00      	nop
 8002080:	10320000 	.word	0x10320000
 8002084:	10310000 	.word	0x10310000
 8002088:	10220000 	.word	0x10220000
 800208c:	10210000 	.word	0x10210000
 8002090:	10120000 	.word	0x10120000
 8002094:	10110000 	.word	0x10110000
 8002098:	40021000 	.word	0x40021000
 800209c:	40010000 	.word	0x40010000
 80020a0:	40010800 	.word	0x40010800
 80020a4:	40010c00 	.word	0x40010c00
 80020a8:	40011000 	.word	0x40011000
 80020ac:	40011400 	.word	0x40011400
 80020b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_GPIO_Init+0x304>)
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	4909      	ldr	r1, [pc, #36]	; (80020e4 <HAL_GPIO_Init+0x304>)
 80020be:	4013      	ands	r3, r2
 80020c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	3301      	adds	r3, #1
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	fa22 f303 	lsr.w	r3, r2, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f47f ae8e 	bne.w	8001df4 <HAL_GPIO_Init+0x14>
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	372c      	adds	r7, #44	; 0x2c
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	40010400 	.word	0x40010400

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e272      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8087 	beq.w	8002216 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002108:	4b92      	ldr	r3, [pc, #584]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b04      	cmp	r3, #4
 8002112:	d00c      	beq.n	800212e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002114:	4b8f      	ldr	r3, [pc, #572]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b08      	cmp	r3, #8
 800211e:	d112      	bne.n	8002146 <HAL_RCC_OscConfig+0x5e>
 8002120:	4b8c      	ldr	r3, [pc, #560]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212c:	d10b      	bne.n	8002146 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212e:	4b89      	ldr	r3, [pc, #548]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d06c      	beq.n	8002214 <HAL_RCC_OscConfig+0x12c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d168      	bne.n	8002214 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e24c      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x76>
 8002150:	4b80      	ldr	r3, [pc, #512]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a7f      	ldr	r2, [pc, #508]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	e02e      	b.n	80021bc <HAL_RCC_OscConfig+0xd4>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x98>
 8002166:	4b7b      	ldr	r3, [pc, #492]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a7a      	ldr	r2, [pc, #488]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 800216c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b78      	ldr	r3, [pc, #480]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a77      	ldr	r2, [pc, #476]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e01d      	b.n	80021bc <HAL_RCC_OscConfig+0xd4>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0xbc>
 800218a:	4b72      	ldr	r3, [pc, #456]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a71      	ldr	r2, [pc, #452]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b6f      	ldr	r3, [pc, #444]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a6e      	ldr	r2, [pc, #440]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0xd4>
 80021a4:	4b6b      	ldr	r3, [pc, #428]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a6a      	ldr	r2, [pc, #424]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b68      	ldr	r3, [pc, #416]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a67      	ldr	r2, [pc, #412]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d013      	beq.n	80021ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff fa32 	bl	800162c <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021cc:	f7ff fa2e 	bl	800162c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e200      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	4b5d      	ldr	r3, [pc, #372]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0xe4>
 80021ea:	e014      	b.n	8002216 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7ff fa1e 	bl	800162c <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f4:	f7ff fa1a 	bl	800162c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e1ec      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	4b53      	ldr	r3, [pc, #332]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x10c>
 8002212:	e000      	b.n	8002216 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d063      	beq.n	80022ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002222:	4b4c      	ldr	r3, [pc, #304]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800222e:	4b49      	ldr	r3, [pc, #292]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b08      	cmp	r3, #8
 8002238:	d11c      	bne.n	8002274 <HAL_RCC_OscConfig+0x18c>
 800223a:	4b46      	ldr	r3, [pc, #280]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d116      	bne.n	8002274 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	4b43      	ldr	r3, [pc, #268]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_RCC_OscConfig+0x176>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d001      	beq.n	800225e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e1c0      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225e:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4939      	ldr	r1, [pc, #228]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002272:	e03a      	b.n	80022ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d020      	beq.n	80022be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227c:	4b36      	ldr	r3, [pc, #216]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff f9d3 	bl	800162c <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228a:	f7ff f9cf 	bl	800162c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e1a1      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229c:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a8:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4927      	ldr	r1, [pc, #156]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]
 80022bc:	e015      	b.n	80022ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022be:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff f9b2 	bl	800162c <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022cc:	f7ff f9ae 	bl	800162c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e180      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d03a      	beq.n	800236c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d019      	beq.n	8002332 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fe:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_RCC_OscConfig+0x274>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002304:	f7ff f992 	bl	800162c <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230c:	f7ff f98e 	bl	800162c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e160      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800232a:	2001      	movs	r0, #1
 800232c:	f000 fad8 	bl	80028e0 <RCC_Delay>
 8002330:	e01c      	b.n	800236c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_RCC_OscConfig+0x274>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002338:	f7ff f978 	bl	800162c <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233e:	e00f      	b.n	8002360 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002340:	f7ff f974 	bl	800162c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d908      	bls.n	8002360 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e146      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	42420000 	.word	0x42420000
 800235c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002360:	4b92      	ldr	r3, [pc, #584]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e9      	bne.n	8002340 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80a6 	beq.w	80024c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237e:	4b8b      	ldr	r3, [pc, #556]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10d      	bne.n	80023a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238a:	4b88      	ldr	r3, [pc, #544]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4a87      	ldr	r2, [pc, #540]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002394:	61d3      	str	r3, [r2, #28]
 8002396:	4b85      	ldr	r3, [pc, #532]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a2:	2301      	movs	r3, #1
 80023a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a6:	4b82      	ldr	r3, [pc, #520]	; (80025b0 <HAL_RCC_OscConfig+0x4c8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d118      	bne.n	80023e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b2:	4b7f      	ldr	r3, [pc, #508]	; (80025b0 <HAL_RCC_OscConfig+0x4c8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a7e      	ldr	r2, [pc, #504]	; (80025b0 <HAL_RCC_OscConfig+0x4c8>)
 80023b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023be:	f7ff f935 	bl	800162c <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c6:	f7ff f931 	bl	800162c <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b64      	cmp	r3, #100	; 0x64
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e103      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	4b75      	ldr	r3, [pc, #468]	; (80025b0 <HAL_RCC_OscConfig+0x4c8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d106      	bne.n	80023fa <HAL_RCC_OscConfig+0x312>
 80023ec:	4b6f      	ldr	r3, [pc, #444]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a6e      	ldr	r2, [pc, #440]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	e02d      	b.n	8002456 <HAL_RCC_OscConfig+0x36e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0x334>
 8002402:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a69      	ldr	r2, [pc, #420]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	6213      	str	r3, [r2, #32]
 800240e:	4b67      	ldr	r3, [pc, #412]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a66      	ldr	r2, [pc, #408]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	e01c      	b.n	8002456 <HAL_RCC_OscConfig+0x36e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b05      	cmp	r3, #5
 8002422:	d10c      	bne.n	800243e <HAL_RCC_OscConfig+0x356>
 8002424:	4b61      	ldr	r3, [pc, #388]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4a60      	ldr	r2, [pc, #384]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	6213      	str	r3, [r2, #32]
 8002430:	4b5e      	ldr	r3, [pc, #376]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a5d      	ldr	r2, [pc, #372]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	e00b      	b.n	8002456 <HAL_RCC_OscConfig+0x36e>
 800243e:	4b5b      	ldr	r3, [pc, #364]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4a5a      	ldr	r2, [pc, #360]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	6213      	str	r3, [r2, #32]
 800244a:	4b58      	ldr	r3, [pc, #352]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4a57      	ldr	r2, [pc, #348]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002450:	f023 0304 	bic.w	r3, r3, #4
 8002454:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d015      	beq.n	800248a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245e:	f7ff f8e5 	bl	800162c <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7ff f8e1 	bl	800162c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	; 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e0b1      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247c:	4b4b      	ldr	r3, [pc, #300]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ee      	beq.n	8002466 <HAL_RCC_OscConfig+0x37e>
 8002488:	e014      	b.n	80024b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7ff f8cf 	bl	800162c <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7ff f8cb 	bl	800162c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e09b      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a8:	4b40      	ldr	r3, [pc, #256]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1ee      	bne.n	8002492 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d105      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ba:	4b3c      	ldr	r3, [pc, #240]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4a3b      	ldr	r2, [pc, #236]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 8087 	beq.w	80025de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d0:	4b36      	ldr	r3, [pc, #216]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d061      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d146      	bne.n	8002572 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e4:	4b33      	ldr	r3, [pc, #204]	; (80025b4 <HAL_RCC_OscConfig+0x4cc>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7ff f89f 	bl	800162c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f2:	f7ff f89b 	bl	800162c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e06d      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002504:	4b29      	ldr	r3, [pc, #164]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d108      	bne.n	800252c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800251a:	4b24      	ldr	r3, [pc, #144]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	4921      	ldr	r1, [pc, #132]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a19      	ldr	r1, [r3, #32]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	430b      	orrs	r3, r1
 800253e:	491b      	ldr	r1, [pc, #108]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <HAL_RCC_OscConfig+0x4cc>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7ff f86f 	bl	800162c <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002552:	f7ff f86b 	bl	800162c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e03d      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x46a>
 8002570:	e035      	b.n	80025de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <HAL_RCC_OscConfig+0x4cc>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff f858 	bl	800162c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7ff f854 	bl	800162c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e026      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_RCC_OscConfig+0x4c4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x498>
 800259e:	e01e      	b.n	80025de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e019      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40007000 	.word	0x40007000
 80025b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_OscConfig+0x500>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d106      	bne.n	80025da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d001      	beq.n	80025de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40021000 	.word	0x40021000

080025ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0d0      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002600:	4b6a      	ldr	r3, [pc, #424]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d910      	bls.n	8002630 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b67      	ldr	r3, [pc, #412]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 0207 	bic.w	r2, r3, #7
 8002616:	4965      	ldr	r1, [pc, #404]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b63      	ldr	r3, [pc, #396]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0b8      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002648:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a58      	ldr	r2, [pc, #352]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002652:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002660:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a52      	ldr	r2, [pc, #328]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800266a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800266c:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	494d      	ldr	r1, [pc, #308]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d040      	beq.n	800270c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d107      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	4b47      	ldr	r3, [pc, #284]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d115      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e07f      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e073      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e06b      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ca:	4b39      	ldr	r3, [pc, #228]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f023 0203 	bic.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4936      	ldr	r1, [pc, #216]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026dc:	f7fe ffa6 	bl	800162c <HAL_GetTick>
 80026e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e4:	f7fe ffa2 	bl	800162c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e053      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 020c 	and.w	r2, r3, #12
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	429a      	cmp	r2, r3
 800270a:	d1eb      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d210      	bcs.n	800273c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 0207 	bic.w	r2, r3, #7
 8002722:	4922      	ldr	r1, [pc, #136]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e032      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4916      	ldr	r1, [pc, #88]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	490e      	ldr	r1, [pc, #56]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277a:	f000 f821 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 800277e:	4602      	mov	r2, r0
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	490a      	ldr	r1, [pc, #40]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800278c:	5ccb      	ldrb	r3, [r1, r3]
 800278e:	fa22 f303 	lsr.w	r3, r2, r3
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1d0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe ff04 	bl	80015a8 <HAL_InitTick>

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40022000 	.word	0x40022000
 80027b0:	40021000 	.word	0x40021000
 80027b4:	0800368c 	.word	0x0800368c
 80027b8:	200002e8 	.word	0x200002e8
 80027bc:	200002ec 	.word	0x200002ec

080027c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	b490      	push	{r4, r7}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027c6:	4b29      	ldr	r3, [pc, #164]	; (800286c <HAL_RCC_GetSysClockFreq+0xac>)
 80027c8:	1d3c      	adds	r4, r7, #4
 80027ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027d0:	f240 2301 	movw	r3, #513	; 0x201
 80027d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ea:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d002      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x40>
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d003      	beq.n	8002806 <HAL_RCC_GetSysClockFreq+0x46>
 80027fe:	e02b      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002800:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002802:	623b      	str	r3, [r7, #32]
      break;
 8002804:	e02b      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	0c9b      	lsrs	r3, r3, #18
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3328      	adds	r3, #40	; 0x28
 8002810:	443b      	add	r3, r7
 8002812:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002816:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d012      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	0c5b      	lsrs	r3, r3, #17
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	3328      	adds	r3, #40	; 0x28
 800282e:	443b      	add	r3, r7
 8002830:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002834:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <HAL_RCC_GetSysClockFreq+0xb4>)
 800283a:	fb03 f202 	mul.w	r2, r3, r2
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
 8002846:	e004      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <HAL_RCC_GetSysClockFreq+0xb8>)
 800284c:	fb02 f303 	mul.w	r3, r2, r3
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	623b      	str	r3, [r7, #32]
      break;
 8002856:	e002      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_RCC_GetSysClockFreq+0xb4>)
 800285a:	623b      	str	r3, [r7, #32]
      break;
 800285c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285e:	6a3b      	ldr	r3, [r7, #32]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3728      	adds	r7, #40	; 0x28
 8002864:	46bd      	mov	sp, r7
 8002866:	bc90      	pop	{r4, r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	0800367c 	.word	0x0800367c
 8002870:	40021000 	.word	0x40021000
 8002874:	007a1200 	.word	0x007a1200
 8002878:	003d0900 	.word	0x003d0900

0800287c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002880:	4b02      	ldr	r3, [pc, #8]	; (800288c <HAL_RCC_GetHCLKFreq+0x10>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	200002e8 	.word	0x200002e8

08002890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002894:	f7ff fff2 	bl	800287c <HAL_RCC_GetHCLKFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4903      	ldr	r1, [pc, #12]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	0800369c 	.word	0x0800369c

080028b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028bc:	f7ff ffde 	bl	800287c <HAL_RCC_GetHCLKFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	0adb      	lsrs	r3, r3, #11
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	4903      	ldr	r1, [pc, #12]	; (80028dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ce:	5ccb      	ldrb	r3, [r1, r3]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	0800369c 	.word	0x0800369c

080028e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <RCC_Delay+0x34>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <RCC_Delay+0x38>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	0a5b      	lsrs	r3, r3, #9
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028fc:	bf00      	nop
  }
  while (Delay --);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1e5a      	subs	r2, r3, #1
 8002902:	60fa      	str	r2, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f9      	bne.n	80028fc <RCC_Delay+0x1c>
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	200002e8 	.word	0x200002e8
 8002918:	10624dd3 	.word	0x10624dd3

0800291c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e03f      	b.n	80029ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe fc4c 	bl	80011e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2224      	movs	r2, #36	; 0x24
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800295e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 fd47 	bl	80033f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695a      	ldr	r2, [r3, #20]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	4613      	mov	r3, r2
 80029c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d130      	bne.n	8002a32 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_UART_Transmit_IT+0x26>
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e029      	b.n	8002a34 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_UART_Transmit_IT+0x38>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e022      	b.n	8002a34 <HAL_UART_Transmit_IT+0x7e>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	88fa      	ldrh	r2, [r7, #6]
 8002a00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	88fa      	ldrh	r2, [r7, #6]
 8002a06:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2221      	movs	r2, #33	; 0x21
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a2c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
  }
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d11d      	bne.n	8002a94 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_UART_Receive_IT+0x26>
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e016      	b.n	8002a96 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_UART_Receive_IT+0x38>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e00f      	b.n	8002a96 <HAL_UART_Receive_IT+0x58>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	461a      	mov	r2, r3
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 faaf 	bl	8002fee <UART_Start_Receive_IT>
 8002a90:	4603      	mov	r3, r0
 8002a92:	e000      	b.n	8002a96 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d11d      	bne.n	8002af4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_UART_Receive_DMA+0x26>
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e016      	b.n	8002af6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_UART_Receive_DMA+0x38>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e00f      	b.n	8002af6 <HAL_UART_Receive_DMA+0x58>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fab8 	bl	8003060 <UART_Start_Receive_DMA>
 8002af0:	4603      	mov	r3, r0
 8002af2:	e000      	b.n	8002af6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
  }
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10d      	bne.n	8002b52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_UART_IRQHandler+0x52>
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fba8 	bl	80032a0 <UART_Receive_IT>
      return;
 8002b50:	e17b      	b.n	8002e4a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80b1 	beq.w	8002cbc <HAL_UART_IRQHandler+0x1bc>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <HAL_UART_IRQHandler+0x70>
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80a6 	beq.w	8002cbc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_UART_IRQHandler+0x90>
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_UART_IRQHandler+0xb0>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f043 0202 	orr.w	r2, r3, #2
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_UART_IRQHandler+0xd0>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f043 0204 	orr.w	r2, r3, #4
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00f      	beq.n	8002bfa <HAL_UART_IRQHandler+0xfa>
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d104      	bne.n	8002bee <HAL_UART_IRQHandler+0xee>
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f043 0208 	orr.w	r2, r3, #8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 811e 	beq.w	8002e40 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <HAL_UART_IRQHandler+0x11e>
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fb41 	bl	80032a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <HAL_UART_IRQHandler+0x146>
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d031      	beq.n	8002caa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fa83 	bl	8003152 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d023      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c68:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d013      	beq.n	8002c9a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	4a76      	ldr	r2, [pc, #472]	; (8002e50 <HAL_UART_IRQHandler+0x350>)
 8002c78:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe ff04 	bl	8001a8c <HAL_DMA_Abort_IT>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c94:	4610      	mov	r0, r2
 8002c96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c98:	e00e      	b.n	8002cb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f8e3 	bl	8002e66 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca0:	e00a      	b.n	8002cb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8df 	bl	8002e66 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca8:	e006      	b.n	8002cb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8db 	bl	8002e66 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002cb6:	e0c3      	b.n	8002e40 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	bf00      	nop
    return;
 8002cba:	e0c1      	b.n	8002e40 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	f040 80a1 	bne.w	8002e08 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 809b 	beq.w	8002e08 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8095 	beq.w	8002e08 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d04e      	beq.n	8002da0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002d0c:	8a3b      	ldrh	r3, [r7, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8098 	beq.w	8002e44 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d18:	8a3a      	ldrh	r2, [r7, #16]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	f080 8092 	bcs.w	8002e44 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8a3a      	ldrh	r2, [r7, #16]
 8002d24:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d02b      	beq.n	8002d88 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d3e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d5e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0210 	bic.w	r2, r2, #16
 8002d7c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe fe47 	bl	8001a16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4619      	mov	r1, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f86d 	bl	8002e78 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d9e:	e051      	b.n	8002e44 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d047      	beq.n	8002e48 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002db8:	8a7b      	ldrh	r3, [r7, #18]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d044      	beq.n	8002e48 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002dcc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0210 	bic.w	r2, r2, #16
 8002dfa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dfc:	8a7b      	ldrh	r3, [r7, #18]
 8002dfe:	4619      	mov	r1, r3
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f839 	bl	8002e78 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e06:	e01f      	b.n	8002e48 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_UART_IRQHandler+0x324>
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f9d8 	bl	80031d2 <UART_Transmit_IT>
    return;
 8002e22:	e012      	b.n	8002e4a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00d      	beq.n	8002e4a <HAL_UART_IRQHandler+0x34a>
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fa19 	bl	8003270 <UART_EndTransmit_IT>
    return;
 8002e3e:	e004      	b.n	8002e4a <HAL_UART_IRQHandler+0x34a>
    return;
 8002e40:	bf00      	nop
 8002e42:	e002      	b.n	8002e4a <HAL_UART_IRQHandler+0x34a>
      return;
 8002e44:	bf00      	nop
 8002e46:	e000      	b.n	8002e4a <HAL_UART_IRQHandler+0x34a>
      return;
 8002e48:	bf00      	nop
  }
}
 8002e4a:	3728      	adds	r7, #40	; 0x28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	080031ab 	.word	0x080031ab

08002e54 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d12a      	bne.n	8002f00 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ebe:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ede:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d107      	bne.n	8002f00 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0210 	bic.w	r2, r2, #16
 8002efe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d106      	bne.n	8002f16 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f7ff ffb2 	bl	8002e78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f14:	e002      	b.n	8002f1c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f7fd f92c 	bl	8000174 <HAL_UART_RxCpltCallback>
}
 8002f1c:	bf00      	nop
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d108      	bne.n	8002f4c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	4619      	mov	r1, r3
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f7ff ff97 	bl	8002e78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f4a:	e002      	b.n	8002f52 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7ff ff81 	bl	8002e54 <HAL_UART_RxHalfCpltCallback>
}
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf14      	ite	ne
 8002f7a:	2301      	movne	r3, #1
 8002f7c:	2300      	moveq	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b21      	cmp	r3, #33	; 0x21
 8002f8c:	d108      	bne.n	8002fa0 <UART_DMAError+0x46>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2200      	movs	r2, #0
 8002f98:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002f9a:	68b8      	ldr	r0, [r7, #8]
 8002f9c:	f000 f8c4 	bl	8003128 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b22      	cmp	r3, #34	; 0x22
 8002fc0:	d108      	bne.n	8002fd4 <UART_DMAError+0x7a>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002fce:	68b8      	ldr	r0, [r7, #8]
 8002fd0:	f000 f8bf 	bl	8003152 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f043 0210 	orr.w	r2, r3, #16
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fe0:	68b8      	ldr	r0, [r7, #8]
 8002fe2:	f7ff ff40 	bl	8002e66 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b085      	sub	sp, #20
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	88fa      	ldrh	r2, [r7, #6]
 8003006:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2222      	movs	r2, #34	; 0x22
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003032:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0220 	orr.w	r2, r2, #32
 8003052:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	4613      	mov	r3, r2
 800306c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2222      	movs	r2, #34	; 0x22
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	4a23      	ldr	r2, [pc, #140]	; (800311c <UART_Start_Receive_DMA+0xbc>)
 800308e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	4a22      	ldr	r2, [pc, #136]	; (8003120 <UART_Start_Receive_DMA+0xc0>)
 8003096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	4a21      	ldr	r2, [pc, #132]	; (8003124 <UART_Start_Receive_DMA+0xc4>)
 800309e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	2200      	movs	r2, #0
 80030a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80030a8:	f107 0308 	add.w	r3, r7, #8
 80030ac:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3304      	adds	r3, #4
 80030b8:	4619      	mov	r1, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	f7fe fc4a 	bl	8001958 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0201 	orr.w	r2, r2, #1
 8003100:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003110:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	08002e8f 	.word	0x08002e8f
 8003120:	08002f25 	.word	0x08002f25
 8003124:	08002f5b 	.word	0x08002f5b

08003128 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800313e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr

08003152 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003168:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	2b01      	cmp	r3, #1
 8003180:	d107      	bne.n	8003192 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0210 	bic.w	r2, r2, #16
 8003190:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7ff fe4e 	bl	8002e66 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b085      	sub	sp, #20
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b21      	cmp	r3, #33	; 0x21
 80031e4:	d13e      	bne.n	8003264 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ee:	d114      	bne.n	800321a <UART_Transmit_IT+0x48>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d110      	bne.n	800321a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800320c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	1c9a      	adds	r2, r3, #2
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	621a      	str	r2, [r3, #32]
 8003218:	e008      	b.n	800322c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	1c59      	adds	r1, r3, #1
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6211      	str	r1, [r2, #32]
 8003224:	781a      	ldrb	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29b      	uxth	r3, r3
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	4619      	mov	r1, r3
 800323a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10f      	bne.n	8003260 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800324e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800325e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e000      	b.n	8003266 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr

08003270 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003286:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7fc ff65 	bl	8000160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b22      	cmp	r3, #34	; 0x22
 80032b2:	f040 8099 	bne.w	80033e8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032be:	d117      	bne.n	80032f0 <UART_Receive_IT+0x50>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d113      	bne.n	80032f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032de:	b29a      	uxth	r2, r3
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	1c9a      	adds	r2, r3, #2
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	629a      	str	r2, [r3, #40]	; 0x28
 80032ee:	e026      	b.n	800333e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003302:	d007      	beq.n	8003314 <UART_Receive_IT+0x74>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <UART_Receive_IT+0x82>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d106      	bne.n	8003322 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	b2da      	uxtb	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e008      	b.n	8003334 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800332e:	b2da      	uxtb	r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29b      	uxth	r3, r3
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4619      	mov	r1, r3
 800334c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800334e:	2b00      	cmp	r3, #0
 8003350:	d148      	bne.n	80033e4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0220 	bic.w	r2, r2, #32
 8003360:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003370:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0201 	bic.w	r2, r2, #1
 8003380:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	2b01      	cmp	r3, #1
 8003390:	d123      	bne.n	80033da <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0210 	bic.w	r2, r2, #16
 80033a6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d10a      	bne.n	80033cc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff fd50 	bl	8002e78 <HAL_UARTEx_RxEventCallback>
 80033d8:	e002      	b.n	80033e0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fc feca 	bl	8000174 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e002      	b.n	80033ea <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e000      	b.n	80033ea <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
  }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800342e:	f023 030c 	bic.w	r3, r3, #12
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6812      	ldr	r2, [r2, #0]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	430b      	orrs	r3, r1
 800343a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a2c      	ldr	r2, [pc, #176]	; (8003508 <UART_SetConfig+0x114>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d103      	bne.n	8003464 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800345c:	f7ff fa2c 	bl	80028b8 <HAL_RCC_GetPCLK2Freq>
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	e002      	b.n	800346a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003464:	f7ff fa14 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 8003468:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	009a      	lsls	r2, r3, #2
 8003474:	441a      	add	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	4a22      	ldr	r2, [pc, #136]	; (800350c <UART_SetConfig+0x118>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	0119      	lsls	r1, r3, #4
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	009a      	lsls	r2, r3, #2
 8003494:	441a      	add	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	fbb2 f2f3 	udiv	r2, r2, r3
 80034a0:	4b1a      	ldr	r3, [pc, #104]	; (800350c <UART_SetConfig+0x118>)
 80034a2:	fba3 0302 	umull	r0, r3, r3, r2
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	2064      	movs	r0, #100	; 0x64
 80034aa:	fb00 f303 	mul.w	r3, r0, r3
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	3332      	adds	r3, #50	; 0x32
 80034b4:	4a15      	ldr	r2, [pc, #84]	; (800350c <UART_SetConfig+0x118>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c0:	4419      	add	r1, r3
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	009a      	lsls	r2, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <UART_SetConfig+0x118>)
 80034da:	fba3 0302 	umull	r0, r3, r3, r2
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	2064      	movs	r0, #100	; 0x64
 80034e2:	fb00 f303 	mul.w	r3, r0, r3
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	3332      	adds	r3, #50	; 0x32
 80034ec:	4a07      	ldr	r2, [pc, #28]	; (800350c <UART_SetConfig+0x118>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	f003 020f 	and.w	r2, r3, #15
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	440a      	add	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40013800 	.word	0x40013800
 800350c:	51eb851f 	.word	0x51eb851f

08003510 <__libc_init_array>:
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	2600      	movs	r6, #0
 8003514:	4d0c      	ldr	r5, [pc, #48]	; (8003548 <__libc_init_array+0x38>)
 8003516:	4c0d      	ldr	r4, [pc, #52]	; (800354c <__libc_init_array+0x3c>)
 8003518:	1b64      	subs	r4, r4, r5
 800351a:	10a4      	asrs	r4, r4, #2
 800351c:	42a6      	cmp	r6, r4
 800351e:	d109      	bne.n	8003534 <__libc_init_array+0x24>
 8003520:	f000 f822 	bl	8003568 <_init>
 8003524:	2600      	movs	r6, #0
 8003526:	4d0a      	ldr	r5, [pc, #40]	; (8003550 <__libc_init_array+0x40>)
 8003528:	4c0a      	ldr	r4, [pc, #40]	; (8003554 <__libc_init_array+0x44>)
 800352a:	1b64      	subs	r4, r4, r5
 800352c:	10a4      	asrs	r4, r4, #2
 800352e:	42a6      	cmp	r6, r4
 8003530:	d105      	bne.n	800353e <__libc_init_array+0x2e>
 8003532:	bd70      	pop	{r4, r5, r6, pc}
 8003534:	f855 3b04 	ldr.w	r3, [r5], #4
 8003538:	4798      	blx	r3
 800353a:	3601      	adds	r6, #1
 800353c:	e7ee      	b.n	800351c <__libc_init_array+0xc>
 800353e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003542:	4798      	blx	r3
 8003544:	3601      	adds	r6, #1
 8003546:	e7f2      	b.n	800352e <__libc_init_array+0x1e>
 8003548:	080036a4 	.word	0x080036a4
 800354c:	080036a4 	.word	0x080036a4
 8003550:	080036a4 	.word	0x080036a4
 8003554:	080036a8 	.word	0x080036a8

08003558 <memset>:
 8003558:	4603      	mov	r3, r0
 800355a:	4402      	add	r2, r0
 800355c:	4293      	cmp	r3, r2
 800355e:	d100      	bne.n	8003562 <memset+0xa>
 8003560:	4770      	bx	lr
 8003562:	f803 1b01 	strb.w	r1, [r3], #1
 8003566:	e7f9      	b.n	800355c <memset+0x4>

08003568 <_init>:
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	bf00      	nop
 800356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356e:	bc08      	pop	{r3}
 8003570:	469e      	mov	lr, r3
 8003572:	4770      	bx	lr

08003574 <_fini>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	bf00      	nop
 8003578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357a:	bc08      	pop	{r3}
 800357c:	469e      	mov	lr, r3
 800357e:	4770      	bx	lr
